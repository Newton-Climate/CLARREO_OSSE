      SUBROUTINE DGRD(DEGALL,IFUNC,FWFUNC,LSKIP,WVLNGTH_LRES,           &
     &                RADIANCE_LRES,NUM_LRES)

!     DGRD IS THE DRIVER FOR SPECTRAL SLIT FUNCTION POST-PROCESSING.  A
!     PRIOR CALL TO CHKRES CHECKS THE MODTRAN INPUTS RELEVANT TO DGRD.

!     INPUT ARGUMENTS:
!       IFUNC    SCANNING FUNCTION NUMERICAL LABEL.
!                 (1=TRIANG,2=RECTAN,3=GAUSS,4=SINC,5=SINCSQ,6=HAMMING)
!       FWFUNC   NUMBER OF FULL-WIDTH AT HALF-MAXIMUM (FWHM)
!                USED TO INTEGRATE SCANNING FUNCTION
!       DEGALL   LOGICAL FLAG, TRUE IF ALL TABLE ENTRIES ARE DEGRADED.
!       LSKIP    TRUE IF AN OLD TAPE7.SCR IS TO BE REUSED.
      INTEGER IFUNC
      REAL FWFUNC
      LOGICAL DEGALL,LSKIP

!     PARAMETERS:
!       MSPCDT   MAXIMUM NUMBER OF SPECTRAL POINTS IN TAPE7.SCR FILE.
!       MDDGRD   MAXIMUM NUMBER OF OUTPUT SPECTRAL POINTS.
!                (ALSO IN ROUTINE CHKRES - THEY MUST BE THE SAME)
      INTEGER MSPCDT,MDDGRD
      PARAMETER(MSPCDT=50000,MDDGRD=50000)
      INCLUDE 'PARAMS.h'

!     COMMONS:
      INCLUDE 'IFIL.h'

!     /CARD1/
!       MODEL    ATMOSPHERIC PROFILE MODEL NUMBER.
!       ITYPE    PATH TYPE LABEL (1=HORIZONTAL,
!                  2=SLANT BETWEEN ALTITUDES & 3=SLANT TO SPACE).
!       IEMSCT   RADIATIVE TRANSFER MODE
!                  0 FOR TRANSMITTANCE
!                  1 FOR THERMAL EMISSION
!                  2 FOR THERMAL EMISSION PLUS SOLAR SCATTER
!                  3 FOR TRANSMITTED SOLAR IRRADIANCE
!       NOPRNT   PRINT FLAG
      INTEGER MODEL,ITYPE,IEMSCT,M1,M2,M3,IM,NOPRNT
      LOGICAL MODTRN
      COMMON/CARD1/MODEL,ITYPE,IEMSCT,M1,M2,M3,IM,NOPRNT,MODTRN

!     /CARD4/
!       IV1      LOWEST FREQUENCY OUTPUT [CM-1].
!       IV2      HIGHEST FREQUENCY OUTPUT [CM-1].
!       IDV      PRINTOUT FREQUENCY STEP SIZE [CM-1].
!       IFWHM    TRIANGULAR SLIT FULL-WIDTH-HALF-MAXIMUM [CM-1].
!       IVX      CURRENT COMPUTATION FREQUENCY [CM-1].
!       IVOFF    OFFSET BETWEEN COMPUTATION AND OUTPUT FREQUENCIES,
!                REQUIRED FOR SLIT FUNCTION [CM-1].
!       IWRITE   COMPUTATION FREQUENCY OF NEXT WRITE [CM-1].
!       NSPCDT   NUMBER OF OUTPUT SPECTRAL DATA POINTS.
!       NWGT     NUMBER OF SPECTRAL BINS CONTRIBUTING TO SLIT FUNCTION.
!       WGT      NORMALIZED WEIGHTS USED TO DEFINE THE SLIT FUNCTION.
      INTEGER IV1,IV2,IDV,IFWHM,IVX,IVOFF,IWRITE,NSPCDT,NWGT
      REAL WGT
      COMMON/CARD4/IV1,IV2,IDV,IFWHM,IVX,IVOFF,IWRITE,NSPCDT,           &
     &  NWGT,WGT(NBINS)

!     /CSCAN/
!       CHUNIT   UNIT FLAG ('W'=WAVENUMBERS;'M'=MICRONS;'N'=NANOMETERS).
!       RELABS   SPECTRAL RESOLUTION FLAG('A'=ABSOLUTE;'R'=RELATIVE[%]).
!       LNFEED   LINE FEED FLAG FOR .FLX FILE ('T' FOR 80 CHARACTER
!                  LINES, 'F' FOR LONG LINES, ' ' FOR NO .FLX FILE).
      CHARACTER CHUNIT*1,RELABS*1,LNFEED*1
      COMMON/CSCAN/CHUNIT,RELABS,LNFEED

!     /SCAN/
!       V1       LOWER BOUND ON SPECTRAL RANGE [CHUNIT DEFINES UNIT].
!       V2       UPPER BOUND ON SPECTRAL RANGE [CHUNIT DEFINES UNIT].
!       DV       SPECTRAL STEP SIZE FOR OUTPUT [CHUNIT DEFINES UNIT].
!       FWHM     FULL-WIDTH-AT-HALF-MAXIMUM [CHUNIT DEFINES UNIT].
!       FWHMSQ   TRIANGULAR SLIT NORMALIZATION FACTOR
!                (EQUALS FWHM SQUARED) [CHUNIT DEFINES UNIT].
!       VOUT     CURRENT SPECTRAL OUTPUT [CHUNIT DEFINES UNIT].
      REAL V1,V2,DV,FWHM,FWHMSQ,VOUT
      COMMON/SCAN/V1,V2,DV,FWHM,FWHMSQ,VOUT

!     /CFLAGS/
!       YFLAG    Y COORDINATE FLAG FOR plot.dat FILE
!                 ="T" FOR TRANSMITTANCE
!                 ="R" FOR RADIANCE (IRRADIANCE FOR IEMSCT=3)
!                 ="N" FOR NO plot.dat OUTPUT
!       XFLAG    X COORDINATE FLAG FOR plot.dat FILE
!                 ="W" FOR FREQUENCY IN WAVENUMBERS (CM-1) AND
!                        RADIANCE IN W SR-1 CM-2 / CM-1
!                 ="M" FOR WAVELENGTH IN MICRONS AND
!                        RADIANCE IN W SR-1 CM-2 / MICRON
!                 ="N" FOR WAVELENGTH IN NANOMETERS AND
!                        RADIANCE IN MICRO-WATTS SR-1 CM-2 / NANOMETER
!       DLIMIT   DELIMITER CHARACTER STRING BETWEEN MODTRAN RUNS
!       FLAGS    SCANNING FUNCTION FLAGS.
      CHARACTER YFLAG*1,XFLAG*1,DLIMIT*8,FLAGS*7
      COMMON/CFLAGS/YFLAG,XFLAG,DLIMIT,FLAGS

!     /DISRT/
!       DIS      LOGICAL FLAG, TRUE FOR DISORT MULTIPLE SCATTERING.
!       DISAZM   LOGICAL FLAG, TRUE FOR DISORT WITH AZIMUTH DEPENDENCE.
!       DISALB   LOGICAL FLAG, TRUE FOR DISORT SPHERICAL ALBEDO OPTION.
!       LDISCL   LOGICAL FLAG, TRUE FOR ISAACS SCALED TO DISORT.
!       NSTR     NUMBER OF DISCRETE ORDINATE STREAMS.
!       NAZ      NUMBER OF DISORT AZIMUTH COMPONENTS.
!       N2GAUS   ORDER OF DOUBLE-GAUSS QUADRATURES.
      LOGICAL DIS,DISAZM,DISALB,LDISCL
      INTEGER NSTR,NAZ,N2GAUS
      COMMON/DISRT/DIS,DISAZM,DISALB,LDISCL,NSTR,NAZ,N2GAUS

!     LOCAL VARIABLES:
!       HEADER   TAPE7 HEADER INFORMATION.
!       FRMT     OUTPUT FORMAT FOR SCANNED TAPE7 FILE SPECTRAL DATA.
!       ISPCDT   COUNTER FOR TAPE7.SCR SPECTRAL POINTS.
!       NDDGRD   NUMBER OF DEGRADED DATA SPECTRAL POINTS.
!       IDDGRD   COUNTER FOR DEGRADED DATA SPECTRAL POINTS.
!       NCOL     INDEX OF LAST COLUMN IN TAPE7.SCR FILE.
!       ICOL     COUNTER FOR TAPE7.SCR COLUMNS.
!       ICOLMN   INDEX OF FIRST (IR)RADIANCE COLUMN WRITTEN TO *.7SC.
!       ICOLMX   INDEX OF LAST (IR)RADIANCE COLUMN WRITTEN TO *.7SC.
!       KCOL     INDEX OF TOTAL PATH (IR)RADIANCE COLUMN.
!       WNMIN    REQUESTED SPECTRAL RANGE MINIMUM FREQUENCY [CM-1].
!       WNMAX    REQUESTED SPECTRAL RANGE MAXIMUM FREQUENCY [CM-1].
!       SUM      UNCONVOLVED INTEGRATED SPECTRUM [IEMSCT DEFINES UNIT].
!       SUMCON   CONVOLVED INTEGRATED RADIANCE [W CM-2 SR-1].
!       LNTRAN   NEGATIVE LOGARITHM OF COMBINED SPECIES TRANSMITANCE.
!       VMIN     LOWER BOUND ON SPECTRAL RANGE [CHUNIT DEFINES UNIT].
!       VMAX     UPPER BOUND ON SPECTRAL RANGE [CHUNIT DEFINES UNIT].
!       WDGRD    SPECTRAL GRID OF DEGRADED DATA.
!       DDGRD    DEGRADED SPECTRAL DATA.
!       SPC0     SPECTRAL FREQUENCY OFFSET [CM-1].
!       SPCGRD   TAPE7.SCR SPECTRAL GRID [CM-1 BEFORE CALL TO CNVRTW;
!                           CHUNIT DEFINES UNIT AFTER CALL TO CNVRTW].
!       SPCDAT   TAPE7.SCR SPECTRAL DATA TABLE.
!       LNHEAD   LENGTH OF HEADER STRING.
      CHARACTER HEADER*512,FRMT*49
      INTEGER ISPCDT,NDDGRD,IDDGRD,NCOL,ICOL,ICOLMN,ICOLMX,KCOL,LNHEAD
      REAL WNMIN,WNMAX,SUM,SUMCON,LNTRAN,SPCMX,VMIN,VMAX,WDGRD(MDDGRD), &
     &  DDGRD(MDDGRD),SPC0,SPCGRD(0:MSPCDT),SPCDAT(MSPCDT,20+NMOLX)

!     FUNCTIONS:
!       CNVRTW   RETURNS INTEGRATED RAW (RECTANGULAR SLIT) SPECTRUM.
!       BNDPAS   RETURNS INTEGRATED CONVOLVED SPECTRUM.
!       LENSTR   RETURNS STRING LENGTH AFTER TRIMMING LEADING BLANKS.
      REAL CNVRTW,BNDPAS
      INTEGER LENSTR
      INTEGER NUM_LRES
      REAL  WVLNGTH_LRES(NUM_LRES), RADIANCE_LRES(NUM_LRES) !DRF
      INTEGER II

!     CHECK ARRAY SIZE:
      IF(MSPCDT.LT.NSPCDT)THEN
          WRITE(IPR,'(/A,/25X,I6,A,I6)')' Error in routine DGRD: '      &
     &      //' Number of spectral point in *.7sr file,',NSPCDT,        &
     &      ', exceeds the array size, parameter MSPCDT =',MSPCDT
          STOP 'Too many spectral points in *.7sr file.'
      ENDIF
!	WRITE(*,*) 'V1 = ',V1
!     FIND WHERE HEADER ENDS IN SCRATCH FILE EQUIVALENT OF TAPE7, IPUSCR
      REWIND(IPUSCR)
      HEADER(1:4)='0   '
   10 CONTINUE
      READ(IPUSCR,'(A)')HEADER(5:512)
      LNHEAD=LENSTR(HEADER)
      IF(HEADER(9:12).NE.'FREQ')THEN
         WRITE(IPUSCN,'(A)')HEADER(5:LNHEAD)
         GOTO 10
      ENDIF
      IF(IEMSCT.EQ.0)THEN

!         SPECTRAL TRANSMITTANCES:
          IF(CHUNIT.EQ.'W')THEN

!             WAVENUMBERS:
              HEADER(1:12)='   FREQUENCY'
              WRITE(IPUSCN,'(A)')HEADER(1:LNHEAD)
              READ(IPUSCR,'(A)')HEADER(5:512)
              HEADER(1:12)='      (CM-1)'
          ELSEIF(CHUNIT.EQ.'M')THEN

!             MICRONS:
              HEADER(1:12)='  WAVELENGTH'
              WRITE(IPUSCN,'(A)')HEADER(1:LNHEAD)
              READ(IPUSCR,'(A)')HEADER(5:512)
              HEADER(1:12)='   (MICRONS)'
          ELSE

!             NANOMETERS:
              HEADER(1:12)='  WAVELENGTH'
              WRITE(IPUSCN,'(A)')HEADER(1:LNHEAD)
              READ(IPUSCR,'(A)')HEADER(5:512)
              HEADER(1:12)='        (NM)'
          ENDIF
          WRITE(IPUSCN,'(A)')HEADER(1:LNHEAD)
      ELSE
          IF(CHUNIT.EQ.'W')THEN

!             WAVENUMBERS:
              WRITE(IPUSCN,'(2A)')'  FREQ CM-1   ',HEADER(19:LNHEAD)
          ELSEIF(CHUNIT.EQ.'M')THEN

!             MICRONS:
              WRITE(IPUSCN,'(2A)')' WAVLEN MCRN  ',HEADER(19:LNHEAD)
          ELSE

!             NANOMETERS:
              WRITE(IPUSCN,'(2A)')'  WAVLEN NM   ',HEADER(19:LNHEAD)
          ENDIF
      ENDIF

!     PREPARE TO READ SPECTRAL DATA:
      VMIN=MIN(V1,V2)
      VMAX=MAX(V1,V2)
      IF(CHUNIT.EQ.'W')THEN

!         WAVENUMBERS:
          FRMT(1:14)='((0P,F12.2,1X,'
          WNMIN=VMIN
          WNMAX=VMAX
      ELSEIF(CHUNIT.EQ.'M')THEN

!         MICRONS:
          FRMT(1:14)='((0P,F12.6,1X,'
          WNMIN=1.E4/VMAX
          WNMAX=1.E4/VMIN
      ELSE

!         NANOMETERS:
          FRMT(1:14)='((0P,F12.3,1X,'
          WNMIN=1.E7/VMAX
          WNMAX=1.E7/VMIN
      ENDIF
!     IF LSKIP IS .TRUE., TAPE7.SCR IS TO BE REUSED.  IN THIS CASE,
!     WNMIN AND WNMAX OBTAINED FROM V1 AND V2 MAY NOT CORRESPOND TO
!     DATA IN TAPE7.SCR.  THUS, THE LIMITS OF "DEGRADABLE" SPECTRAL
!     FREQUENCY MAY NEED TO BE ADJUSTED.
      IF(LSKIP)CALL ADJUST(VMIN,VMAX,DV,IV1,IV2,                        &
     &  WNMIN,WNMAX,FWFUNC,FWHM,RELABS,CHUNIT)

!     IPR IS TAPE6
      IF(IFUNC.EQ.1)THEN
         WRITE(IPR,'(/A)')                                              &
     &        ' SPECTRUM WILL BE CONVOLVED USING A TRIANGULAR SLIT'
      ELSEIF(IFUNC.EQ.2)THEN
         WRITE(IPR,'(/A)')                                              &
     &        ' SPECTRUM WILL BE CONVOLVED USING A RECTANGULAR SLIT'
      ELSEIF(IFUNC.EQ.3)THEN
         WRITE(IPR,'(/A)')                                              &
     &        ' SPECTRUM WILL BE CONVOLVED USING A GAUSSIAN SLIT'
      ELSEIF(IFUNC.EQ.4)THEN
         WRITE(IPR,'(/A)')                                              &
     &        ' SPECTRUM WILL BE CONVOLVED USING A SINC SLIT'
      ELSEIF(IFUNC.EQ.5)THEN
         WRITE(IPR,'(/A)')                                              &
     &        ' SPECTRUM WILL BE CONVOLVED USING A SINC**2 SLIT'
      ELSEIF(IFUNC.EQ.6)THEN
         WRITE(IPR,'(/A)')                                              &
     &        ' SPECTRUM WILL BE CONVOLVED USING A HAMMING SLIT'
      ELSEIF(IFUNC.EQ.7)THEN
         WRITE(IPR,'(/A)')                                              &
     &        ' SPECTRUM WILL BE CONVOLVED USING A USER-DEFINED SLIT'
      ENDIF
      WRITE(IPR,'(A)')' CONVOLVED SPECTRA ARE IN FILES'//               &
     &  ' PLTOUT.SCN (OR *.PSC) AND TAPE7.SCN (OR *.7SC)'
      IF(CHUNIT.EQ.'W')THEN
          WRITE(IPR,'(A,2(F9.2,A))')                                    &
     &      ' BANDPASS FOR CONVOLVING =',VMIN,' TO',VMAX,' CM-1.'
      ELSEIF(CHUNIT.EQ.'M')THEN
          WRITE(IPR,'(A,2(F12.6,A),2(F9.2,A))')' BANDPASS =',VMIN,' TO',&
     &      VMAX,' MICRON, EQUIVALENTLY,',WNMAX,' TO',WNMIN,' CM-1.'
      ELSEIF(CHUNIT.EQ.'N')THEN
          WRITE(IPR,'(A,2(F12.3,A),2(F9.2,A))')' BANDPASS =',VMIN,' TO',&
     &      VMAX,' NANOMETER, EQUIVALENTLY,',WNMAX,' TO',WNMIN,' CM-1.'
      ENDIF

!     THE APPROACH FOR DEGRADED SPECTRAL DATA IS AS FOLLOWS:
!     READ NUMBERS FROM IPUSCR (THE NUMBERS READ DEPEND ON IEMSCT).
!     CONVERT UNITS FOR RADIANCE AND IRRADIANCE DATA.
!     DEGRADE AND THEN PRINT TO TAPE7.SCN (IPUSCN)
!     COMPUTE BANDPASS INTEGRALS OF RADIANCE AND IRRADIANCES.
!     WRITE THESE BANDPASSES TO TAPE6.
!     THEN GENERATE PLTOUT.SCN FILE (EQUIVALENT TO PLTOUT.SCN)
      IF(IEMSCT.EQ.0)THEN

!         SPECTRAL TRANSMITTANCE DATA:
          IF(DEGALL)THEN

!             DEGRADE ALL THE TABLE DATA:
              DO ISPCDT=1,NSPCDT

!                 READ ALL SPECTRAL TRANSMITTANCES
                  READ(IPUSCR,*,END=20,ERR=20)SPCGRD(ISPCDT),           &
     &              (SPCDAT(ISPCDT,ICOL),ICOL=1,11),LNTRAN,             &
     &              (SPCDAT(ISPCDT,ICOL),ICOL=12,20+NMOLX)
              ENDDO
              SUM=CNVRTW(NSPCDT,IDV,SPCGRD,SPCDAT,WNMIN,WNMAX,CHUNIT)
              DO ICOL=1,20+NMOLX
                  CALL DEGRAD(NSPCDT,SPCGRD,SPCDAT(1,ICOL),VMIN,VMAX,   &
     &              DV,FWFUNC,FWHM,IFUNC,NDDGRD,WDGRD,DDGRD)
              ENDDO

!             WRITE RESULTS:
              FRMT(15:49)='11(F6.4,1X),F7.3,00(1X,F6.4)))     '
              WRITE(FRMT(32:33),'(I2.2)')9+NMOLX
              DO IDDGRD=1,NDDGRD
                  IF(SPCDAT(IDDGRD,1).GT.0.)THEN
                      LNTRAN=-LOG(SPCDAT(IDDGRD,1))
                  ELSE
                      LNTRAN=99.9999
                  ENDIF
                  WRITE(IPUSCN,FMT=FRMT)WDGRD(IDDGRD),                  &
     &              (SPCDAT(IDDGRD,ICOL),ICOL=1,11),LNTRAN,             &
     &              (SPCDAT(IDDGRD,ICOL),ICOL=12,20+NMOLX)
              ENDDO
          ELSE

!             ONLY DEGRADE COMBINED SPECIES TRANSMITTANCE:
              DO ISPCDT=1,NSPCDT

!                 READ FIRST TWO COLUMNS:
                  READ(IPUSCR,*,END=20,ERR=20)                          &
     &              SPCGRD(ISPCDT),SPCDAT(ISPCDT,1)
              ENDDO
              SUM=CNVRTW(NSPCDT,IDV,SPCGRD,SPCDAT,WNMIN,WNMAX,CHUNIT)
              CALL DEGRAD(NSPCDT,SPCGRD,SPCDAT,VMIN,VMAX,               &
     &          DV,FWFUNC,FWHM,IFUNC,NDDGRD,WDGRD,DDGRD)

!             WRITE RESULTS:
              FRMT(15:49)='F6.4))                             '
              WRITE(IPUSCN,FMT=FRMT)                                    &
     &          (WDGRD(IDDGRD),SPCDAT(IDDGRD,1),IDDGRD=1,NDDGRD)
          ENDIF
          SUMCON=BNDPAS(NDDGRD,WDGRD,SPCDAT,WDGRD(1),WDGRD(NDDGRD))
          IF(CHUNIT.EQ.'W')THEN
              WRITE(IPR,'((A,F10.6))')                                  &
     &          ' UNCONVOLVED IN-BAND TRANSMITTANCE AVERAGED OVER'//    &
     &          ' SPECTRAL FREQUENCY: ',SUM/(WNMAX-WNMIN),              &
     &          ' CONVOLVED   IN-BAND TRANSMITTANCE AVERAGED OVER'//    &
     &          ' SPECTRAL FREQUENCY: ',SUMCON/(WDGRD(NDDGRD)-WDGRD(1))
          ELSE
              WRITE(IPR,'((A,F10.6))')                                  &
     &          ' UNCONVOLVED IN-BAND TRANSMITTANCE AVERAGED OVER'//    &
     &          ' SPECTRAL FREQUENCY: ',SUM/(WNMAX-WNMIN),              &
     &          ' CONVOLVED   IN-BAND TRANSMITTANCE AVERAGED OVER'//    &
     &          ' SPECTRAL WAVELENGTH:',SUMCON/(WDGRD(NDDGRD)-WDGRD(1))
          ENDIF
      ELSEIF(IEMSCT.EQ.3)THEN

!         SOLAR IRRADIANCE DATA (READ IN TAPE7.SCR DATA):
          DO ISPCDT=1,NSPCDT
              READ(IPUSCR,*,END=20,ERR=20)                              &
     &          SPCGRD(ISPCDT),(SPCDAT(ISPCDT,ICOL),ICOL=1,3)
          ENDDO

!         INTEGRATE TOTAL RADIANCE AND CONVERT UNITS:
          SPC0=SPCGRD(1)-IDV
          SUM=CNVRTW(NSPCDT,IDV,SPCGRD,SPCDAT(1,2),WNMIN,WNMAX,CHUNIT)
          IF(CHUNIT.NE.'W')THEN
              CALL CNVRTR(NSPCDT,SPC0,IDV,SPCDAT(1,2),CHUNIT)
              CALL CNVRTR(NSPCDT,SPC0,IDV,SPCDAT(1,3),CHUNIT)
          ENDIF

!         PROCESS SPECTRAL TRANSMITTANCES:
          CALL DEGRAD(NSPCDT,SPCGRD,SPCDAT,VMIN,VMAX,                   &
     &      DV,FWFUNC,FWHM,IFUNC,NDDGRD,WDGRD,DDGRD)

!         PROCESS SPECTRAL IRRADIANCES:
          CALL DEGRAD(NSPCDT,SPCGRD,SPCDAT(1,2),VMIN,VMAX,              &
     &      DV,FWFUNC,FWHM,IFUNC,NDDGRD,WDGRD,DDGRD)
          CALL DEGRAD(NSPCDT,SPCGRD,SPCDAT(1,3),VMIN,VMAX,              &
     &      DV,FWFUNC,FWHM,IFUNC,NDDGRD,WDGRD,DDGRD)

!         INTEGRATE TOTAL RADIANCE (IF IN NM, CONVERT FROM microW TO W).
          KCOL=2
          SUMCON=BNDPAS(NDDGRD,WDGRD,SPCDAT(1,2),WDGRD(1),WDGRD(NDDGRD))
          IF(CHUNIT.EQ.'N')SUMCON=1.E-6*SUMCON

!         WRITE RESULTS:
          FRMT(15:49)='F6.4,1P,2E9.2))                    '
          WRITE(IPUSCN,FMT=FRMT)(WDGRD(IDDGRD),                         &
     &      (SPCDAT(IDDGRD,ICOL),ICOL=1,3),IDDGRD=1,NDDGRD)
          WRITE(IPR,'((1X,A,1P,E14.5,1X,A))')                           &
     &      'UNCONVOLVED INTEGRATED IRRADIANCE:',SUM,'W CM-2',          &
     &      'CONVOLVED   INTEGRATED IRRADIANCE:',SUMCON,'W CM-2'
      ELSE

!         DEFINE NUMBER OF DATA COLUMNS AND OUTPUT FORMAT:
          FRMT(15:49)='F6.4,1P,77X,E11.4))                '
          IF(IEMSCT.EQ.1)THEN

!             THERMAL EMISSION DATA:
              IF(DIS)THEN

!                 DISORT MULTIPLE SCATTERING:
                  NCOL=5
                  IF(DEGALL)FRMT(23:49)='2(E11.4,11X),2(11X,E11.4)))'
              ELSE

!                 NO DISORT MULTIPLE SCATTERING:
                  NCOL=6
                  IF(DEGALL)FRMT(23:49)='3E11.4,11X,2(11X,E11.4)))  '
              ENDIF
              KCOL=NCOL
          ELSE

!             THERMAL AND SOLAR DATA:
              IF(DIS)THEN

!                 DISORT MULTIPLE SCATTERING:
                  NCOL=10
                  IF(DEGALL)FRMT(23:49)='E11.4,11X,6E11.4,2E9.2))   '
              ELSE

!                 NO DISORT MULTIPLE SCATTERING:
                  NCOL=11
                  IF(DEGALL)FRMT(23:49)='8E11.4,2E9.2))             '
              ENDIF
              KCOL=NCOL-2
          ENDIF
          IF(DEGALL)THEN

!             PROCESS ALL COLUMNS:
              ICOLMN=2
              ICOLMX=NCOL
          ELSE

!             ONLY OUTPUT SPECTRAL TRANSMITTANCE AND TOTAL RADIANCE:
              ICOLMN=KCOL
              ICOLMX=KCOL
          ENDIF

!         READ IN TAPE7.SCR DATA:
          DO ISPCDT=1,NSPCDT
              READ(IPUSCR,*,END=20,ERR=20)SPCGRD(ISPCDT),               &
     &          (SPCDAT(ISPCDT,ICOL),ICOL=1,ICOLMX)
          ENDDO

!         INTEGRATE TOTAL RADIANCE AND CONVERT UNIT OF SPECTRAL GRID.
          SPC0=SPCGRD(1)-IDV
          SUM=CNVRTW(NSPCDT,IDV,SPCGRD,SPCDAT(1,KCOL),                  &
     &      WNMIN,WNMAX,CHUNIT)

!         PROCESS SPECTRAL TRANSMITTANCES:
          CALL DEGRAD(NSPCDT,SPCGRD,SPCDAT,VMIN,VMAX,                   &
     &      DV,FWFUNC,FWHM,IFUNC,NDDGRD,WDGRD,DDGRD)

!         PROCESS SPECTRAL RADIANCES:
          DO ICOL=ICOLMN,ICOLMX
              IF(CHUNIT.NE.'W')                                         &
     &          CALL CNVRTR(NSPCDT,SPC0,IDV,SPCDAT(1,ICOL),CHUNIT)
              CALL DEGRAD(NSPCDT,SPCGRD,SPCDAT(1,ICOL),VMIN,VMAX,       &
     &          DV,FWFUNC,FWHM,IFUNC,NDDGRD,WDGRD,DDGRD)
          ENDDO

!         INTEGRATE TOTAL RADIANCE (IF IN NM, CONVERT FROM microW TO W).
          SUMCON=BNDPAS(NDDGRD,WDGRD,SPCDAT(1,KCOL),                    &
     &      WDGRD(1),WDGRD(NDDGRD))
          IF(CHUNIT.EQ.'N')SUMCON=1.E-6*SUMCON

!         WRITE RESULTS:
          WRITE(IPUSCN,FMT=FRMT)(WDGRD(IDDGRD),SPCDAT(IDDGRD,1),        &
     &      (SPCDAT(IDDGRD,ICOL),ICOL=ICOLMN,ICOLMX),IDDGRD=1,NDDGRD)
          WRITE(IPR,'(1P,/(A,E14.5,A))')                                &
     &      ' UNCONVOLVED INTEGRATED RADIANCE:',SUM, ' W CM-2 SR-1',    &
     &      ' CONVOLVED   INTEGRATED RADIANCE:',SUMCON,' W CM-2 SR-1'
      ENDIF

!     WRITE OUT PLTOUT.SCN (EQUIVALENT TO PLOT.DAT)
      SPCMX=0.
      IF(YFLAG.EQ.'T')THEN
          IF(CHUNIT.EQ.'W')THEN
              FRMT='((0P,F15.2,F15.8))                               '
          ELSEIF(CHUNIT.EQ.'M')THEN
              FRMT='((0P,F15.6,F15.8))                               '
          ELSE
              FRMT='((0P,F15.3,F15.8))                               '
          ENDIF
          DO IDDGRD=1,NDDGRD
             IF(SPCDAT(IDDGRD,1).GT.SPCMX)SPCMX=SPCDAT(IDDGRD,1)
             WRITE(IPTSCN,FMT=FRMT)WDGRD(IDDGRD),SPCDAT(IDDGRD,1)
             !IPTSCN(IDDGRD,1) = WDGRD(IDDGRD)
             !IPTSCN(IDDGRD,2) = SPCDAT(IDDGRD,1)
          ENDDO
          IF(DLIMIT.EQ.'        ')THEN
              WRITE(IPR,*)
          ELSEIF(CHUNIT.EQ.'W')THEN
              WRITE(IPR,'(2A,0P,F15.8,A)')DLIMIT,'   MAXIMUM'//         &
     &          ' TRANSMITTANCE =',SPCMX,' (FREQUENCIES IN CM-1)'
          ELSEIF(CHUNIT.EQ.'M')THEN
              WRITE(IPR,'(2A,0P,F15.8,A)')DLIMIT,'   MAXIMUM'//         &
     &          ' TRANSMITTANCE =',SPCMX,' (WAVELENGTHS IN MICRONS)'
          ELSE
              WRITE(IPR,'(2A,0P,F15.8,A)')DLIMIT,'   MAXIMUM'//         &
     &          ' TRANSMITTANCE =',SPCMX,' (WAVELENGTHS IN NANOMETERS)'
          ENDIF
      ELSEIF(YFLAG.EQ.'R')THEN

!         RADIANCE OR IRRADIANCE OUTPUT:
          IF(CHUNIT.EQ.'W')THEN
              FRMT='((0P,F15.2,1P,E15.5))                            '
          ELSEIF(CHUNIT.EQ.'M')THEN
              FRMT='((0P,F15.6,1P,E15.5))                            '
          ELSE
              FRMT='((0P,F15.3,1P,E15.5))                            '
          ENDIF
          DO IDDGRD=1,NDDGRD
              IF(SPCDAT(IDDGRD,KCOL).GT.SPCMX)SPCMX=SPCDAT(IDDGRD,KCOL)
              WRITE(IPTSCN,FMT=FRMT)WDGRD(IDDGRD),SPCDAT(IDDGRD,KCOL)
              WVLNGTH_LRES(IDDGRD) = WDGRD(IDDGRD)   !DRF
              RADIANCE_LRES(IDDGRD) = SPCDAT(IDDGRD,KCOL) !DRF
              !IPTSCN(IDDGRD,1) = WDGRD(IDDGRD)
              !IPTSCN(IDDGRD,2) = SPCDAT(IDDGRD,KCOL)
              !WRITE(*,*) 'WDGRD(IDDGRD) = ',WDGRD(IDDGRD)
              !WRITE(*,*) 'WDGRD(IDDGRD) = ',SPCDAT(IDDGRD,KCOL)
          ENDDO
          IF(IEMSCT.EQ.3)THEN

!             TRANSMITTED SOLAR SPECTRAL IRRADIANCES:
              IF(DLIMIT.EQ.'        ')THEN
                  WRITE(IPR,*)
              ELSEIF(CHUNIT.EQ.'W')THEN
                  WRITE(IPR,'(2A,1P,E15.5,A)')DLIMIT,                   &
     &              '   MAXIMUM TRANSMITTED SOLAR SPECTRAL'//           &
     &              ' IRRADIANCE =',SPCMX,' W CM-2 / CM-1'
              ELSEIF(CHUNIT.EQ.'M')THEN
                  WRITE(IPR,'(2A,1P,E15.5,A)')DLIMIT,                   &
     &              '   MAXIMUM TRANSMITTED SOLAR SPECTRAL'//           &
     &              ' IRRADIANCE =',SPCMX,' W CM-2 / MICRON'
              ELSE
                  WRITE(IPR,'(2A,1P,E15.5,A)')DLIMIT,                   &
     &              '   MAXIMUM TRANSMITTED SOLAR SPECTRAL'//           &
     &              ' IRRADIANCE =',SPCMX,' uW CM-2 / NM'
              ENDIF
          ELSE

!             TOTAL PATH SPECTRAL RADIANCES:
              IF(DLIMIT.EQ.'        ')THEN
                  WRITE(IPR,*)
              ELSEIF(CHUNIT.EQ.'W')THEN
                  WRITE(IPR,'(2A,1P,E15.5,A)')DLIMIT,'   MAXIMUM '//    &
     &              'SPECTRAL RADIANCE =',SPCMX,' W SR-1 CM-2 / CM-1'
              ELSEIF(CHUNIT.EQ.'M')THEN
                  WRITE(IPR,'(2A,1P,E15.5,A)')DLIMIT,'   MAXIMUM '//    &
     &              'SPECTRAL RADIANCE =',SPCMX,' W SR-1 CM-2 / MICRON'
              ELSE
                  WRITE(IPR,'(2A,1P,E15.5,A)')DLIMIT,'   MAXIMUM '//    &
     &              'SPECTRAL RADIANCE =',SPCMX,' uW SR-1 CM-2 / NM'
              ENDIF
          ENDIF
      ENDIF
      RETURN
   20 CONTINUE

!     ERROR MESSAGE
      WRITE(IPR,'(/A)')                                                 &
     &  ' Error in DGRD:  Ran out of data in scratch file (IPUSCR)'
      IF(ISPCDT.GT.1)WRITE(IPR,'(16X,A,F10.2,A)')' Check line'//        &
     &  ' following spectral frequency',SPCGRD(ISPCDT-1),' CM-1.'
      WRITE(IPR,'((16X,A,I8))')                                         &
     &  ' Attempting to read spectral point    ',ISPCDT,                &
     &  ' Number of spectral points required is',NSPCDT
      !WRITE(*,*) 'Error in DGRD:Ran out of data in scratch file(IPUSCR)'
      !STOP ' Error in DGRD:  Ran out of data in scratch file (IPUSCR)'
      END

      SUBROUTINE CNVRTR(NSPCDT,SPC0,IDV,SPCDAT,CHUNIT)

!     INPUT ARGUMENTS:
!       NSPCDT   NUMBER OF TAPE7.SCR SPECTRAL DATA POINTS.
!       SPC0     SPECTRAL FREQUENCY OFFSET [CM-1].
!       IDV      SPECTRAL FREQUENCY INCREMENT [CM-1].
!       SPCDAT   TAPE7.SCR SPECTRAL DATA TABLE.
!       CHUNIT   UNIT FLAG ('W'=WAVENUMBERS;'M'=MICRONS;'N'=NANOMETERS).
      REAL SPC0,SPCDAT(*)
      INTEGER NSPCDT,IDV
      CHARACTER CHUNIT*1

!     LOCAL VARIABLES
!       ISPCDT   SPECTRAL GRID COUNTER.
      INTEGER ISPCDT

!     BRANCH BASED ON UNITS:
      IF(CHUNIT.EQ.'M')THEN

!         SPCGRD IN MICRONS.  CONVERT PER CM-1 TO PER MICRON.
          DO ISPCDT=1,NSPCDT
              SPCDAT(ISPCDT)=1.E-4*SPCDAT(ISPCDT)*(SPC0+ISPCDT*IDV)**2
          ENDDO
      ELSEIF(CHUNIT.EQ.'N')THEN

!         SPCGRD IN NANOMETERS.  CONVERT W / CM-1 TO microW / NANOMETER.
          DO ISPCDT=1,NSPCDT
              SPCDAT(ISPCDT)=.1*SPCDAT(ISPCDT)*(SPC0+ISPCDT*IDV)**2
          ENDDO
      ENDIF
      RETURN
      END

      REAL FUNCTION CNVRTW(NSPCDT,IDV,SPCGRD,SPCDAT,WNMIN,WNMAX,CHUNIT)

!     CNVRTW (1) INTEGRATES THE SPCDAT UNCONVOLVED SPECTRUM,
!     (2) SHIFTS SPCGRD BIN CENTER FREQUENCIES TO BIN EDGE FREQUENCIES,
!     AND (3) CONVERTS SPECTRAL GRID FROM CM-1 TO "CHUNIT" UNIT.

!     INPUT ARGUMENTS:
!       NSPCDT   NUMBER OF TAPE7.SCR SPECTRAL DATA POINTS.
!       IDV      BIN SPECTRAL WIDTH [CM-1].
!       SPCGRD   TAPE7.SCR BIN CENTER SPECTRAL GRID [CM-1].
!       SPCDAT   SPECTRAL DATA BEING INTEGRATED.
!       WNMIN    REQUESTED SPECTRAL RANGE MINIMUM FREQUENCY [CM-1].
!       WNMAX    REQUESTED SPECTRAL RANGE MAXIMUM FREQUENCY [CM-1].
!       CHUNIT   UNIT FLAG ('W'=WAVENUMBERS;'M'=MICRONS;'N'=NANOMETERS).

!     OUTPUT ARGUMENTS:
!       SPCGRD   BIN EDGE SPECTRAL GRID [CHUNIT DEFINES UNIT].
      INTEGER NSPCDT,IDV
      REAL SPCGRD(0:NSPCDT),SPCDAT(NSPCDT),WNMIN,WNMAX
      CHARACTER CHUNIT*1

!     COMMONS:
      INCLUDE 'IFIL.h'

!     LOCAL VARIABLES
!       ISPCDT   SPECTRAL GRID COUNTER.
!       ISPCLO   REVISED LOWER BOUND INDEX ON SPECTRAL LOOP.
!       P5IDV    HALF THE BIN SPECTRAL WIDTH [CM-1].
!       SUM      SPECTRAL INTEGRATION OF SPCDAT.
!       CONVRT   SPECTRAL FREQUENCY TO WAVELENGTH CONVERSION NUMERATOR.
      INTEGER ISPCDT,ISPCLO
      REAL P5IDV,SUM,CONVRT

!     INITIALIZATIONS:
      P5IDV=.5*IDV

!     BRANCH BASED ON UNITS:
      IF(CHUNIT.EQ.'W')THEN

!         DEFINE AND CHECK INITIAL SPECTRAL FREQUENCY:
          SPCGRD(0)=SPCGRD(1)-P5IDV
          IF(WNMIN.LT.SPCGRD(0))GOTO 50

!         FIND UPPER BOUND TO WNMIN:
          DO ISPCDT=1,NSPCDT
              SPCGRD(ISPCDT)=SPCGRD(ISPCDT)+P5IDV
              IF(WNMIN.LE.SPCGRD(ISPCDT))GOTO 10
          ENDDO

!         ERROR:  WNMIN EXCEEDS SPCGRD(NSPCDT).
          GOTO 50

!         INITIALIZE INTEGRATION SUM:
   10     CONTINUE
          SUM=(SPCGRD(ISPCDT)-WNMIN)*SPCDAT(ISPCDT)

!         INCREMENT INTEGRATION AND FIND UPPER BOUND TO WNMAX:
          ISPCLO=ISPCDT+1
          DO ISPCDT=ISPCLO,NSPCDT
              SPCGRD(ISPCDT)=SPCGRD(ISPCDT)+P5IDV
              IF(WNMAX.LE.SPCGRD(ISPCDT))GOTO 20
              SUM=SUM+IDV*SPCDAT(ISPCDT)
          ENDDO

!         ERROR:  WNMAX EXCEEDS SPCGRD(NSPCDT).
          GOTO 50

!         FINALIZE SUM:
   20     CONTINUE
          CNVRTW=SUM+(WNMAX-SPCGRD(ISPCDT-1))*SPCDAT(ISPCDT)

!         DEFINE REMAINING SPECTRAL EDGES AND RETURN:
          ISPCLO=ISPCDT+1
          DO ISPCDT=ISPCLO,NSPCDT
              SPCGRD(ISPCDT)=SPCGRD(ISPCDT)+P5IDV
          ENDDO
      ELSE

!         CONVERSION TO SPECTRAL WAVELENGTHS REQUESTED:
          IF(CHUNIT.EQ.'M')THEN
              CONVRT=1.E4
          ELSEIF(CHUNIT.EQ.'N')THEN
              CONVRT=1.E7
          ELSE
              WRITE(IPR,'(/A)')' Error in CNVRTW:  Bad CHUNIT value.'
              STOP ' Error in CNVRTW:  Bad CHUNIT value.'
          ENDIF

!         DEFINE AND CHECK INITIAL SPECTRAL FREQUENCY:
          SPCGRD(0)=SPCGRD(1)-P5IDV
          IF(WNMIN.LT.SPCGRD(0))GOTO 50

!         FIND UPPER BOUND TO WNMIN:
          DO ISPCDT=1,NSPCDT
              SPCGRD(ISPCDT)=SPCGRD(ISPCDT)+P5IDV
              IF(WNMIN.LE.SPCGRD(ISPCDT))GOTO 30
              SPCGRD(ISPCDT)=CONVRT/SPCGRD(ISPCDT)
          ENDDO

!         ERROR:  WNMIN EXCEEDS SPCGRD(NSPCDT).
          SPCGRD(0)=CONVRT/SPCGRD(0)
          SPCGRD(NSPCDT)=CONVRT/SPCGRD(NSPCDT)
          GOTO 50

!         INITIALIZE INTEGRATION SUM:
   30     CONTINUE
          SUM=(SPCGRD(ISPCDT)-WNMIN)*SPCDAT(ISPCDT)
          SPCGRD(ISPCDT)=CONVRT/SPCGRD(ISPCDT)

!         INCREMENT INTEGRATION AND FIND UPPER BOUND TO WNMAX:
          ISPCLO=ISPCDT+1
          DO ISPCDT=ISPCLO,NSPCDT
              SPCGRD(ISPCDT)=SPCGRD(ISPCDT)+P5IDV
              IF(WNMAX.LE.SPCGRD(ISPCDT))GOTO 40
              SUM=SUM+IDV*SPCDAT(ISPCDT)
              SPCGRD(ISPCDT)=CONVRT/SPCGRD(ISPCDT)
          ENDDO

!         ERROR:  WNMAX EXCEEDS SPCGRD(NSPCDT).
          SPCGRD(0)=CONVRT/SPCGRD(0)
          SPCGRD(NSPCDT)=CONVRT/SPCGRD(NSPCDT)
          GOTO 50

!         FINALIZE SUM:
   40     CONTINUE
          CNVRTW=SUM+(WNMAX-(SPCGRD(ISPCDT)-IDV))*SPCDAT(ISPCDT)
          SPCGRD(ISPCDT)=CONVRT/SPCGRD(ISPCDT)

!         DEFINE REMAINING SPECTRAL EDGES AND RETURN:
          ISPCLO=ISPCDT+1
          DO ISPCDT=ISPCLO,NSPCDT
              SPCGRD(ISPCDT)=CONVRT/(SPCGRD(ISPCDT)+P5IDV)
          ENDDO
      ENDIF
      RETURN

   50 CONTINUE
!     SPECTRAL GRID PROBLEM:
      WRITE(IPR,'(A,2(F9.2,A),/17X,A,2(F9.2,A))')' STOP in CNVRTW: '    &
     &  //' Requested spectral band pass (',WNMIN,' TO',WNMAX,          &
     &  ' CM-1) extends beyond the',' calculated spectrum (',           &
     &  SPCGRD(0),' TO',SPCGRD(NSPCDT)+P5IDV,' CM-1).'
      STOP 'Check end of *.tp6 for ERROR.'
      END

      SUBROUTINE DEGRAD(NSPCDT,SPCGRD,SPCDAT,WMIN,WMAX,DELWD,           &
     &  FWFUNC,FWHM,IFUNC,NDDGRD,WDGRD,DDGRD)

      INTEGER NSPCDT,IFUNC,NDDGRD
      REAL WMIN,WMAX,DELWD,FWFUNC,FWHM,                                 &
     &  SPCGRD(0:NSPCDT),SPCDAT(*),WDGRD(*),DDGRD(*)

!     THIS ROUTINE APPLIES THE INSTRUMENT RESPONSE FUNCTION
!     TO A HIGH(ER) RESOLUTION SPECTRUM TO OBTAIN A CONVOLVED SPECTRUM
!     THE OUTPUT CONVOLVED SPECTRUM IS UNIFORMLY SPACED
!     THERE IS NO CHANGE IN UNITS - INPUT AND OUTPUT UNITS ARE SAME

!     COMMONS:

!     /CSCAN/
!       CHUNIT   UNIT FLAG ('W'=WAVENUMBERS;'M'=MICRONS;'N'=NANOMETERS).
!       RELABS   SPECTRAL RESOLUTION FLAG('A'=ABSOLUTE;'R'=RELATIVE[%]).
!       LNFEED   LINE FEED FLAG FOR .FLX FILE ('T' FOR 80 CHARACTER
!                  LINES, 'F' FOR LONG LINES, ' ' FOR NO .FLX FILE).
      CHARACTER CHUNIT*1,RELABS*1,LNFEED*1
      COMMON/CSCAN/CHUNIT,RELABS,LNFEED

!     LOCAL VARIABLES:
!       LINIT    INITIALIZATION FLAG FOR ROUTINE WEIGHT.
!       PAD      CONVOLUTION TOTAL HALF-WIDTH [CHUNIT DEFINES UNIT].
!       WDGRD0   SPECTRAL GRID OFFSET [CHUNIT DEFINES UNIT].
!       WDGRDI   CURRENT SPECTRAL GRID POINT [CHUNIT DEFINES UNIT].
!       FWHM0    FULL-WIDTH AT HALF MAXIMUM [CHUNIT DEFINES UNIT].
!       WDBEG    DEGRADE BEGINNING SPECTRAL POINT [CHUNIT DEFINES UNIT].
!       WDEND    DEGRADE ENDING SPECTRAL POINT [CHUNIT DEFINES UNIT].
      INTEGER IDDGRD,J,JBEG
      REAL PAD,WDGRD0,WDGRDI,WDBEG,WDEND,WGT,                           &
     &  SUMNUM,SUMDEN,WEIGHT,FWHM0,DBEG,DEND
      LOGICAL PERCNT,LINIT

!     PERCNT IS FALSE IF RELABS IS NEITHER BLANK NOR 'A'
      PERCNT=RELABS.NE.'A' .AND. RELABS.NE.'a' .AND. RELABS.NE.' '

      NDDGRD=INT((WMAX-WMIN)/DELWD+1.1)
      WDGRD0=WMIN-DELWD
      FWHM0=FWHM
      PAD=FWFUNC*FWHM

      DO IDDGRD=1,NDDGRD
          WDGRDI=WDGRD0+IDDGRD*DELWD
          WDGRD(IDDGRD)=WDGRDI
          IF(PERCNT)THEN
              FWHM0=(FWHM/100)*WDGRDI
              PAD=FWFUNC*FWHM0
          ENDIF
          SUMDEN=0.
          SUMNUM=0.
          DEND=-PAD
          LINIT=.TRUE.
          IF(CHUNIT.EQ.'W')THEN

!             SPECTRAL FREQUENCY => INCREASING SPECTRAL GRID:
              WDBEG=WDGRDI-PAD
              WDEND=WDGRDI+PAD
              DO J=1,NSPCDT-1
                  IF(WDBEG.LE.SPCGRD(J))GOTO 10
              ENDDO
   10         CONTINUE
              JBEG=J
              DO J=JBEG,NSPCDT
                  IF(WDEND.LE.SPCGRD(J))GOTO 30
                  DBEG=DEND
                  DEND=SPCGRD(J)-WDGRDI
                  WGT=WEIGHT(IFUNC,FWHM0,DBEG,DEND,LINIT)
                  SUMDEN=SUMDEN+WGT
                  SUMNUM=SUMNUM+WGT*SPCDAT(J)
              ENDDO
              STOP 'Error in DEGRAD:  Not enough spectral data.'
          ELSE

!             SPECTRAL WAVELENGTH => DECREASING SPECTRAL GRID:
              WDBEG=WDGRDI+PAD
              WDEND=WDGRDI-PAD
              DO J=1,NSPCDT-1
                  IF(WDBEG.GE.SPCGRD(J))GOTO 20
              ENDDO
   20         CONTINUE
              JBEG=J
              DO J=JBEG,NSPCDT
                  IF(WDEND.GE.SPCGRD(J))GOTO 30
                  DBEG=DEND
                  DEND=WDGRDI-SPCGRD(J)
                  WGT=WEIGHT(IFUNC,FWHM0,DBEG,DEND,LINIT)
                  SUMDEN=SUMDEN+WGT
                  SUMNUM=SUMNUM+WGT*SPCDAT(J)
              ENDDO
              STOP 'Error in DEGRAD:  Not enough spectral data.'
          ENDIF
   30     CONTINUE
          WGT=WEIGHT(IFUNC,FWHM0,DEND,PAD,LINIT)
          SUMDEN=SUMDEN+WGT
          IF(SUMDEN.NE.0.)THEN
              DDGRD(IDDGRD)=(SUMNUM+WGT*SPCDAT(J))/SUMDEN
          ELSE
              DDGRD(IDDGRD)=0.
          ENDIF
      ENDDO

!     REPLACE ORIGINAL ARRAY WITH DEGRADED DATA:
      DO IDDGRD=1,NDDGRD
          SPCDAT(IDDGRD)=DDGRD(IDDGRD)
      ENDDO
      RETURN
      END

      REAL FUNCTION WEIGHT(IFUNC,FWHM,DBEG,DEND,LINIT)

!     WEIGHT INTEGRATES THE SPECTRAL CONVOLUTION FUNCTION BETWEEN
!     SPECTRAL POINTS WITHIN THE RANGE OF ITS SPECTRAL DOMAIN.

!     INPUT ARGUMENTS:
!       IFUNC    SCANNING FUNCTION NUMERICAL LABEL.
!                (1=TRIANG,2=RECT,3=GAUSS,4=SINC,5=SINC2,6=HAMM,7=USER)
!       FWHM     FULL-WIDTH-AT-HALF-MAXIMUM [CHUNIT DEFINES UNIT].
!       DBEG     INTEGRATION LOWER BOUND [CHUNIT DEFINES UNIT].
!       DEND     INTEGRATION UPPER BOUND [CHUNIT DEFINES UNIT].
!       LINIT    INITIALIZATION FLAG.
      INTEGER IFUNC
      REAL FWHM,DBEG,DEND
      LOGICAL LINIT

!     PARAMETERS:
!       RT4LN2   SQUARE ROOT OF 4 TIMES THE NATURAL LOGARITHM OF 2.
!       RSINC    VALUE AT WHICH SINC(RSINC/2) EQUALS ONE-HALF.
!                SINC(X) = SIN(pi X) / (pi X)
!       RSINC2   VALUE AT WHICH SINC(RSINC/2) SQUARED EQUALS ONE-HALF.
!       PI       3.14159...
!       A0HAMM   HAMMING FUNCTION COEFFICIENT.
!       A1HAMM   HAMMING FUNCTION COEFFICIENT.
!                A0HAMM AND A1HAMM ARE DETERMINED FROM THE EQUATIONS
!                A0 SINC(5/2) + A1 [SINC(7/2) + SINC (3/2)] = 0, AND
!                A0 + 2 A1 = 1.
!       RHAMM    VALUE WHICH THE SUM OF A0 SINC(RHAMM/2) AND
!                A1 [SINC(RHAMM/2+1) +SINC(RHAMM/2-1)] EQUALS A0/2.
      REAL RT4LN2,RSINC,RSINC2,PI,A0HAMM,A1HAMM,RHAMM
      PARAMETER(RT4LN2=1.665109,RSINC=1.206709,RSINC2=.8858929,         &
     &  PI=3.141593,A0HAMM=25./46,A1HAMM=21./92,RHAMM=1.801645)

!     FUNCTIONS:
!       ERFC     COMPLEMENT OF THE ERROR FUNCTION.
!       COMPSI   NORMALIZED COMPLEMENT OF THE SINE FUNCTION.
!       USER     USER DEFINED SLIT FUNCTION INTEGRATION.
      REAL ERFC,COMPSI,USER

!     LOCAL VARIABLES:
!       IEND     SPECTRAL FUNCTION INTEGRAL FROM DEND TO INFINITY.
!       ARG      ARGUMENT USED WITH COMPSI FUNCTION.
!       PIARG    PI TIMES ARG.
!       PIARG2   SQUARE OF THE PRODUCT OF PI AND ARG.
      REAL IEND,ARG,PIARG,PIARG2

!     SAVED VARIABLES:
!       ARGCON   CONSTANT USED TO CALCULATION SPECIAL FUNCTION ARGUMENT.
!       IBEG     SPECTRAL FUNCTION INTEGRAL FROM DBEG TO INFINITY.
      REAL ARGCON,IBEG
      SAVE ARGCON,IBEG

!     BRANCH BASED ON FUNCTION TYPE:
      IF(IFUNC.EQ.1)THEN

!         TRIANGULAR:
          IF(DEND.LE.0.)THEN

!             NEGATIVE SIDE OF TRIANGLE.
              WEIGHT=(DEND-DBEG)*(1+(DEND+DBEG)/(2*FWHM))/FWHM
          ELSEIF(DBEG.GE.0.)THEN

!             POSITIVE SIDE OF TRIANGLE.
              WEIGHT=(DEND-DBEG)*(1-(DEND+DBEG)/(2*FWHM))/FWHM
          ELSE

!             BOTH SIDES OF TRIANGLE.
              WEIGHT=(DEND-DBEG-(DEND**2+DBEG**2)/(2*FWHM))/FWHM
          ENDIF
      ELSEIF(IFUNC.EQ.2)THEN

!         RECTANGLE:
          WEIGHT=(DEND-DBEG)/FWHM
      ELSEIF(IFUNC.EQ.3)THEN

!         GAUSSIAN:
          IF(LINIT)THEN
              ARGCON=RT4LN2/FWHM

!             THE INITIAL DBEG SHOULD ALWAYS BE LESS THAN ZERO.
              IBEG=1-ERFC(-ARGCON*DBEG)/2
              LINIT=.FALSE.
          ENDIF
          IF(DEND.LT.0.)THEN
              IEND=1-ERFC(-ARGCON*DEND)/2
          ELSE
              IEND=ERFC(ARGCON*DEND)/2
          ENDIF
          WEIGHT=IBEG-IEND
          IBEG=IEND
      ELSEIF(IFUNC.EQ.4)THEN

!         SINC:
          IF(LINIT)THEN
              ARGCON=RSINC/FWHM

!             THE INITIAL DBEG SHOULD ALWAYS BE LESS THAN ZERO.
              IBEG=1-COMPSI(-ARGCON*DBEG)
              LINIT=.FALSE.
          ENDIF
          IF(DEND.LT.0.)THEN
              IEND=1-COMPSI(-ARGCON*DEND)
          ELSE
              IEND=COMPSI(ARGCON*DEND)
          ENDIF
          WEIGHT=IBEG-IEND
          IBEG=IEND
      ELSEIF(IFUNC.EQ.5)THEN

!         SINC SQUARED:
          IF(LINIT)THEN
              ARGCON=RSINC2/FWHM

!             THE INITIAL DBEG SHOULD ALWAYS BE LESS THAN ZERO.
              ARG=ARGCON*DBEG
              IBEG=1-COMPSI(-2*ARG)
              PIARG=PI*ARG
              IF(PIARG.LT.-.001)THEN
                  IBEG=IBEG+SIN(PIARG)**2/(PI*PIARG)
              ELSE
                  PIARG2=PIARG**2
                  IBEG=IBEG+ARG*(1-PIARG2*(7.5-PIARG2)/22.5)
              ENDIF
              LINIT=.FALSE.
          ENDIF
          ARG=ARGCON*DEND
          IF(DEND.LT.0.)THEN
              IEND=1-COMPSI(-2*ARG)
              PIARG=PI*ARG
              IF(PIARG.LT.-.001)THEN
                  IEND=IEND+SIN(PIARG)**2/(PI*PIARG)
              ELSE
                  PIARG2=PIARG**2
                  IEND=IEND+ARG*(1-PIARG2*(7.5-PIARG2)/22.5)
              ENDIF
          ELSE
              IEND=COMPSI(2*ARG)
              PIARG=PI*ARG
              IF(PIARG.GT..001)THEN
                  IEND=IEND+SIN(PIARG)**2/(PI*PIARG)
              ELSE
                  PIARG2=PIARG**2
                  IEND=IEND+ARG*(1-PIARG2*(7.5-PIARG2)/22.5)
              ENDIF
          ENDIF
          WEIGHT=IBEG-IEND
          IBEG=IEND
      ELSEIF(IFUNC.EQ.6)THEN

!         HAMMING:
          IF(LINIT)THEN
              ARGCON=RHAMM/FWHM

!             THE INITIAL DBEG SHOULD ALWAYS BE LESS THAN ZERO.
              ARG=ARGCON*DBEG
              IBEG=A0HAMM*(1-COMPSI(-ARG))
              IF(1+ARG.GE.0.)THEN
                  IBEG=IBEG+A1HAMM*(1-COMPSI(1-ARG)+COMPSI(1+ARG))
              ELSE
                  IBEG=IBEG+A1HAMM*(2-COMPSI(1-ARG)-COMPSI(-1-ARG))
              ENDIF
              LINIT=.FALSE.
          ENDIF
          ARG=ARGCON*DEND
          IF(ARG.GE.0.)THEN
              IEND=A0HAMM*COMPSI(ARG)
              IF(ARG-1.GE.0.)THEN

!                 ARG-1 > 0; ARG > 0; ARG+1 > 0
                  IEND=IEND+A1HAMM*(COMPSI(ARG-1)+COMPSI(ARG+1))
              ELSE

!                 ARG-1 < 0; ARG > 0; ARG+1 > 0
                  IEND=IEND+A1HAMM*(1-COMPSI(1-ARG)+COMPSI(1+ARG))
              ENDIF
          ELSE
              IEND=A0HAMM*(1-COMPSI(-ARG))
              IF(ARG+1.GE.0.)THEN

!                 ARG-1 < 0; ARG < 0; ARG+1 > 0
                  IEND=IEND+A1HAMM*(1-COMPSI(1-ARG)+COMPSI(1+ARG))
              ELSE

!                 ARG-1 < 0; ARG < 0; ARG+1 < 0
                  IEND=IEND+A1HAMM*(2-COMPSI(1-ARG)-COMPSI(-1-ARG))
              ENDIF
          ENDIF
          WEIGHT=IBEG-IEND
          IBEG=IEND
      ELSEIF(IFUNC.EQ.7)THEN

!         USER:
          WEIGHT=USER(DBEG,DEND,FWHM)
      ENDIF
      RETURN
      END

      REAL FUNCTION USER(DBEG,DEND,FWHM)

!     STUB FOR USER DEFINED FILTER FUNCTION INTEGRAL.

!     INPUT ARGUMENTS:
!       FWHM     FULL-WIDTH-AT-HALF-MAXIMUM [CHUNIT DEFINES UNIT].
!       DBEG     INTEGRATION LOWER BOUND [CHUNIT DEFINES UNIT].
!       DEND     INTEGRATION UPPER BOUND [CHUNIT DEFINES UNIT].
      REAL DBEG,DEND,FWHM

!     DATA:
!       DEFINE   LOGICAL FLAG, SET TO TRUE WHEN FUNCTION IS DEFINED.
      LOGICAL DEFINE
      DATA DEFINE/.FALSE./
      IF(.NOT.DEFINE)THEN
          WRITE(*,'(/(A,F10.5))')'DBEG',DBEG,' DEND',DEND,' FWHM',FWHM
          STOP '* USER SUPPLIED SLIT FUNCTION INTEGRATION NOT DEFINED *'
      ENDIF
      USER=0.
      RETURN
      END

      SUBROUTINE ADJUST(VMIN,VMAX,DV,IV1,IV2,WNMIN,WNMAX,FWFUNC,FWHM,   &
     &     RELABS,CHUNIT)

!     THIS ROUTINE IS NEEDED IF A PRIOR TAPE7.SCR IS CURRENTLY REUSED

!     LABS .T. MEANS FWHM IS RELATIVE
!     LABS .F. MEANS FWHM IS ABSOLUTE
!     VMIN, VMAX AND DV ARE TAPE5 SPECTRAL INPUTS
!     CHUNIT INDICATES THE UNIT OF TAPE5 INPUTS
!     IV1 AND IV2 ARE THE WAVENUMBER FREQUENCY VALUES IN TAPE7.SCR

!     ADJUST VMIN AND VMAX UPON RETURN IN UNITS AS SPECIFIED BY CHUNIT
!     DETERMINE WNMAX AND WNMIN IN CM-1 CORRESPONDING G TO VMIN AND VMAX

      REAL VMIN,VMAX,DV,WNMIN,WNMAX,FWFUNC,FWHM
      LOGICAL LABS
      INTEGER IV1,IV2
      CHARACTER CHUNIT*1,RELABS*1
      REAL FWHMSV,W1,W2,WDGRD,WDMIN,WDMAX,WDBEG,WDEND
      INTEGER IDROP,NDDGRD,I

!     LABS=.T. IS RELABS=UPPER OR LOWER CASE A OR A BLANK
      LABS=RELABS.EQ.CHAR(65).OR.RELABS.EQ.CHAR(97).OR.RELABS.EQ.' '

      IF(CHUNIT.EQ.'W')THEN
!        ALREADY IN CM-1
         W1=IV1
         W2=IV2
      ELSEIF(CHUNIT.EQ.'M')THEN
!        CHANGE FROM CM-1 TO MICRON
         W2=1.E4/IV1
         W1=1.E4/IV2
      ELSEIF(CHUNIT.EQ.'N')THEN
!        CHANGE FROM CM-1 TO NM
         W2=1.E7/IV1
         W1=1.E7/IV2
      ENDIF

      NDDGRD=INT((VMAX-VMIN)/DV)+1
      FWHMSV=FWHM

      IDROP=0
      DO I=1,NDDGRD
         WDGRD=VMIN+DV*FLOAT(I-1)
         IF(LABS)THEN
            FWHM=FWHMSV
         ELSE
            FWHM=(FWHMSV/100.0)*WDGRD
         ENDIF
         WDMIN=WDGRD-FWFUNC*FWHM
         IF(WDMIN.GE.W1)GOTO 10
         WRITE(*,'(/A,F15.6,/A)')                                       &
     &     ' WARNING: NOT ENOUGH PADDING FOR FREQUENCY ',WDGRD,         &
     &     '          PROBABLY USING A PRIOR TAPE7.SCR'
         IDROP=IDROP+1
      ENDDO
   10 CONTINUE
      NDDGRD=NDDGRD-IDROP
      WDGRD=VMIN+IDROP*DV
      WDBEG=WDGRD
      DO I=2, NDDGRD
         WDGRD=WDGRD+DV
         IF(LABS)THEN
            FWHM=FWHMSV
         ELSE
            FWHM=(FWHMSV/100.0)*WDGRD
         ENDIF
         WDMAX=WDGRD+FWFUNC*FWHM
         IF(WDMAX.GT.W2)THEN
            WRITE(*,'(/A,F15.6,/A)')                                    &
     &           ' WARNING: NOT ENOUGH PADDING FOR FREQUENCY .GE.',     &
     &           WDGRD,'          PROBABLY USING A PRIOR TAPE7.SCR'
            NDDGRD=I-1
            GOTO 20
         ENDIF
      ENDDO
   20 CONTINUE
      WDEND=WDBEG+(NDDGRD-1)*DV

      FWHM=FWHMSV
      VMIN=WDBEG
      VMAX=WDEND
      IF(CHUNIT.EQ.'W')THEN

!        ALREADY IN CM-1
         WNMIN=VMIN
         WNMAX=VMAX
      ELSEIF(CHUNIT.EQ.'M')THEN

!        CHANGE FROM MICRON TO CM-1
         WNMIN=1.E4/VMAX
         WNMAX=1.E4/VMIN
      ELSEIF(CHUNIT.EQ.'N')THEN

!        CHANGE FROM NM TO CM-1
         WNMIN=1.E7/VMAX
         WNMAX=1.E7/VMIN
      ENDIF
      RETURN
      END

      REAL FUNCTION BNDPAS(NSPCDT,SPCGRD,SPCDAT,WBEG,WEND)

!     BNDPAS COMPUTES INTEGRATED (IR)RADIANCE FROM INPUT SPECTRUM.

!     INPUT ARGUMENTS:
!       NSPCDT   NUMBER OF TAPE7.SCR SPECTRAL DATA POINTS.
!       SPCGRD   TAPE7.SCR SPECTRAL GRID [CM-1 BEFORE CALL TO CNVRTW;
!                           CHUNIT DEFINES UNIT AFTER CALL TO CNVRTW].
!       SPCDAT   SPECTRAL (IR)RADIANCE [PER CM-1, PER MICRON OR PER NM].
!       WBEG     INTEGRATION BEGINNING SPECTRAL POINT [UNITS OF W].
!       WEND     INTEGRATION END SPECTRAL POINT [UNITS OF W].
      INTEGER NSPCDT
      REAL WBEG,WEND,SPCGRD(*),SPCDAT(*)

!     LOCAL VARIABLES:
      INTEGER J,JBEG,JEND,JENDM1
      REAL R,DW,SUM

!     INCREASING OR DECREASING SPECTRAL GRID:
      IF(WBEG.LE.WEND)THEN

!         INCREASING SPECTRAL GRID:
          DO JBEG=2,NSPCDT
              IF(WBEG.LE.SPCGRD(JBEG))GOTO 10
          ENDDO
          JBEG=NSPCDT
   10     CONTINUE
          DO JEND=JBEG,NSPCDT
              IF(WEND.LE.SPCGRD(JEND))GOTO 20
          ENDDO
          JEND=NSPCDT
   20     CONTINUE
      ELSE

!         DECREASING SPECTRAL GRID:
          DO JBEG=2,NSPCDT
              IF(WBEG.GE.SPCGRD(JBEG))GOTO 30
          ENDDO
          JBEG=NSPCDT
   30     CONTINUE
          DO JEND=JBEG,NSPCDT
              IF(WEND.LE.SPCGRD(JEND))GOTO 40
          ENDDO
          JEND=NSPCDT
   40     CONTINUE
      ENDIF
      JENDM1=JEND-1
      R=SPCDAT(JBEG)
      DW=SPCGRD(JBEG)-WBEG
      SUM=DW*(2*R+(SPCDAT(JBEG-1)-R)*DW/(SPCGRD(JBEG)-SPCGRD(JBEG-1)))
      DO J=JBEG+1,JENDM1
         SUM=SUM+(SPCDAT(J)+SPCDAT(J-1))*(SPCGRD(J)-SPCGRD(J-1))
      ENDDO
      R=SPCDAT(JENDM1)
      DW=WEND-SPCGRD(JENDM1)
      BNDPAS=(SUM                                                       &
     &  +DW*(2*R+(SPCDAT(JEND)-R)*DW/(SPCGRD(JEND)-SPCGRD(JENDM1))))/2
      IF(WBEG.GT.WEND)BNDPAS=-BNDPAS
      RETURN
      END

      REAL FUNCTION ERFC(X)

      IMPLICIT NONE

!     RETURNS THE COMPLEMENTARY ERROR FUNCTION FOR
!     POSITIVE REAL ARGUMENT X:

!     INPUT ARGUMENTS:
!       X        NON-NEGATIVE AND REAL FUNCTION ARGUMENT.
      REAL X

!     FUNCTIONS:
!       EXERFC   RETURNS EXP(X*X) ERFC(X) AT NON-NEGATIVE ARGUMENT X.
      REAL EXERFC
      ERFC=EXP(-X**2)*EXERFC(X)
      RETURN
      END

      REAL FUNCTION EXERFC(X)

      IMPLICIT NONE

!     RETURNS THE PRODUCT OF EXP(X*X) AND THE COMPLEMENTARY
!     ERROR FUNCTION FOR NON-NEGATIVE AND REAL ARGUMENT X.
!     [ABRAMOWITZ AND STEGUN, Eq 7.1.26].

!     INPUT ARGUMENTS:
!       X        NON-NEGATIVE AND REAL FUNCTION ARGUMENT.
      REAL X

!     PARAMETERS:
      REAL P
      DOUBLE PRECISION A1,A2,A3,A4,A5
      PARAMETER(P=.3275911,A1=.254829592D0,A2=-.284496736D0,            &
     &  A3=1.421413741D0,A4=-1.453152027D0,A5=1.061405429D0)

!     LOCAL VARIABLES:
      DOUBLE PRECISION T

!     ALGORITHM:
      T=DBLE(1./(1+P*X))
      EXERFC=REAL(T*(A1+T*(A2+T*(A3+T*(A4+T*A5)))))
      RETURN
      END

      REAL FUNCTION COMPSI(ARG)

!     FOR ARG NON-NEGATIVE, THIS ROUTINE COMPUTES

!       inf
!        /  sin(pi a)        1   Si(pi A)
!        |  --------- da  =  - - --------
!        /    pi a           2      pi
!        A

!                             f(pi A)             g(pi A)
!                          =  ------- cos(pi A) + ------- sin(pi A)
!                               pi                  pi

!     USING THE PRESCRIPTION OF ABRAMOWITZ AND STEGUN, CHAPTER 5.

!     INPUT ARGUMENTS:
!       ARG     FUNCTION ARGUMENT (NON-NEGATIVE).
      REAL ARG

!     PARAMETERS
      REAL PI,FA,FB,FC,FD,FE,FF,FG,FH,GA,GB,GC,GD,GE,GF,GG,GH
      PARAMETER(PI=3.141593,                                            &
     &  FA=  38.027264,FB= 265.187033,FC= 335.677320,FD=  38.102495,    &
     &  FE=  40.021433,FF= 322.624911,FG= 570.236280,FH= 157.105423,    &
     &  GA=  42.242855,GB= 302.757865,GC= 352.018498,GD=  21.821899,    &
     &  GE=  48.196927,GF= 482.485984,GG=1114.978885,GH= 449.690326)

!     LOCAL VARIABLES:
!       X        ARGUMENT OF F, G, SIN AND COS FUNCTIONS:
!       X2       X SQUARED.
!       FCOS     THE F FUNCTION TIMES THE COSINE.
!       GSIN     THE G FUNCTION TIMES THE SINE.
!       X100     ONE HUNDRED TIMES X.
!       IX       INTERPOLATION LOWER INDEX.
      REAL X,X2,FCOS,GSIN,X100
      INTEGER IX

!     DATA:
!       CMPSI    COMPSI FUNCTION FOR 0.50 < X < 1.00 IN 0.01 INCREMENTS.
!       SIBYX    SINE INTEGRAL OVER X FOR X < 0.50 IN 0.01 INCREMENTS.
      REAL CMPSI(50:100),SIBYX(0:50)
      DATA CMPSI/.3430390,.3399895,.3369453,.3339064,.3308730,.3278452, &
     &                    .3248230,.3218066,.3187960,.3157914,.3127928, &
     &                    .3098003,.3068141,.3038343,.3008608,.2978939, &
     &                    .2949336,.2919800,.2890331,.2860932,.2831602, &
     &                    .2802343,.2773156,.2744041,.2715000,.2686033, &
     &                    .2657141,.2628325,.2599586,.2570925,.2542343, &
     &                    .2513840,.2485418,.2457077,.2428818,.2400642, &
     &                    .2372550,.2344542,.2316621,.2288785,.2261037, &
     &                    .2233376,.2205804,.2178323,.2150931,.2123631, &
     &                    .2096422,.2069307,.2042284,.2015357,.1988524/
      DATA SIBYX/1.000000,.9999944,.9999778,.9999500,.9999111,.9998611, &
     &                    .9998000,.9997278,.9996445,.9995501,.9994446, &
     &                    .9993280,.9992003,.9990616,.9989118,.9987508, &
     &                    .9985789,.9983958,.9982017,.9979966,.9977804, &
     &                    .9975532,.9973150,.9970658,.9968055,.9965343, &
     &                    .9962521,.9959588,.9956548,.9953395,.9950135, &
     &                    .9946765,.9943286,.9939697,.9936000,.9932194, &
     &                    .9928279,.9924256,.9920124,.9915885,.9911537, &
     &                    .9907081,.9902517,.9897845,.9893067,.9888181, &
     &                    .9883188,.9878088,.9872881,.9867568,.9862148/

!     DEFINE ARGUMENT:
      X=PI*ARG

!     BRANCH BASED ON MAGNITUDE OF X
      IF(X.GE.1.)THEN

!         RATIONAL APPROXIMATIONS:
          X2=X*X
          FCOS=(FD+X2*(FC+X2*(FB+X2*(FA+X2))))*COS(X)                   &
     &      /(X*(FH+X2*(FG+X2*(FF+X2*(FE+X2)))))
          GSIN=(GD+X2*(GC+X2*(GB+X2*(GA+X2))))*SIN(X)                   &
     &      /(X*(GH+X2*(GG+X2*(GF+X2*(GE+X2)))))
          COMPSI=(FCOS+GSIN)/PI
      ELSEIF(X.GE..5)THEN

!         INTERPOLATE INTO CMPSI TABLE:
          X100=100*X
          IX=INT(X100)
          COMPSI=CMPSI(IX)+(X100-IX)*(CMPSI(IX+1)-CMPSI(IX))
      ELSEIF(X.GE..0)THEN

!         INTERPOLATE IN SIBYX TABLE [MULTIPLY BY ARG INSTEAD OF
!         MULITPLYING BY X (=PI*ARG) AND THEN DIVIDING BY PI]:
          X100=100*X
          IX=INT(X100)
          COMPSI=.5-ARG*(SIBYX(IX)+(X100-IX)*(SIBYX(IX+1)-SIBYX(IX)))
      ELSE
          STOP 'Error in COMPSI:  Negative argument.'
      ENDIF
      RETURN
      END
