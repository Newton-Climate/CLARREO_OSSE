      SUBROUTINE THMFLX(KNTRVL,IK,IKP1,ML,V,BBGRND,BBOT,BTOP)

!     THIS ROUTINE CALCULATES VERTICAL FLUXES ASSUMING NO ATMOSPHERIC OR
!     SURFACE SCATTERING USING A THREE POINT FIRST MOMENT QUADRATURE.

!     DECLARE INPUT ARGUMENTS:
!       KNTRVL  NUMBER OF CORRELATED K'S PER SPECTRAL INTERVAL.
!       IK      LOWER LAYER BOUNDARY INDEX (ALSO LAYER INDEX).
!       IKP1    UPPER LAYER BOUNDARY INDEX.
!       ML      TOTAL NUMBER OF LAYER BOUNDARIES.
!       V       SPECTRAL FREQUENCY [CM-1].
!       BBGRND  GROUND PLANCK FUNCTION TIMES PI [W CM-2 / CM-1].
!       BBOT    LOWER BOUNDARY PLANCK FUNCTION TIMES PI [W CM-2 / CM-1].
!       BTOP    UPPER BOUNDARY PLANCK FUNCTION TIMES PI [W CM-2 / CM-1].
      INTEGER KNTRVL,IK,IKP1,ML
      REAL V,BBGRND,BBOT,BTOP

!     PARAMETERS:
      INCLUDE 'PARAMS.h'

!     COMMONS:
      INCLUDE 'BASE.h'

!     COMMON/RCNSTN/
!       PI       THE CONSTANT PI
!       DEG      NUMBER OF DEGREES IN ONE RADIAN.
!       BIGNUM   MAXIMUM SINGLE PRECISION NUMBER.
!       BIGEXP   MAXIMUM EXPONENTIAL ARGUMENT WITHOUT OVERFLOW.
!       RRIGHT   SMALLEST SINGLE PRECISION REAL ADDED TO 1 EXCEEDS 1.
      REAL PI,DEG,BIGNUM,BIGEXP,RRIGHT
      COMMON/RCNSTN/PI,DEG,BIGNUM,BIGEXP,RRIGHT

!     COMMON /CORKDT/
!       WTKSUB   SPECTRAL BIN SUB-INTERVAL FRACTIONAL WIDTHS.
!       DEPLAY   INCREMENTAL EXTINCTION OPTICAL DEPTHS.
!       TRNLAY   INCREMENTAL TRANSMITTANCES.
!       TRNCUM   CUMULATIVE TRANSMITTANCES.
!       K2TAIL   POINTER FROM K BIN TO LINE TAIL SUB-BIN
!                (=0 IF MULTIPLE LINE TAIL SUB-BINS CONTRIBUTE).
!       CONTWT   WEIGHTS FOR PARTITIONING LINE TAILS INTO K'S
!                (ONLY USED IF K2TAIL IS 0).
      REAL WTKSUB,DEPLAY,TRNLAY,TRNCUM,CONTWT
      INTEGER K2TAIL
      COMMON/CORKDT/WTKSUB(MXKSUB),DEPLAY(MXKSUB),TRNLAY(MXKSUB),       &
     &  TRNCUM(MXKSUB),K2TAIL(MXKSUB),CONTWT(MTLSUB,MXKSUB)
      SAVE /CORKDT/

!       SUBINT   SPECTRAL BIN "K" SUB-INTERVAL FRACTIONAL WIDTHS.
!       UPFLX    LAYER BOUNDARY UPWARD THERMAL SPECTRAL
!                FLUX (INCLUDES SCATTERED SOLAR IF DISORT
!                & NO AZIMUTH DEPENDENCE) [W CM-2 / CM-1].
!       DNFLX    LAYER BOUNDARY DOWNWARD THERMAL SPECTRAL
!                FLUX (INCLUDES SCATTERED SOLAR IF DISORT
!                & NO AZIMUTH DEPENDENCE) [W CM-2 / CM-1].
!       UPFLXS   LAYER BOUNDARY UPWARD SCATTERED SOLAR
!                SPECTRAL FLUX (USED WITH DISORT ONLY
!                IF AZIMUTH DEPENDENT) [W CM-2 / CM-1].
!       DNFLXS   LAYER BOUNDARY DOWNWARD SCATTERED SOLAR
!                SPECTRAL FLUX (USED WITH DISORT ONLY
!                IF AZIMUTH DEPENDENT) [W CM-2 / CM-1].
!       NTFLX    LAYER BOUNDARY NET (THERMAL PLUS SCATTERED SOLAR PLUS
!                DIRECT SOLAR) UPWARD SPECTRAL FLUX [W CM-2 / CM-1].
      REAL SUBINT,UPFLX,DNFLX,UPFLXS,DNFLXS,NTFLX
      COMMON/NETFLX/SUBINT(MXKSUB),UPFLX(LAYDIM),DNFLX(LAYDIM),         &
     &  UPFLXS(LAYDIM),DNFLXS(LAYDIM),NTFLX(LAYDIM)

!     COMMON /DPFLUX/
!       TUPFSM   LAYER BOUNDARY UPWARD NO-SCAT IN-BAND FLUX [W/CM2].
!       TDNFSM   LAYER BOUNDARY DOWNWARD NO-SCAT IN-BAND FLUX [W/CM2].
      DOUBLE PRECISION TUPFSM,TDNFSM
      COMMON/DPFLUX/TUPFSM(LAYDIM),TDNFSM(LAYDIM)

!       ISPCCR  UNIT NUMBER FOR SPECTRAL COOLING RATE FILE.
!       PCOEF   PRESSURE DEPENDENT COEFFICIENTS USED TO CALCULATE.
!               COOLING RATES FROM NET FLUXES [(K/DAY) / (W/CM2)].
!       CLRTSM  LAYER BOUNDARY IN-BAND COOLING RATES [K/DAY].
!       CLRTS0  LAYER BOUNDARY IN-BAND COOLING RATES
!               EXCLUDING DIRECT SOLAR CONTRIBUTION [K/DAY].
!       NTFSM   LAYER BOUNDARY IN-BAND NET (THERMAL PLUS SCATTERED
!               SOLAR PLUS DIRECT SOLAR) UPWARD FLUX [W/CM2].
!       UPFSM   LAYER BOUNDARY IN-BAND UPWARD THERMAL (PLUS
!               SCATTERED SOLAR IF DISORT) FLUX [W/CM2].
!       DNFSM   LAYER BOUNDARY IN-BAND DOWNWARD THERMAL (PLUS
!               SCATTERED SOLAR IF DISORT) FLUX [W/CM2].
!       UPFSSM  LAYER BOUNDARY IN-BAND UPWARD SCATTERED SOLAR
!               FLUX (NOT USED WITH DISORT) [W/CM2].
!       DNFSSM  LAYER BOUNDARY IN-BAND DOWNWARD SCATTERED SOLAR
!               FLUX (NOT USED WITH DISORT) [W/CM2].
!99   INTEGER ISPCCR
!99   REAL PCOEF,CLRTSM,CLRTS0,NTFSM,UPFSM,DNFSM,UPFSSM,DNFSSM
!99   COMMON/COOLRT/ISPCCR,PCOEF(5,LAYDIM),CLRTSM(LAYDIM),
!99  1  CLRTS0(LAYDIM),NTFSM(LAYDIM),UPFSM(LAYDIM),
!99  2  DNFSM(LAYDIM),UPFSSM(LAYDIM),DNFSSM(LAYDIM)

!     DECLARE FUNCTION NAMES
      REAL BBFN

!     DECLARE LOCAL VARIABLES:
!       BAVG    PLANCK FUNCTION AT DENSITY WEIGHTED AVERAGE LAYER
!               TEMPERATURE TIMES PI [W CM-2 / CM-1].
!       INTRVL  INDEX FOR LOOPING OF CORRELATED K'S.
!       I       INDEX FOR LOOPING OVER QUADRATURES.
!       OPTDEP  LAYER OPTICAL DEPTH FOR GIVEN ANGLE AND K.
!       EMIS    LAYER EMISSIVITY FOR GIVEN ANGLE AND K.
!       UPLAY   LAYER UPWARD FLUX FOR GIVEN ANGLE AND K [W/CM2].
!       COEF    COEFFICIENT USED IN CALCULATION OF LAYER FLUXES.
!       THMUP   LAYER BOUNDARY UPWARD NO-SCAT FLUX FOR SET K [W/CM2].
!       THMDN   LAYER BOUNDARY DOWNWARD NO-SCAT FLUX FOR SET K [W/CM2].
!       JK      LOWER LAYER BOUNDARY INDEX.
!       JKP1    UPPER LAYER BOUNDARY INDEX.
      REAL BAVG,OPTDEP,UPLAY,EMIS,COEF,THMUP,THMDN
      INTEGER INTRVL,I,JK,JKP1,JKMAX
!99   REAL TCLRT(LAYDIM)
!99   INTEGER JKP2,JKP3,JKP4

!     DECLARE SAVED ARRAYS:
      REAL TNTFLX(LAYDIM),TLAYER(3,LAYDIM,MXKSUB),                      &
     &  THRMUP(3,MXKSUB),THRMDN(3,LAYDIM,MXKSUB)
      SAVE TNTFLX,TLAYER,THRMUP,THRMDN

!     DECLARE DATA:
!       COS3PT   3-POINT FIRST MOMENT QUADRATURE COSINES.
      REAL COS3PT(3),WT3PT(3)
      DATA COS3PT/.2123405382,.5905331356,.9114120405/,                 &
     &  WT3PT/.13965396,.45848221,.40186383/
      IF(IKP1.LT.ML)THEN

!         CHECK FOR FIRST LAYER.
          IF(IK.EQ.1)THEN

!             LOOP OVER CORRELATED K'S.
              DO 10 INTRVL=1,KNTRVL

!                 DEFINE UPWARD FLUX AT THE GROUND
                  THRMUP(1,INTRVL)=BBGRND
                  THRMUP(2,INTRVL)=BBGRND
                  THRMUP(3,INTRVL)=BBGRND
   10         CONTINUE
              TNTFLX(1)=BBGRND
              TUPFSM(1)=TUPFSM(1)+DBLE(BBGRND)
          ENDIF

!         DEFINE LAYER PLANCK FUNCTION
          BAVG=PI*BBFN(TBBY(LAYTWO+IK),V)

!         LOOP OVER CORRELATED K'S.
          TNTFLX(IKP1)=0.
          DO 30 INTRVL=1,KNTRVL

!             LOOP OVER GAUSSIAN POINTS
              THMUP=0.
              DO 20 I=1,3

!                 DETERMINE UPWARD FLUX THROUGH LAYER IK
                  OPTDEP=DEPLAY(INTRVL)/COS3PT(I)
                  TLAYER(I,IK,INTRVL)=EXP(-OPTDEP)
                  IF(OPTDEP.LT..02)THEN
                      UPLAY=OPTDEP*(BAVG+OPTDEP*(BTOP-4*BAVG)/6)
                      THRMDN(I,IK,INTRVL)                               &
     &                     =OPTDEP*(BAVG+OPTDEP*(BBOT-4*BAVG)/6)
                  ELSE
                      EMIS=1.-TLAYER(I,IK,INTRVL)
                      COEF=2*(EMIS/OPTDEP-TLAYER(I,IK,INTRVL))
                      UPLAY=EMIS*BTOP+COEF*(BAVG-BTOP)
                      THRMDN(I,IK,INTRVL)=EMIS*BBOT+COEF*(BAVG-BBOT)
                  ENDIF
                  THRMUP(I,INTRVL)=UPLAY                                &
     &              +TLAYER(I,IK,INTRVL)*THRMUP(I,INTRVL)
                  THMUP=THMUP+WT3PT(I)*THRMUP(I,INTRVL)
   20         CONTINUE
              THMUP=SUBINT(INTRVL)*THMUP
              TNTFLX(IKP1)=TNTFLX(IKP1)+THMUP
              TUPFSM(IKP1)=TUPFSM(IKP1)+DBLE(THMUP)
   30     CONTINUE
          RETURN
      ENDIF

!     DEFINE LAYER PLANCK FUNCTION
      BAVG=PI*BBFN(TBBY(LAYTWO+IK),V)

!     LOOP OVER CORRELATED K'S.
      TNTFLX(ML)=0.
      DO 60 INTRVL=1,KNTRVL

!         LOOP OVER GAUSSIAN POINTS
          THMUP=0.
          DO 40 I=1,3

!             DETERMINE UPWARD FLUX THROUGH LAYER IK
              OPTDEP=DEPLAY(INTRVL)/COS3PT(I)
              TLAYER(I,IK,INTRVL)=EXP(-OPTDEP)
              IF(OPTDEP.LT..02)THEN
                  UPLAY=OPTDEP*(BAVG+OPTDEP*(BTOP-4*BAVG)/6)
                  THRMDN(I,IK,INTRVL)                                   &
     &                 =OPTDEP*(BAVG+OPTDEP*(BBOT-4*BAVG)/6)
              ELSE
                  EMIS=1.-TLAYER(I,IK,INTRVL)
                  COEF=2*(EMIS/OPTDEP-TLAYER(I,IK,INTRVL))
                  UPLAY=EMIS*BTOP+COEF*(BAVG-BTOP)
                  THRMDN(I,IK,INTRVL)=EMIS*BBOT+COEF*(BAVG-BBOT)
              ENDIF
              THRMUP(I,INTRVL)=UPLAY                                    &
     &          +TLAYER(I,IK,INTRVL)*THRMUP(I,INTRVL)
              THMUP=THMUP+WT3PT(I)*THRMUP(I,INTRVL)
   40     CONTINUE

!         TOP OF THE ATMOSPHERE UPWARD FLUXES
          THMUP=SUBINT(INTRVL)*THMUP
          TNTFLX(ML)=TNTFLX(ML)+THMUP
          TUPFSM(ML)=TUPFSM(ML)+DBLE(THMUP)

!         TOP LAYER
          JK=ML-1
          THMDN=SUBINT(INTRVL)*(WT3PT(1)*THRMDN(1,JK,INTRVL)            &
     &      +WT3PT(2)*THRMDN(2,JK,INTRVL)+WT3PT(3)*THRMDN(3,JK,INTRVL))
          TNTFLX(JK)=TNTFLX(JK)-THMDN
          TDNFSM(JK)=TDNFSM(JK)+DBLE(THMDN)

!         SECOND FROM TOP LAYER
          JKP1=JK
          JK=JK-1
          THRMDN(1,JK,INTRVL)=THRMDN(1,JK,INTRVL)                       &
     &      +TLAYER(1,JK,INTRVL)*THRMDN(1,JKP1,INTRVL)
          THRMDN(2,JK,INTRVL)=THRMDN(2,JK,INTRVL)                       &
     &      +TLAYER(2,JK,INTRVL)*THRMDN(2,JKP1,INTRVL)
          THRMDN(3,JK,INTRVL)=THRMDN(3,JK,INTRVL)                       &
     &      +TLAYER(3,JK,INTRVL)*THRMDN(3,JKP1,INTRVL)
          THMDN=SUBINT(INTRVL)*(WT3PT(1)*THRMDN(1,JK,INTRVL)            &
     &      +WT3PT(2)*THRMDN(2,JK,INTRVL)+WT3PT(3)*THRMDN(3,JK,INTRVL))
          TNTFLX(JK)=TNTFLX(JK)-THMDN
          TDNFSM(JK)=TDNFSM(JK)+DBLE(THMDN)
!99       IF(INTRVL.EQ.KNTRVL)TCLRT(ML)=PCOEF(1,ML)*TNTFLX(JK)
!99  1      +PCOEF(2,ML)*TNTFLX(JKP1)+PCOEF(3,ML)*TNTFLX(ML)

!         THIRD FROM TOP LAYER
!99       JKP2=JKP1
          JKP1=JK
          JK=JK-1
          THRMDN(1,JK,INTRVL)=THRMDN(1,JK,INTRVL)                       &
     &      +TLAYER(1,JK,INTRVL)*THRMDN(1,JKP1,INTRVL)
          THRMDN(2,JK,INTRVL)=THRMDN(2,JK,INTRVL)                       &
     &      +TLAYER(2,JK,INTRVL)*THRMDN(2,JKP1,INTRVL)
          THRMDN(3,JK,INTRVL)=THRMDN(3,JK,INTRVL)                       &
     &      +TLAYER(3,JK,INTRVL)*THRMDN(3,JKP1,INTRVL)
          THMDN=SUBINT(INTRVL)*(WT3PT(1)*THRMDN(1,JK,INTRVL)            &
     &      +WT3PT(2)*THRMDN(2,JK,INTRVL)+WT3PT(3)*THRMDN(3,JK,INTRVL))
          TNTFLX(JK)=TNTFLX(JK)-THMDN
          TDNFSM(JK)=TDNFSM(JK)+DBLE(THMDN)
!99       IF(INTRVL.EQ.KNTRVL)TCLRT(JKP2)
!99  1      =PCOEF(1,JKP2)*TNTFLX(JK  )+PCOEF(2,JKP2)*TNTFLX(JKP1)
!99  2      +PCOEF(3,JKP2)*TNTFLX(JKP2)+PCOEF(4,  ML)*TNTFLX(  ML)

!         LOOP OVER REMAINING LAYERS TOP TO BOTTOM TO
!         DETERMINE DOWNWARD FLUXES AND COOLING RATES.
!99       JKP4=ML
!99       JKP3=JKP2
!99       JKP2=JKP1
          JKP1=JK
          JKMAX=JK-1
          DO 50 JK=JKMAX,1,-1

!             LOOP OVER GAUSSIAN POINTS
              THRMDN(1,JK,INTRVL)=THRMDN(1,JK,INTRVL)                   &
     &          +TLAYER(1,JK,INTRVL)*THRMDN(1,JKP1,INTRVL)
              THRMDN(2,JK,INTRVL)=THRMDN(2,JK,INTRVL)                   &
     &          +TLAYER(2,JK,INTRVL)*THRMDN(2,JKP1,INTRVL)
              THRMDN(3,JK,INTRVL)=THRMDN(3,JK,INTRVL)                   &
     &          +TLAYER(3,JK,INTRVL)*THRMDN(3,JKP1,INTRVL)
              THMDN=SUBINT(INTRVL)*(WT3PT(1)*THRMDN(1,JK,INTRVL)        &
     &                             +WT3PT(2)*THRMDN(2,JK,INTRVL)        &
     &                             +WT3PT(3)*THRMDN(3,JK,INTRVL))
              TNTFLX(JK)=TNTFLX(JK)-THMDN
              TDNFSM(JK)=TDNFSM(JK)+DBLE(THMDN)
!99           IF(INTRVL.EQ.KNTRVL)TCLRT(JKP2)=PCOEF(1,JKP2)*TNTFLX(JK)
!99  1          +PCOEF(2,JKP2)*TNTFLX(JKP1)+PCOEF(3,JKP2)*TNTFLX(JKP2)
!99  2          +PCOEF(4,JKP2)*TNTFLX(JKP3)+PCOEF(5,JKP2)*TNTFLX(JKP4)
!99           JKP4=JKP3
!99           JKP3=JKP2
!99           JKP2=JKP1
              JKP1=JK
   50     CONTINUE
   60 CONTINUE
!99   TCLRT(2)=PCOEF(2,2)*TNTFLX(1)+PCOEF(3,2)*TNTFLX(2)
!99  1  +PCOEF(4,2)*TNTFLX(3)+PCOEF(5,2)*TNTFLX(4)
!99   TCLRT(1)=PCOEF(3,1)*TNTFLX(1)+PCOEF(4,1)*TNTFLX(2)
!99  1  +PCOEF(5,1)*TNTFLX(3)

!     WRITE OUT SPECTRAL COOLING RATE DATA.
!99   WRITE(99,'(I8,1P11E11.3:,/(8X,1P11E11.3))')
!99  1  INT(V+.5),(-TCLRT(JK),JK=1,ML)
      RETURN
      END
