      SUBROUTINE LOOP(LOOP0,IV,IVX,IDV5,IKMX,SUMTMS,SUMMS,              &
     &  TRANSM,IPH,SUMSSS,IVTEST,UNIF,TRACE,TRANSX,RADCUM,              &
     &  S0,GROUND,TSNOBS,TSNREF,FDNTRT,FDNSRT,KNTRVL,NUM_LRES,          &
     &  SOLAR_FLUX,DIFFUSE_FLUX,LNFLRT,FLRT,NUM_LEVS,                   &
     &  FLX_UPDIFFUSE,FLX_DNDIFFUSE,FLX_DNDIRECT)

!     THIS ROUTINE PERFORMS THE LOOP OVER LAYERS FOR EACH FREQUENCY.

!     PARAMETERS:
      INCLUDE 'PARAMS.h'
      INCLUDE 'ERROR.h'

!     INPUT ARGUMENTS:
!       SUMTMS   PATH THERMAL SCATTER [W CM-2 SR-1 / CM-1].
      INTEGER IV,IVX,IDV5,IKMX,IPH,KNTRVL
      REAL SUMTMS,SUMMS,SUMSSS,UNIF,TRACE,TRANSX,                       &
     &  RADCUM,S0,TSNOBS,TSNREF,FDNTRT,FDNSRT
      LOGICAL LOOP0,TRANSM,IVTEST,GROUND

      !DRF
      INTEGER NUM_LRES
      REAL SOLAR_FLUX(NUM_LRES)
      REAL DIFFUSE_FLUX(NUM_LRES)
      INTEGER LNFLRT
      INTEGER NUM_LEVS
      CHARACTER FLRT*(*)
      REAL FLX_UPDIFFUSE(NUM_LEVS,NUM_LRES)
      REAL FLX_DNDIFFUSE(NUM_LEVS,NUM_LRES) 
      REAL FLX_DNDIRECT(NUM_LEVS,NUM_LRES)
      !DRF

!     COMMONS:
      INCLUDE 'BASE.h'

!     COMMON/RCNSTN/
!       PI       THE CONSTANT PI.
!       DEG      NUMBER OF DEGREES IN ONE RADIAN.
!       BIGNUM   MAXIMUM SINGLE PRECISION NUMBER.
!       BIGEXP   MAXIMUM EXPONENTIAL ARGUMENT WITHOUT OVERFLOW.
!       RRIGHT   SMALLEST SINGLE PRECISION REAL ADDED TO 1 EXCEEDS 1.
      REAL PI,DEG,BIGNUM,BIGEXP,RRIGHT
      COMMON/RCNSTN/PI,DEG,BIGNUM,BIGEXP,RRIGHT
      INCLUDE 'IFIL.h'

!     /CARD1/
      INTEGER MODEL,ITYPE,IEMSCT,M1,M2,M3,IM,NOPRNT
      LOGICAL MODTRN
      COMMON/CARD1/MODEL,ITYPE,IEMSCT,M1,M2,M3,IM,NOPRNT,MODTRN

!     /CNTRL/
!       IKMAX    NUMBER OF PATH SEGMENTS ALONG LINE-OF-SIGHT.
!       ML       NUMBER OF ATMOSPHERIC PROFILE LEVELS.
!       MLFLX    NUMBER OF LEVELS FOR WHICH FLUX VALUES ARE WRITTEN.
!       ISSGEO   LINE-OF-SIGHT FLAG (0 = SENSOR PATH, 1 = SOLAR PATHS).
!       IMULT    MULTIPLE SCATTERING FLAG
!                  (0=NONE, 1=AT SENSOR, -1=AT FINAL OR TANGENT POINT).
      INTEGER IKMAX,ML,MLFLX,ISSGEO,IMULT
      COMMON/CNTRL/IKMAX,ML,MLFLX,ISSGEO,IMULT

!     /SURFWV/
!       LAMBER  LOGICAL FLAG, .TRUE. FOR LAMBERTIAN SURFACE.
!       TPTEMP  TARGET-PIXEL SURFACE TEMPERATURES [K].
!       TPHDIR  TARGET-PIXEL HEMISPHERE DIRECTIONAL REFLECTANCE AT
!               VIEWING ANGLE.
!       TPBRDF  TARGET-PIXEL BIDIRECTIONAL REFLECTANCE DISTRIBUTION
!               FUNCTION AT VIEWING AND SUN ANGLE.
!       AATEMP  AREA-AVERAGED GROUND SURFACE TEMPERATURES [K].
!       AASALB  AREA-AVERAGED GROUND SURFACE ALBEDO.
!       AADREF  AREA-AVERAGED GROUND SURFACE DIRECTIONAL REFLECTIVITY
!               AT THE SOLAR ZENITH ANGLE.
!       EMU     GROUND DIRECTIONAL EMISSIVITY AT VIEWING ANGLE.
!       BEM     GROUND DIRECTIONAL EMISSIVITY AT QUADRATURE ANGLE.
!       RMU     GROUND BRDF AZIMUTH COMPONENTS AT VIEWING ANGLE
!               AND AT SUN (=0) OR QUADRATURE (>0) ANGLE.
!       BDR     GROUND BRDF AZIMUTH COMPONENTS AT QUADRATURE ANGLE
!               AND AT SUN (=0) OR QUADRATURE (>0) ANGLE.
      LOGICAL LAMBER
      REAL TPTEMP,TPHDIR,TPBRDF,AATEMP,AASALB,AADREF,EMU,BEM,RMU,BDR
      COMMON/SURFWV/LAMBER,TPTEMP,TPHDIR,TPBRDF,AATEMP,AASALB,AADREF,   &
     &  EMU(MXUMU),BEM(MI),RMU(1:MXUMU,0:MI,0:MAZ),BDR(1:MI,0:MI,0:MAZ)

!     /PATH/
!       QTHETA  COSINE OF PATH ZENITH AT PATH BOUNDARIES.
!       AHT     ALTITUDES AT PATH BOUNDARIES [KM].
!       IHT     ALTITUDES AT PATH BOUNDARIES [M].
!       TPH     TEMPERATURE AT PATH BOUNDARIES [K].
!       IMAP    MAPPING FROM PATH SEGMENT MIDPOINT TO VERTICAL LAYER.
!       LOWAHT  INDEX OF VERTICAL LAYER BOUNDARY AT OR JUST BELOW AHT.
!       FACAHT  ALTITUDE INTERPOLATION FRACTION FOR AHT.
      INTEGER IHT,IMAP,LOWAHT
      REAL QTHETA,AHT,TPH,FACAHT
      COMMON/PATH/QTHETA(LAYTWO),AHT(LAYTWO),IHT(0:LAYTWO),             &
     &  TPH(LAYTWO),IMAP(LAYTWO),LOWAHT(LAYTWO),FACAHT(LAYTWO)
      INCLUDE 'SOLS.h'

!     /MSRD/
!       CSSCAT   COSINE OF THE SCATTERING ANGLE.
!                (AT H1 IF IMULT=1; AT OR "NEAR" H2 IF IMULT=-1)
!       SLEGEN   Nth LEGENDRE POLYNOMIAL EVALUATED AT THE COSINE OF THE
!                SCATTERING ANGLE TIMES (2N+1)/4pi (N=0 TO NSTR-1).
!       CSZEN0   LAYER BOUNDARY COSINE OF SOLAR/LUNAR ZENITH.
!       CSZEN    LAYER AVERAGE COSINE OF SOLAR/LUNAR ZENITH.
!       CSZENX   AVERAGE SOLAR/LUNAR COSINE ZENITH EXITING
!                (AWAY FROM EARTH) THE CURRENT LAYER.
!       BBGRND   THERMAL EMISSION (FLUX) AT THE GROUND [W CM-2 / CM-1].
!       BBNDRY   LAYER BOUNDARY THERMAL EMISSION (FLUX) [W CM-2 / CM-1].
!       TCONT    LAYER CONTINUUM OPTICAL DEPTH.
!       TAUT     LAYER TOTAL OPTICAL DEPTH.
!       GTSCAT   SUM OVER SCATTERING SOURCES OF SCATTERING OPTICAL DEPTH
!                AND PHASE FUNCTION LEGENDRE COEFFICIENT PRODUCTS.
!       COSBAR   LAYER EFFECTIVE SCATTERING ASYMMETRY FACTOR.
!       DEPRAT   FRACTIONAL DECREASE IN WEAK-LINE OPTICAL DEPTH TO SUN.
!       S0DEP    OPTICAL DEPTH FROM LAYER BOUNDARY TO SUN.
!       S0TRN    TRANSMITTED SOLAR IRRADIANCES [W CM-2 / CM-1]
!       UPF      LAYER BOUNDARY UPWARD THERMAL FLUX [W CM-2 / CM-1].
!       DNF      LAYER BOUNDARY DOWNWARD THERMAL FLUX [W CM-2 / CM-1].
!       UPFS     LAYER BOUNDARY UPWARD SOLAR FLUX [W CM-2 / CM-1].
!       DNFS     LAYER BOUNDARY DOWNWARD SOLAR FLUX [W CM-2 / CM-1].
      REAL CSSCAT,SLEGEN,CSZEN0,CSZEN,CSZENX,TCONT,TAUT,GTSCAT,COSBAR,  &
     &  BBGRND,BBNDRY,S0DEP,S0TRN,DEPRAT,UPF,DNF,UPFS,DNFS
      COMMON/MSRD/CSSCAT,SLEGEN(0:MAZ),                                 &
     &  CSZEN0(LAYDIM),CSZEN(LAYDIM),CSZENX(LAYDIM),TCONT(LAYDIM),      &
     &  TAUT(MXKSUB,LAYDIM),GTSCAT(0:MXCMU,1:LAYDIM),COSBAR(LAYDIM),    &
     &  BBGRND,BBNDRY(LAYDIM),S0DEP(MXKSUB,LAYTWO),S0TRN(MXKSUB,LAYTWO),&
     &  DEPRAT(MXKSUB,LAYDIM),UPF(MXKSUB,LAYDIM),DNF(MXKSUB,LAYDIM),    &
     &  UPFS(MXKSUB,LAYDIM),DNFS(MXKSUB,LAYDIM)

!     /LAY5/
!       TXLEG    SPECTRALLY INTERPOLATED LEGENDRE COEFFICIENTS FOR THE
!                SCATTERING PHASE FUNCTION (OPTICAL DEPTH WEIGHTED SUM).
      REAL TXNEW,TXOLD,TXLEG
      COMMON/LAY5/TXNEW(NLAY5,LAYTHR,3),TXOLD(NLAY5,LAYTHR,3),          &
     &  TXLEG(2:MXCMU,LAYTWO+1:LAYTHR,0:1)
      SAVE /LAY5/

!     /SAVEMS/
!       LUSEMS  LOGICAL, TRUE IF MULTIPLE SCATTERING DATA IS REUSED.
!       LSAVMS  LOGICAL, TRUE IF MULTIPLE SCATTERING DATA IS  SAVED.
      LOGICAL LUSEMS,LSAVMS
      COMMON/SAVEMS/LUSEMS,LSAVMS

!     /MODEL/
!       ZM       PROFILE BOUNDARY ALTITUDES [KM].
!       PM       PROFILE BOUNDARY PRESSURES [MBAR].
!       TM       PROFILE BOUNDARY TEMPERATURES [K].
!       RFNDX    PROFILE BOUNDARY REFRACTIVITIES.
!       DENSTY   PROFILE BOUNDARY DENSITIES [UNITS DEPEND ON SPECIES].
!       LRHSET   FLAG, TRUE IF RELATIVE HUMIDITY CANNOT BE SCALED.
      REAL ZM,PM,TM,RFNDX,DENSTY
      LOGICAL LRHSET
      COMMON/MODEL/ZM(LAYDIM),PM(LAYDIM),TM(LAYDIM),                    &
     &  RFNDX(LAYDIM),DENSTY(MEXT,LAYDIM),LRHSET(LAYDIM)

!     COMMON /CORKDT/
!       WTKSUB   SPECTRAL BIN SUB-INTERVAL FRACTIONAL WIDTHS.
!       DEPLAY   INCREMENTAL EXTINCTION OPTICAL DEPTHS
!       TRNLAY   INCREMENTAL TRANSMITTANCES
!       TRNCUM   CUMULATIVE TRANSMITTANCES
!       K2TAIL   POINTER FROM K BIN TO LINE TAIL SUB-BIN
!                (=0 IF MULTIPLE LINE TAIL SUB-BINS CONTRIBUTE).
!       CONTWT   WEIGHTS FOR PARTITIONING LINE TAILS INTO K'S
!                (ONLY USED IF K2TAIL IS 0).
      REAL WTKSUB,DEPLAY,TRNLAY,TRNCUM,CONTWT
      INTEGER K2TAIL
      COMMON/CORKDT/WTKSUB(MXKSUB),DEPLAY(MXKSUB),TRNLAY(MXKSUB),       &
     &  TRNCUM(MXKSUB),K2TAIL(MXKSUB),CONTWT(MTLSUB,MXKSUB)
      SAVE /CORKDT/

!       SUBINT   SPECTRAL BIN "K" SUB-INTERVAL FRACTIONAL WIDTHS.
!       UPFLX    LAYER BOUNDARY UPWARD THERMAL SPECTRAL
!                FLUX (INCLUDES SCATTERED SOLAR IF DISORT
!                & NO AZIMUTH DEPENDENCE) [W CM-2 / CM-1].
!       DNFLX    LAYER BOUNDARY DOWNWARD THERMAL SPECTRAL
!                FLUX (INCLUDES SCATTERED SOLAR IF DISORT
!                & NO AZIMUTH DEPENDENCE) [W CM-2 / CM-1].
!       UPFLXS   LAYER BOUNDARY UPWARD SCATTERED SOLAR
!                SPECTRAL FLUX (USED WITH DISORT ONLY
!                IF AZIMUTH DEPENDENT) [W CM-2 / CM-1].
!       DNFLXS   LAYER BOUNDARY DOWNWARD SCATTERED SOLAR
!                SPECTRAL FLUX (USED WITH DISORT ONLY
!                IF AZIMUTH DEPENDENT) [W CM-2 / CM-1].
!       NTFLX    LAYER BOUNDARY NET (THERMAL PLUS SCATTERED SOLAR PLUS
!                DIRECT SOLAR) UPWARD SPECTRAL FLUX [W CM-2 / CM-1].
      REAL SUBINT,UPFLX,DNFLX,UPFLXS,DNFLXS,NTFLX
      COMMON/NETFLX/SUBINT(MXKSUB),UPFLX(LAYDIM),DNFLX(LAYDIM),         &
     &  UPFLXS(LAYDIM),DNFLXS(LAYDIM),NTFLX(LAYDIM)

!     /WTFLX/
!       NFLUX   SPECTRAL BIN COUNTER FOR FLUX TABLE.
!       UPDIFF  BOUNDARY UPWARD DIFFUSE SPECTRAL FLUX [W CM-2 / CM-1].
!       DNDIFF  BOUNDARY DOWNWARD DIFFUSE SPECTRAL FLUX [W CM-2 / CM-1].
!       DNDRCT  BOUNDARY DIRECT SOLAR SPECTRAL FLUX [W CM-2 / CM-1].
!       NTERMS  NUMBER OF TERMS IN FLUX SPECTRAL SUM.
!       SMUPDF  LAYER BOUNDARY UPWARD DIFFUSE IN-BAND FLUX [W CM-2].
!       SMDNDF  LAYER BOUNDARY DOWNWARD DIFFUSE IN-BAND FLUX [W CM-2].
!       SMDNDR  LAYER BOUNDARY DIRECT SOLAR IN-BAND FLUX [W CM-2].
      INTEGER NFLUX,NTERMS
      REAL UPDIFF,DNDIFF,DNDRCT,SMUPDF,SMDNDF,SMDNDR
      COMMON/WTFLX/NFLUX,UPDIFF(0:NBINS,1:LAYDIM),                      &
     &  DNDIFF(0:NBINS,1:LAYDIM),DNDRCT(0:NBINS,1:LAYDIM),              &
     &  NTERMS,SMUPDF(LAYDIM),SMDNDF(LAYDIM),SMDNDR(LAYDIM)

!     /DISRT/
!       DIS      LOGICAL FLAG, TRUE FOR DISORT MULTIPLE SCATTERING.
!       DISAZM   LOGICAL FLAG, TRUE FOR DISORT WITH AZIMUTH DEPENDENCE.
!       DISALB   LOGICAL FLAG, TRUE FOR DISORT SPHERICAL ALBEDO OPTION.
!       LDISCL   LOGICAL FLAG, TRUE FOR ISAACS SCALED TO DISORT.
!       NSTR     NUMBER OF DISCRETE ORDINATE STREAMS.
!       NAZ      NUMBER OF DISORT AZIMUTH COMPONENTS.
!       N2GAUS   ORDER OF DOUBLE-GAUSS QUADRATURES.
      LOGICAL DIS,DISAZM,DISALB,LDISCL
      INTEGER NSTR,NAZ,N2GAUS
      COMMON/DISRT/DIS,DISAZM,DISALB,LDISCL,NSTR,NAZ,N2GAUS

!     /CJM5/
!       AMOD3D   FLAG INDICATING OUTPUT DATABASE FILE TYPE:
      CHARACTER*1 AMOD3D
      COMMON/CJM5/AMOD3D

!     DECLARE BLOCK DATA ROUTINES EXTERNAL:
      EXTERNAL DEVCBD

!     FUNCTIONS:
      REAL BETABS,BBFN

!     LOCAL VARIABLES:
!       PFMOL0   MOLECULAR PHASE FUNCTION ISOTROPIC SCATTERING TERM.
!       PFMOL2   MOLECULAR PHASE FUNCTION ANISOTROPIC SCATTERING TERM.
!       P2RAY    SECOND LEGENDRE EXPANSION COEFFICIENT OVER 5 (= 2N+1).
!       NMWAVE   WAVELENGTH BIN OF PREVIOUS DATA [NM].
!       ISTR     LOOP INDEX FOR MULTIPLE SCATTERING STREAMS.
!       TX15SV   PREVIOUS (LOWER) LAYER RAYLEIGH OPTICAL DEPTH.
!       XPART    PARTICULATE LAYER EXTINCTION OPTICAL DEPTH.
!       XPART0   PREVIOUS (LOWER) LAYER XPART VALUE.
!       TLH2O    H2O TRANSMITTANCE FOR L-SHAPE PATH.
!       TLUMIX   UNIFORMLY MIXED GASES TRANSMITTANCE FOR L-SHAPE PATH.
!       TLO3     O3 TRANSMITTANCE FOR L-SHAPE PATH.
!       H2OCUM   CUMULATIVE DIRECT PATH H2O CONTINUUM TRANSMITTANCE.
!       UMXCUM   CUMULATIVE DIRECT PATH CONTINUUM TRANSMITTANCE OF
!                UNIFORMLY MIXED GASES.
!       O3CUM    CUMULATIVE DIRECT PATH O3 CONTINUUM TRANSMITTANCE.
      INTEGER I,J,K,IPATH,MSOFF,IK,IKP1,N,IKOFF,INDEXX,ISTR,            &
     &  INTRVL,NP1,NFRNTL,NFRNTH,NBACKL,NBACKH,NMWAVE
      REAL V,STORE,BLAYER,BBOUND,DTAU,THMLAY,SOLLAY,COEF,WTTRAN,UP,DN,  &
     &  THMBND,SOLBND,THMDIF,SOLDIF,BNCOEF,DFCOEF,THMSCT,TRNOLD,TRNNEW, &
     &  TX9LAY,TX9CUM,OPTDEP,EMSLAY,B0,OMEGA,TMOL,FACTOR,SMTRNL,SMTHML, &
     &  SMSOLL,FRAC,UFRNT,DFRNT,UFRNTS,DFRNTS,UBACK,DBACK,UBACKS,DBACKS,&
     &  PFMOL0,PFMOL2,P2RAY,TX14SV,TX15SV,XPART,XPART0,                 &
     &  TLH2O,TLUMIX,TLO3,H2OCUM,UMXCUM,O3CUM
      SAVE NMWAVE

!     LOOP0 IS .TRUE. FOR FIRST CALL FROM ROUTINE TRANS
      IF(LOOP0)THEN

!         DEFINE NUMBER OF CORRELATED-K METHOD SPECTRAL
!         BINS (=1 IF METHOD IS NOT BEING USED).
          SUBINT(1)=1.
          IF(KNTRVL.GT.1)THEN
              DO INTRVL=1,KNTRVL
                  SUBINT(INTRVL)=WTKSUB(INTRVL)
              ENDDO
          ENDIF

!         INITIALIZE OPTICAL DEPTH ARRAYS
          DO J=1,LAYTHR
              DO I=1,NLAY5
                  TXOLD(I,J,1)=0.
                  TXNEW(I,J,1)=0.
                  TXOLD(I,J,2)=0.
                  TXNEW(I,J,2)=0.
                  TXOLD(I,J,3)=0.
                  TXNEW(I,J,3)=0.
              ENDDO
          ENDDO
          DO ISTR=2,NSTR
              DO J=LAYTWO+1,LAYTHR
                  TXLEG(ISTR,J,0)=0.
                  TXLEG(ISTR,J,1)=0.
              ENDDO
          ENDDO
          DO K=1,NMOLX
              TX(MEXT+K)=1.
          ENDDO

!         INITIALIZATION FOR MULTIPLE SCATTERING CALCULATIONS
          IF(IMULT.NE.0)CALL MAPMS(ML,IKMAX)

!         INITIALIZATION FOR LOWTRAN CALCULATIONS
          IF(.NOT.MODTRN)CALL FRQ5DT(LOOP0,IV)

!         INITIALIZATION FOR MOD3D DATABASE GENERATION:
          NMWAVE=0
          IF(AMOD3D.EQ.'T')CALL M3DIN(IKMX)
          RETURN
      ENDIF

!     DEFINE THE LAYER INDEPENDENT 5 CM-1 DATA
      IF(IVTEST)CALL FRQ5DT(LOOP0,IV)
      V=IVX
      IPATH=1

!     SET SPECTRAL INTERPOLATION FRACTION.
      FRAC=FLOAT(IV-IVX)/IDV5
      RADCUM=0.
      IF(LUSEMS)THEN

!         IF (LUSEMS) FLUX DATA ARE UNCHANGED FROM THE PREVIOUS RUN,
!         SET MSOFF TO 0 TO SKIP THE MULTIPLE SCATTERING CALCULATION.
          MSOFF=0
          READ(ISCRCH)(COSBAR(IK),GTSCAT(0,IK),                         &
     &      (TAUT(INTRVL,IK),INTRVL=1,KNTRVL),IK=1,ML-1),               &
     &      ((UPF(INTRVL,IK),DNF(INTRVL,IK),                            &
     &      UPFS(INTRVL,IK),DNFS(INTRVL,IK),INTRVL=1,KNTRVL),IK=1,ML)
      ELSE

!         MSOFF IS EQUAL LAYTWO FOR THE MULTIPLE SCATTERING LAYER LOOP.
          MSOFF=ABS(IMULT)*LAYTWO
      ENDIF

!     FOR EACH WAVENUMBER, AN INITIAL CALL (IK=0) TO BMOD IS REQUIRED
      IK=0
   10 CONTINUE
      IF(MODTRN)CALL BMOD(IK,IKMX,IPATH,IVX,MSOFF)

!     INITIALIZE PARAMETERS
      IPATH=1
      TRNOLD=1.
      TX9CUM=1.
      IF(.NOT.TRANSM)THEN
          SUMMS=0.
          SUMTMS=0.
          DO INTRVL=1,KNTRVL
              TRNCUM(INTRVL)=1.
          ENDDO

!         RAYLEIGH SCATTERING PHASE FUNCTION SPECTRAL COEFFICIENTS:
          CALL MOLSCT(V,PFMOL0,PFMOL2,P2RAY)
          IF(AMOD3D.EQ.'M')THEN
              H2OCUM=1.
              UMXCUM=1.
              O3CUM=1.
          ENDIF
      ENDIF

!     BEGINNING OF LAYER LOOP
      IF(MSOFF.GT.0)THEN
          BBNDRY(1)=PI*BBFN(TM(1),V)
          BBGRND=PI*BBFN(AATEMP,V)
          DNDRCT(0,1)=0.
      ENDIF
      DO 50 IK=1,IKMAX

!         MSOFF IS A LAYER OFFSET PARAMETER EQUAL TO 0 FOR
!         THE LINE-OF-SIGHT PATH AND EQUAL TO LAYTWO FOR THE
!         MULTIPLE SCATTERING VERTICAL PATH FROM GROUND TO SPACE.
          IKOFF=IK+MSOFF

!         FOR TRANSMISSION RUNS, W(K) WAS DEFINED IN ROUTINE GEO.
          IF(TRANSM)GOTO40

!         LOAD APPROPRIATE ABSORBER AMOUNTS INTO W(K)
          IF(IEMSCT.EQ.1)GOTO30

!         FOR FIRST LAYER (IK=1) CALCULATE SUN-TO-OBSERVER TRANSMITTANCE
          IF(IPATH.EQ.1)THEN
              INDEXX=MSOFF+1
              IF(WPATHS(INDEXX,36).GE.0.)THEN

!                 LOAD W WITH SUN-TO-OBSERVER PATH ABSORBER AMOUNTS
                  DO K=1,MEXT
                      W(K)=WPATHS(INDEXX,K)
                  ENDDO
                  GOTO40
              ENDIF

!             IN SSGEO, SCATTERING POINT INDEXX WAS DETERMINED TO
!             BE IN THE SHADE AND WPATHS(INDEXX,36) WAS SET TO -5.
              CALL SHADE(IPH,IK,MSOFF,IPATH,KNTRVL,V,                   &
     &          PFMOL0,PFMOL2,TSNOBS,TSNREF,SUMSSS)
          ENDIF
   20     CONTINUE
          IPATH=2
          INDEXX=MSOFF+IK+1
          IF(WPATHS(INDEXX,36).GE.0.)THEN

!             LOAD W WITH SUN-TO-SCATTERING POINT ABSORBER AMOUNTS.
!             FOR THE OPTICAL PATH (MSOFF=0) WHEN THE CORRELATED-K
!             APPROACH IS NOT USED (KNTRVL=1), MOST OF THE WPATHS ALSO
!             INCLUDE THE OBSERVER-TO-SCATTERING POINT ABSORBER AMOUNTS.
              DO K=1,MEXT
                  W(K)=WPATHS(INDEXX,K)
              ENDDO
              GOTO40
          ENDIF

!         IN SSGEO, THE W'S WERE SET TO -5 IF THE SUN WAS BLOCKED
          CALL SHADE(IPH,IK,MSOFF,IPATH,KNTRVL,V,                       &
     &      PFMOL0,PFMOL2,TSNOBS,TSNREF,SUMSSS)

!         LOAD W(K) WITH OPTICAL PATH ABSORBER AMOUNT
   30     CONTINUE
          IPATH=3
          DO K=1,MEXT
              W(K)=WPATH(IKOFF,K)
          ENDDO

!         DEFINE THE LAYER DEPENDENT 5 CM-1 DATA
   40     CONTINUE
          IF(IVTEST)CALL LAY5DT(FLOAT(IV),IKOFF,IPATH,IKMX,TRANSM,P2RAY)

!         DEFINE TX ARRAY
!           1  AEROSOL SCATTERING DEPTH WEIGHTED ASYMMETRY PARAMETER.
!           2  INCREMENTAL AEROSOL SCATTERING OPTICAL DEPTH.
!           3  TOTAL O2 CONTINUUM TRANSMITTANCE.
!           4  N2 CONTINUUM TRANSMITTANCE.
!           5  TOTAL H2O CONTINUUM TRANSMITTANCE.
!           6  RAYLEIGH MOLECULAR SCATTERED TRANSMITTANCE.
!           7  AEROSOL EXTINCTION.
!           8  TOTAL OZONE CONTINUUM TRANSMITTANCE.
!           9  PRODUCT OF ALL CONTINUUM TRANSMITTANCES EXCEPT O2 & HNO3.
!          10  AEROSOL ABSORPTION.
!          11  HNO3 TRANSMITTANCE.
!          12  MOLECULAR CONTINUUM OPTICAL DEPTH.
!          13  INCREMENTAL AEROSOL EXTINCTION OPTICAL DEPTH.
!          14  TOTAL CONTINUUM OPTICAL DEPTH.
!          15  LAYER RAYLEIGH MOLECULAR SCATTERING OPTICAL DEPTH.
!          16  CIRRUS CLOUD TRANSMITTANCE (ICLD=20 ONLY).
!          64  UV/VIS NO2 TRANSMITTANCE.
!          65  UV/VIS SO2 TRANSMITTANCE.
!          66  INCREMENTAL WATER DROPLET SCATTERING OPTICAL DEPTH.
!          67  INCREMENTAL ICE PARTICLE SCATTERING OPTICAL DEPTH.
!          74  INCREMENTAL STD/SUB-VIS CIRRUS SCATTERING OPTICAL DEPTH.
!          75  INCREMENTAL CLOUD (WATER+ICE) EXTINCTION OPTICAL DEPTH.
!          76  CLOUD ASYMMETRY PARAMETER WEIGHTED BY SCATTERING DEPTH.
!          77  INCREMENTAL RAIN EXTINCTION OPTICAL DEPTH
!          78  INCREMENTAL RAIN SCATTERING OPTICAL DEPTH
!          79  INCREMENTAL RAIN ASYMMETRY PARAMETER.
!          --  MOLECULAR LINE CENTER TRANSMITTANCE  --
!          17=H2O  36=CO2  31=O3   47=N2O  44=CO   46=CH4
!          50=O2   54=NO   56=SO2  55=NO2  52=NH3  11=HNO3
          DO K=1,16
              STORE=TXNEW(K,IKOFF,IPATH)
              TX(K)=STORE+FRAC*(TXOLD(K,IKOFF,IPATH)-STORE)
          ENDDO
          DO K=17,NLAY5
              STORE=TXNEW(K,IKOFF,IPATH)
              TX(47+K)=STORE+FRAC*(TXOLD(K,IKOFF,IPATH)-STORE)
          ENDDO
          IF(MSOFF.GT.0 .AND. IPATH.EQ.3)THEN
              DO ISTR=2,NSTR
                  STORE=TXLEG(ISTR,IKOFF,1)
                  GTSCAT(ISTR,IK)=STORE+FRAC*(TXLEG(ISTR,IKOFF,0)-STORE)
              ENDDO
          ENDIF
          IF(KNTRVL.LE.1)THEN

!             NO CORRELATED-K:
              IF(MODTRN)CALL BMOD(IK,IKMX,IPATH,IVX,MSOFF)

!             BEER'S LAW SPECIES CONTRIBUTIONS:
              TRANSX=TX(MEXT+1)
              DO K=2,NMOLX
                  TRANSX=TRANSX*TX(MEXT+K)
              ENDDO

!             COMBINE TRANSMISSIONS IF NOT USING CORRELATED-K METHOD
!               UNIF    UNIFORMLY MIXED GASES TRANSMITTANCE
!               TRACE   TRACE GASES TRANSMITTANCE
              UNIF=TX(36)*TX(44)*TX(46)*TX(47)*TX(50)
              TRACE=TX(52)*TX(54)*TX(55)*TX(56)*TX(11)
              IF(IPATH.EQ.3)THEN
                  IF(TRNOLD.LE.0.)THEN
!                     TRANSMITTANCE OF THE CURRENT LAYER CANNOT
!                     BE DETERMINED.  ASSUME IT IS ZERO.
                      TRNLAY(1)=0.
                      DEPLAY(1)=BIGEXP
                  ELSE
                      DEPLAY(1)=0.
                      TRNLAY(1)=1.
                      TRNNEW=TX(17)*UNIF*TX(31)*TRACE*TRANSX
                      IF(TRNNEW.LT.TRNOLD)THEN

!                         DETERMINE DECREASE IN TRANSMITTANCE.
                          TRNLAY(1)=TRNNEW/TRNOLD
                          DEPLAY(1)=BIGEXP
                          IF(TRNLAY(1).GT.0.)DEPLAY(1)=-LOG(TRNLAY(1))
                          TRNOLD=TRNNEW
                      ENDIF
                  ENDIF
                  DEPLAY(1)=DEPLAY(1)+TX(14)
                  XPART=TX(75)+TX(77)+TX(13)
                  IF(MSOFF.EQ.0)THEN
                      TX9LAY=EXP(-TX(14))
                      TX9CUM=TX9CUM*TX9LAY
                      TX(9)=TX9CUM*TRNNEW
                      TRNLAY(1)=TRNLAY(1)*TX9LAY
                      IF(IEMSCT.EQ.2)THEN
                          CALL SSRAD(IPH,IK,MSOFF,IPATH,V,S0,           &
     &                      PFMOL0,PFMOL2,TRNNEW,TSNOBS,TSNREF,SUMSSS)
                          IF(AMOD3D.EQ.'M')THEN
                              H2OCUM=H2OCUM*TX(5)
                              UMXCUM=UMXCUM*TX(3)*TX(64)*TX(65)*TX(4)
                              O3CUM=O3CUM*TX(8)
                              CALL MCMOL(IVX,IK,IKMAX,NMWAVE,           &
     &                          TX(17)*H2OCUM,UNIF*TRACE*TRANSX*UMXCUM, &
     &                          TX(31)*O3CUM,TLH2O,TLUMIX,TLO3)
                          ENDIF
                      ELSEIF(AMOD3D.EQ.'C')THEN
                          CALL MCCONT(IVX,IK,IKMAX,NMWAVE)
                      ENDIF
                  ENDIF
              ELSEIF(TRANSM)THEN

!                 DEFINE SPECIES DEPENDENT TRANSMITTANCES
!                 FOR TRANSMISSION ONLY CALCULATIONS.
                  TX(9)=TX(17)*UNIF*TX(31)*TRACE*TRANSX*EXP(-TX(14))
                  UNIF=UNIF*TX(3)
                  TRACE=TRACE*TX(64)*TX(65)

!                 COMBINE IR AND UV/VIS CONTRIBUTIONS
!                 FOR NO2, SO2 AND O2.
                  TX(64)=TX(64)*TX(55)
                  TX(65)=TX(65)*TX(56)
                  TX(50)=TX(50)*TX(3)

!                 OZONE CONTRIBUTIONS ARE MODELED WITH
!                 THE MODTRAN BAND MODEL BELOW 9170 CM-1
!                 AND AS A CONTINUUM ABOVE 9170 CM-1.
                  IF(IV.GE.9170)TX(31)=TX(8)

!                 IF TRANSMISSION ONLY CALCULATION, RETURN
                  RETURN
              ELSEIF(IEMSCT.EQ.2)THEN

!                 CALCULATE TMOL, THE MOLECULAR TRANSMITTANCES
!                 TO THE SUN.  VALUES OF TMOL LESS THAN 1.E-8
!                 ARE NOT ACCURATE AND ARE SET TO ZERO.
                  TMOL=TX(17)*UNIF*TX(31)*TRACE*TRANSX
                  IF(TMOL.LT.1.E-8)TMOL=0.
                  CALL SSRAD(IPH,IK,MSOFF,IPATH,V,S0,                   &
     &              PFMOL0,PFMOL2,TMOL,TSNOBS,TSNREF,SUMSSS)
                  IF(AMOD3D.NE.'M')GOTO(20,30),IPATH
                  TLH2O=TX(17)*TX(5)
                  TLUMIX=UNIF*TRACE*TRANSX*TX(3)*TX(64)*TX(65)*TX(4)
                  TLO3=TX(31)*TX(8)
                  IF(IPATH.EQ.2)GOTO30
                  CALL MCMOL(IVX,IK-1,IKMAX,NMWAVE,                     &
     &              1.,1.,1.,TLH2O,TLUMIX,TLO3)
                  GOTO 20
              ENDIF
          ELSEIF(IPATH.LT.3)THEN

!             CK SOLAR PATH
              CALL BMCRKS(KNTRVL,INDEXX)
              CALL SSCORK(IPH,IK,MSOFF,IPATH,KNTRVL,V,                  &
     &          S0,PFMOL0,PFMOL2,TSNOBS,SUMSSS)
              GOTO(20,30),IPATH
          ELSE

!             CK OPTICAL (LINE-OF-SIGHT) PATH
              IF(MSOFF.EQ.0 .AND. AMOD3D.EQ.'T')THEN
                  TX14SV=TX(14)
                  TX(14)=TX(80)
                  CALL BMCORK(KNTRVL,IK,MSOFF)
                  TX(14)=TX14SV
                  CALL M3D(IVX,KNTRVL,IK,IKMAX,SUBINT,LNFLRT,FLRT)
              ELSE
                  CALL BMCORK(KNTRVL,IK,MSOFF)
              ENDIF
              IF(IEMSCT.EQ.2)CALL SSCORK(IPH,IK,MSOFF,IPATH,            &
     &          KNTRVL,V,S0,PFMOL0,PFMOL2,TSNOBS,SUMSSS)
          ENDIF

!         INITIALIZE TOTAL TRANSMITTANCE
          TX(9)=0.
          IF(MSOFF.GT.0)THEN

!             SET UP FOR MULTIPLE SCATTERING VERTICAL PATH CALCULATION
              IKP1=IK+1
              BBNDRY(IKP1)=PI*BBFN(TM(IKP1),V)
              DNDRCT(0,IKP1)=0.
              CALL THMFLX(KNTRVL,IK,IKP1,ML,V,                          &
     &          BBGRND,BBNDRY(IK),BBNDRY(IKP1))
              GTSCAT(0,IK)=TX(2)+TX(66)+TX(67)+TX(15)+TX(74)+TX(78)
              GTSCAT(1,IK)=TX(1)+TX(76)+TX(78)*TX(79)
              IF(GTSCAT(0,IK).GT.0.)THEN
                  COSBAR(IK)=GTSCAT(1,IK)/GTSCAT(0,IK)
              ELSE
                  COSBAR(IK)=0.
                  IF(GTSCAT(0,IK).LT.0.)GTSCAT(0,IK)=0.
              ENDIF
              IF(MODTRN .OR. DIS)THEN
                  IF(KNTRVL.EQ.1)THEN

!                     IF MOLECULAR TRANSMITTANCE FROM GROUND IS ZERO,
!                     THE INCREMENTAL OPTICAL DEPTH IS NOT WELL-DEFINED.
!                     IN THIS CASE, THE LAYER OPTICAL DEPTH IS DEFINED
!                     BY REQUIRING THE RATIO OF THE PREVIOUS TO CURRENT
!                     LAYER OPTICAL DEPTHS TO EQUAL THE RATIO OF THE
!                     CONTINUUM OPTICAL DEPTH CONTRIBUTIONS.
                      IF(IK.EQ.1 .OR. DEPLAY(1).LT.BIGEXP)THEN
                          TAUT(1,IK)=DEPLAY(1)
                      ELSE

!                         IF THERE IS A CLOUD LAYER EMBEDDED IN THE
!                         ATMOSPHERE, THE RATIO OF CONTINUUM OPTICAL
!                         DEPTHS FROM NEIGHBORING LAYERS CAN BE VERY
!                         LARGE - A PROBLEM FOR DISORT.  TO PROTECT
!                         AGAINST THIS, A LAYER OPTICAL DEPTH MAXIMUM
!                         OF BIGEXP IS USED.
                          TAUT(1,IK)=XPART+MIN(BIGEXP,                  &
     &                      (TAUT(1,IK-1)-XPART0)*TX(15)/TX15SV)
                      ENDIF
                      TX15SV=TX(15)
                      XPART0=XPART
                  ELSE
                      DO INTRVL=1,KNTRVL
                          TAUT(INTRVL,IK)=DEPLAY(INTRVL)
                      ENDDO
                  ENDIF

!                 NUMERICAL INSTABILITIES CAN CAUSE GTSCAT(0,*)
!                 TO EXCEED TAUT; PROTECT AGAINST THIS ANOMALY.
                  IF(GTSCAT(0,IK).GT.TAUT(1,IK))THEN
                      GTSCAT(0,IK)=TAUT(1,IK)
                      IF(GTSCAT(1,IK).GT.GTSCAT(0,IK))THEN
                          GTSCAT(1,IK)=GTSCAT(0,IK)
                          COSBAR(IK)=1.
                      ENDIF
                  ENDIF
              ELSE
                  TCONT(IK)=TX(12)+TX(13)+TX(15)+TX(75)+TX(77)
              ENDIF

!             INITIALIZE NET FLUX ARRAY
              UPFLX(IK)=0.
              DNFLX(IK)=0.
              UPFLXS(IK)=0.
              DNFLXS(IK)=0.
              NTFLX(IK)=0.
              GOTO50
          ELSEIF(IMULT.EQ.0)THEN

!             NO MULTIPLE SCATTERING.  DEFINE BLACKBODY FUNCTIONS.
              BLAYER=BBFN(TBBY(IK),V)
              BBOUND=BBFN(TPH(IK),V)

!             LOOP OVER CORRELATED-K METHOD SUB-INTERVALS
              SMTRNL=0.
              SMTHML=0.
              DO INTRVL=1,KNTRVL
                  OPTDEP=DEPLAY(INTRVL)
                  IF(OPTDEP.LT..02)THEN
                      THMLAY=OPTDEP*(BLAYER+OPTDEP*(BBOUND-4*BLAYER)/6)
                  ELSE
                      EMSLAY=1.-TRNLAY(INTRVL)
                      THMLAY=EMSLAY*BBOUND+2*(BLAYER-BBOUND)            &
     &                  *(EMSLAY/OPTDEP-TRNLAY(INTRVL))
                  ENDIF
                  SMTHML=SMTHML+SUBINT(INTRVL)*TRNCUM(INTRVL)*THMLAY
                  TRNCUM(INTRVL)=TRNCUM(INTRVL)*TRNLAY(INTRVL)
                  TX(9)=TX(9)+SUBINT(INTRVL)*TRNCUM(INTRVL)
                  SMTRNL=SMTRNL+SUBINT(INTRVL)*TRNLAY(INTRVL)
              ENDDO
              RADCUM=RADCUM+SMTHML

!             IF NOPRNT=-1, PRINT WEIGHTING FUNCTION DATA.
              IF(.NOT.LJMASS .AND. NOPRNT.LE.-1)WRITE(IPR1,             &
     &          '(I7,2F10.5,3X,2(1P,2E11.3,0P,2F11.7))')IVX,AHT(IK),    &
     &          AHT(IK+1),BLAYER,BBOUND,TX(9),SMTRNL,SMTHML,RADCUM
          ELSEIF(DIS)THEN

!             DISORT (DISCRETE ORDINATE) MULTIPLE SCATTERING
              N=IMAP(IK)
              SMTRNL=0.
              SMTHML=0.
              SMSOLL=0.
              DO INTRVL=1,KNTRVL
                  DTAU=1.-TRNLAY(INTRVL)

!                 THE DISORT THERMAL (T0CMS) AND SOLAR (S0CMS)
!                 SOURCE TERMS HAVE BEEN STORED IN THE UPF AND
!                 UPFS ARRAYS, RESPECTIVELY.
                  THMLAY=DTAU*UPF(INTRVL,N)
                  SOLLAY=DTAU*UPFS(INTRVL,N)
                  WTTRAN=SUBINT(INTRVL)*TRNCUM(INTRVL)
                  RADCUM=RADCUM+WTTRAN*THMLAY
                  SUMMS=SUMMS+WTTRAN*SOLLAY
                  TRNCUM(INTRVL)=TRNCUM(INTRVL)*TRNLAY(INTRVL)
                  TX(9)=TX(9)+SUBINT(INTRVL)*TRNCUM(INTRVL)
                  SMTRNL=SMTRNL+SUBINT(INTRVL)*TRNLAY(INTRVL)
                  SMTHML=SMTHML+SUBINT(INTRVL)*THMLAY
                  SMSOLL=SMSOLL+SUBINT(INTRVL)*SOLLAY
              ENDDO
              IF(NOPRNT.LE.-1)THEN

!                 INTERPOLATE FLUXES IF PATH SEGMENT DOES
!                 NOT TERMINATE AT A LAYER BOUNDARY.
                  IKP1=IK+1
                  N=LOWAHT(IKP1)
                  IF(.NOT.LJMASS) THEN
                      IF(FACAHT(IKP1).EQ.0.)THEN
                          WRITE(IPR1,'(I6,F8.3,2F9.6,1X,1P,9E11.4)')    &
     &                      IVX,AHT(IKP1),TX(9),SMTRNL,NTFLX(N),        &
     &                      UPFLX(N),DNFLX(N),SMTHML,RADCUM,            &
     &                      UPFLXS(N),DNFLXS(N),SMSOLL,SUMMS
                      ELSE
                          NP1=N+1
                          WRITE(IPR1,'(I6,F8.3,2F9.6,1X,1P,9E11.4)')    &
     &                      IVX,AHT(IKP1),TX(9),SMTRNL,                 &
     &                      NTFLX(N)+FACAHT(IKP1)*(NTFLX(NP1)-NTFLX(N)),&
     &                      UPFLX(N)+FACAHT(IKP1)*(UPFLX(NP1)-UPFLX(N)),&
     &                      DNFLX(N)+FACAHT(IKP1)*(DNFLX(NP1)-DNFLX(N)),&
     &                      SMTHML,RADCUM,UPFLXS(N)+FACAHT(IKP1)        &
     &                      *(UPFLXS(NP1)-UPFLXS(N)),                   &
     &                      DNFLXS(N)+FACAHT(IKP1)                      &
     &                      *(DNFLXS(NP1)-DNFLXS(N)),SMSOLL,SUMMS
                      ENDIF
                  ENDIF
              ENDIF
          ELSE

!             TWO-FLUX MULTIPLE SCATTERING.  DEFINE BLACKBODY FUNCTIONS.
              BLAYER=BBFN(TBBY(IK),V)
              BBOUND=BBFN(TPH(IK),V)
              N=IMAP(IK)
              B0=.5
              IF(COSBAR(N).NE.0.)B0=BETABS(QTHETA(IK),COSBAR(N))
              UP=B0/PI
              DN=(1.-B0)/PI
              NFRNTL=LOWAHT(IK)
              NFRNTH=NFRNTL+1
              NBACKL=LOWAHT(IK+1)
              NBACKH=NBACKL+1

!             LOOP OVER CORRELATED-K METHOD SUB-INTERVALS
              SMTRNL=0.
              SMTHML=0.
              SMSOLL=0.
              DO INTRVL=1,KNTRVL
                  OMEGA=0.
                  IF(TAUT(INTRVL,N).GT.0.)                              &
     &              OMEGA=GTSCAT(0,N)/TAUT(INTRVL,N)

!                 FLUXES AT FRONT OF PATH SEGMENT:
                  UFRNT=UPF(INTRVL,NFRNTL)
                  DFRNT=DNF(INTRVL,NFRNTL)
                  UFRNTS=UPFS(INTRVL,NFRNTL)
                  DFRNTS=DNFS(INTRVL,NFRNTL)
                  IF(FACAHT(IK).NE.0.)THEN

!                     INTERPOLATE FLUXES TO ALTITUDE AHT(IK):
                      FACTOR=FACAHT(IK)
                      UFRNT=UFRNT+FACTOR*(UPF(INTRVL,NFRNTH)-UFRNT)
                      DFRNT=DFRNT+FACTOR*(DNF(INTRVL,NFRNTH)-DFRNT)
                      UFRNTS=UFRNTS+FACTOR*(UPFS(INTRVL,NFRNTH)-UFRNTS)
                      DFRNTS=DFRNTS+FACTOR*(DNFS(INTRVL,NFRNTH)-DFRNTS)
                  ENDIF

!                 FLUXES AT BACK OF PATH SEGMENT:
                  UBACK=UPF(INTRVL,NBACKL)
                  DBACK=DNF(INTRVL,NBACKL)
                  UBACKS=UPFS(INTRVL,NBACKL)
                  DBACKS=DNFS(INTRVL,NBACKL)
                  IF(FACAHT(IK+1).NE.0.)THEN

!                     INTERPOLATE FLUXES TO ALTITUDE AHT(IK+1):
                      FACTOR=FACAHT(IK+1)
                      UBACK=UBACK+FACTOR*(UPF(INTRVL,NBACKH)-UBACK)
                      DBACK=DBACK+FACTOR*(DNF(INTRVL,NBACKH)-DBACK)
                      UBACKS=UBACKS+FACTOR*(UPFS(INTRVL,NBACKH)-UBACKS)
                      DBACKS=DBACKS+FACTOR*(DNFS(INTRVL,NBACKH)-DBACKS)
                  ENDIF

!                 THERMAL AND SOLAR SOURCE TERMS.
                  THMBND=UP*UFRNT+DN*DFRNT
                  SOLBND=UP*UFRNTS+DN*DFRNTS
                  THMDIF=UP*(UBACK-UFRNT)+DN*(DBACK-DFRNT)
                  SOLDIF=UP*(UBACKS-UFRNTS)+DN*(DBACKS-DFRNTS)
                  OPTDEP=DEPLAY(INTRVL)
                  IF(OPTDEP.LT..02)THEN
                      BNCOEF=OPTDEP*(1.-.5*OPTDEP)
                      DFCOEF=OPTDEP*(.5-OPTDEP/3.)
                  ELSE
                      BNCOEF=1.-TRNLAY(INTRVL)
                      DFCOEF=BNCOEF/OPTDEP-TRNLAY(INTRVL)
                  ENDIF
                  THMSCT=OMEGA*(BNCOEF*THMBND+DFCOEF*THMDIF)
                  THMLAY=THMSCT                                         &
     &              +(1.-OMEGA)*(BNCOEF*BBOUND+2*DFCOEF*(BLAYER-BBOUND))
                  SOLLAY=OMEGA*(BNCOEF*SOLBND+DFCOEF*SOLDIF)
                  WTTRAN=SUBINT(INTRVL)*TRNCUM(INTRVL)
                  RADCUM=RADCUM+WTTRAN*THMLAY
                  SUMTMS=SUMTMS+WTTRAN*THMSCT
                  SUMMS=SUMMS+WTTRAN*SOLLAY
                  TRNCUM(INTRVL)=TRNCUM(INTRVL)*TRNLAY(INTRVL)
                  TX(9)=TX(9)+SUBINT(INTRVL)*TRNCUM(INTRVL)
                  SMTRNL=SMTRNL+SUBINT(INTRVL)*TRNLAY(INTRVL)
                  SMTHML=SMTHML+SUBINT(INTRVL)*THMLAY
                  SMSOLL=SMSOLL+SUBINT(INTRVL)*SOLLAY
              ENDDO
              IF(NOPRNT.LE.-1)THEN

!                 INTERPOLATE FLUXES IF PATH SEGMENT DOES
!                 NOT TERMINATE AT A LAYER BOUNDARY.
                  IKP1=IK+1
                  N=LOWAHT(IKP1)
                  IF(FACAHT(IKP1).EQ.0.)THEN
                      WRITE(IPR1,'(I6,F8.3,2F9.6,1X,1P,9E11.4)')        &
     &                  IVX,AHT(IKP1),TX(9),SMTRNL,NTFLX(N),            &
     &                  UPFLX(N),DNFLX(N),SMTHML,RADCUM,                &
     &                  UPFLXS(N),DNFLXS(N),SMSOLL,SUMMS
                  ELSE
                      NP1=N+1
                      WRITE(IPR1,'(I6,F8.3,2F9.6,1X,1P,9E11.4)')        &
     &                  IVX,AHT(IKP1),TX(9),SMTRNL,                     &
     &                  NTFLX(N)+FACAHT(IKP1)*(NTFLX(NP1)-NTFLX(N)),    &
     &                  UPFLX(N)+FACAHT(IKP1)*(UPFLX(NP1)-UPFLX(N)),    &
     &                  DNFLX(N)+FACAHT(IKP1)*(DNFLX(NP1)-DNFLX(N)),    &
     &                  SMTHML,RADCUM,                                  &
     &                  UPFLXS(N)+FACAHT(IKP1)*(UPFLXS(NP1)-UPFLXS(N)), &
     &                  DNFLXS(N)+FACAHT(IKP1)*(DNFLXS(NP1)-DNFLXS(N)), &
     &                  SMSOLL,SUMMS
                  ENDIF
              ENDIF
          ENDIF

!         IF TOTAL TRANSMISSION HAS DROPPED TO ZERO AND IVTEST IS
!         FALSE, EXIT LAYER LOOP UNLESS THE CORRELATED-K APPROACH
!         IS BEING USED AND WEIGHTING FUNCTIONS ARE BEING PRINTED.
          IF(TX(9).LE.0. .AND. .NOT.IVTEST .AND. AMOD3D.EQ.' ' .AND.    &
     &      (KNTRVL.EQ.1 .OR. NOPRNT.LE.-1))GOTO60
   50 CONTINUE

!     LAYER LOOP EXIT
   60 CONTINUE
      IF(MSOFF.GT.0)THEN

!         CALCULATE SOLAR AND THERMAL FLUXES.
          UPFLX(ML)=0.
          DNFLX(ML)=0.
          UPFLXS(ML)=0.
          DNFLXS(ML)=0.
          NTFLX(ML)=0.
          IF(DIS)THEN
              CALL MSRAD(V,S0,KNTRVL,NUM_LRES,SOLAR_FLUX,DIFFUSE_FLUX,  &
     &                   NUM_LEVS,FLX_UPDIFFUSE,FLX_DNDIFFUSE,          &
     &                   FLX_DNDIRECT)

!             CALCULATE COOLING RATES.
              IF(ML.GE.4)CALL COOL(IVX)
              IF(NOPRNT.LE.-1 .AND. .NOT.LJMASS)THEN
                  N=LOWAHT(1)
                  IF(FACAHT(1).EQ.0.)THEN
                      WRITE(IPR1,'(/(I6,0P,F8.3,A,1P,3E11.4,22X,        &
     &                  2E11.4))')IVX,AHT(1),' 1.000000          ',     &
     &                  NTFLX(N),UPFLX(N),DNFLX(N),UPFLXS(N),DNFLXS(N)
                  ELSE
                      NP1=N+1
                      WRITE(IPR1,'(/(I6,0P,F8.3,A,1P,3E11.4,22X,        &
     &                  2E11.4))')IVX,AHT(1),' 1.000000          ',     &
     &                  NTFLX(N)+FACAHT(1)*(NTFLX(NP1)-NTFLX(N)),       &
     &                  UPFLX(N)+FACAHT(1)*(UPFLX(NP1)-UPFLX(N)),       &
     &                  DNFLX(N)+FACAHT(1)*(DNFLX(NP1)-DNFLX(N)),       &
     &                  UPFLXS(N)+FACAHT(1)*(UPFLXS(NP1)-UPFLXS(N)),    &
     &                  DNFLXS(N)+FACAHT(1)*(DNFLXS(NP1)-DNFLXS(N))
                  ENDIF
              ENDIF
          ELSE
              IF(MODTRN)THEN
                  CALL BMFLUX(V,ML,KNTRVL,IEMSCT,AASALB,AADREF,S0,      &
     &                        NUM_LRES,SOLAR_FLUX,NUM_LEVS,             &
     &                        FLX_UPDIFFUSE,FLX_DNDIFFUSE,              &
     &                        FLX_DNDIRECT)

!                 CALCULATE COOLING RATES.
                  IF(ML.GE.4)CALL COOL(IVX)
              ELSE
                  CALL FLXADD(ML,IEMSCT,AASALB,AADREF)
              ENDIF
              IF(NOPRNT.LE.-1 .AND. .NOT.LJMASS)THEN
                  N=LOWAHT(1)
                  IF(FACAHT(1).EQ.0.)THEN
                      WRITE(IPR1,'(/(I6,0P,F8.3,A,1P,3E11.4,22X,        &
     &                  2E11.4))')IVX,AHT(1),' 1.000000          ',     &
     &                  NTFLX(N),UPFLX(N),DNFLX(N),UPFLXS(N),DNFLXS(N)
                  ELSE
                      NP1=N+1
                      WRITE(IPR1,'(/(I6,0P,F8.3,A,1P,3E11.4,22X,        &
     &                  2E11.4))')IVX,AHT(1),' 1.000000          ',     &
     &                  NTFLX(N)+FACAHT(1)*(NTFLX(NP1)-NTFLX(N)),       &
     &                  UPFLX(N)+FACAHT(1)*(UPFLX(NP1)-UPFLX(N)),       &
     &                  DNFLX(N)+FACAHT(1)*(DNFLX(NP1)-DNFLX(N)),       &
     &                  UPFLXS(N)+FACAHT(1)*(UPFLXS(NP1)-UPFLXS(N)),    &
     &                  DNFLXS(N)+FACAHT(1)*(DNFLXS(NP1)-DNFLXS(N))
                  ENDIF
              ENDIF
          ENDIF

!         VERTICAL PATH COMPLETE.  NOW PERFORM OPTICAL PATH CALCULATIONS
          IKMAX=IKMX
          MSOFF=0
          IK=-1
          GOTO10
      ELSE
          IF(IEMSCT.EQ.2 .AND. KNTRVL.GT.1)THEN
              IK=IKMAX+1
              TSNREF=SUBINT(1)*S0TRN(1,IK)*TRNCUM(1)

!             IF THE GROUND SCATTERING POINT IS IN SHADOW, THE GROUND
!             REFLECTED SOLAR IRRADIANCE, TSNREF, IS ZERO.
              IF(TSNREF.GT.0.)THEN
                  DO INTRVL=2,KNTRVL
                      TSNREF=TSNREF+SUBINT(INTRVL)*                     &
     &                  S0TRN(INTRVL,IK)*TRNCUM(INTRVL)
                  ENDDO
              ENDIF
          ENDIF
          IF(GROUND .AND. IMULT.NE.0)THEN

!             CALCULATE TRANSMITTED GROUND THERMAL AND SOLAR FLUXES
!             (ASSUME ISOTROPIC SURFACE ILLUMINATION FROM DIFFUSE FLUX).
              FDNTRT=0.
              FDNSRT=0.
              FACTOR=TPHDIR/PI
              DO INTRVL=1,KNTRVL
                  COEF=SUBINT(INTRVL)*TRNCUM(INTRVL)
                  FDNTRT=FDNTRT+COEF*DNF(INTRVL,1)
                  FDNSRT=FDNSRT+COEF*DNFS(INTRVL,1)
              ENDDO
              FDNTRT=FACTOR*FDNTRT
              FDNSRT=FACTOR*FDNSRT
          ENDIF
      ENDIF
      RETURN
      END
