      SUBROUTINE DRIVER(TPTEMP_INPUT, CO2MX_INPUT, GNDALT_INPUT,        &
     &                  DAY_INPUT, LATITUDE_INPUT, LONGITUDE_INPUT,     &
     &                  GMT_INPUT, A_FLAG, FULL_ATM,V1_INPUT,V2_INPUT,  &
     &                  LAND_FLAG,BRDF_LEN,BRDF_WVL,BRDF_PARAM,         &
     &                  BRDF_FLAG,C_FLAG,NUM_LEVS,                      &
     &                  M_AEROSOL,O_AEROSOL,M_CLOUD_LIQ,                &
     &                  M_CLOUD_ICE,WVL_CLD,EXT_LIQ_CLD,                &
     &                  SSA_LIQ_CLD,ASYM_LIQ_CLD,                       &
     &                  EXT_ICE_CLD,SSA_ICE_CLD,ASYM_ICE_CLD,Z_CLD_VAL, &
     &                  AC_WAVELEN,FILE_NAME,                           &
     &                  WVLNGTH_LRES,RADIANCE_LRES,WV_HRES,             &
     &                  RADIANCE_HRES,NUM_LRES,NUM_HRES,NUM_AC_WVL,     &
     &                  SOLAR_FLUX,ICE_FLAG,PFS,PHASE_WVLS,             &
     &                  PHASE_ANGLES,DIFFUSE_FLUX,SOLAR_ZENITH,         &
     &                  IN_LENGTH,DV_INPUT) 
 

!     PARAMETERS:
      INCLUDE 'PARAMS.h'
      INCLUDE 'ERROR.h'

!     COMMONS:
      INCLUDE 'IFIL.h'
      INCLUDE 'BASE.h'
      INCLUDE 'BMHEAD.h'

!     /CARD1/
      INTEGER MODEL,ITYPE,IEMSCT,M1,M2,M3,IM,NOPRNT
      LOGICAL MODTRN
      COMMON/CARD1/MODEL,ITYPE,IEMSCT,M1,M2,M3,IM,NOPRNT,MODTRN

!     /SURFWV/
!       LAMBER  LOGICAL FLAG, .TRUE. FOR LAMBERTIAN SURFACE.
!       TPTEMP  TARGET-PIXEL SURFACE TEMPERATURES [K].
!       TPHDIR  TARGET-PIXEL HEMISPHERE DIRECTIONAL REFLECTANCE AT
!               VIEWING ANGLE.
!       TPBRDF  TARGET-PIXEL BIDIRECTIONAL REFLECTANCE DISTRIBUTION
!               FUNCTION AT VIEWING AND SUN ANGLE.
!       AATEMP  AREA-AVERAGED GROUND SURFACE TEMPERATURES [K].
!       AASALB  AREA-AVERAGED GROUND SURFACE ALBEDO.
!       AADREF  AREA-AVERAGED GROUND SURFACE DIRECTIONAL REFLECTIVITY
!               AT THE SOLAR ZENITH ANGLE.
!       EMU     GROUND DIRECTIONAL EMISSIVITY AT VIEWING ANGLE.
!       BEM     GROUND DIRECTIONAL EMISSIVITY AT QUADRATURE ANGLE.
!       RMU     GROUND BRDF AZIMUTH COMPONENTS AT VIEWING ANGLE
!               AND AT SUN (=0) OR QUADRATURE (>0) ANGLE.
!       BDR     GROUND BRDF AZIMUTH COMPONENTS AT QUADRATURE ANGLE
!               AND AT SUN (=0) OR QUADRATURE (>0) ANGLE.
      LOGICAL LAMBER
      REAL TPTEMP,TPHDIR,TPBRDF,AATEMP,AASALB,AADREF,EMU,BEM,RMU,BDR
      COMMON/SURFWV/LAMBER,TPTEMP,TPHDIR,TPBRDF,AATEMP,AASALB,AADREF,   &
     &  EMU(MXUMU),BEM(MI),RMU(1:MXUMU,0:MI,0:MAZ),BDR(1:MI,0:MI,0:MAZ)

!     /CARD1A/
      INTEGER M4,M5,M6,MDEF,IRD1,IRD2
      COMMON/CARD1A/M4,M5,M6,MDEF,IRD1,IRD2
      INTEGER IHAZE,ISEASN,IVULCN,ICSTL,ICLD,IVSA
      REAL VIS,WSS,WHH,RAINRT
      COMMON/CARD2/IHAZE,ISEASN,IVULCN,ICSTL,ICLD,IVSA,                 &
     &  VIS,WSS,WHH,RAINRT
      INTEGER NCRALT,NCRSPC
      REAL CTHIK,CALT,CEXT,CWAVLN,CCOLWD,CCOLIP,CHUMID,ASYMWD,ASYMIP
      COMMON/CARD2A/CTHIK,CALT,CEXT,NCRALT,NCRSPC,                      &
     &  CWAVLN,CCOLWD,CCOLIP,CHUMID,ASYMWD,ASYMIP
      INTEGER IREG,IREGC
      REAL ALTB
      COMMON/CARD2D/IREG(4),ALTB(4),IREGC(4)

!     /CARD3/
!       H1      OBSERVER (SENSOR) ALTITUDE [KM].
!       H2      FINAL (TARGET) ALTITUDE [KM].
!       ANGLE   ZENITH ANGLE FROM H1 TO H2 [DEG].
!       RANGE   DISTANCE FROM H1 TO H2 [KM].
!       BETA    EARTH CENTER ANGLE BETWEEN H1 AND H2 [DEG].
!       REE     RADIUS OF THE EARTH [KM].
!       LENN    PATH LENGTH SWITCH (0=SHORT, 1=LONG).
      INTEGER LENN
      REAL H1,H2,ANGLE,RANGE,BETA,REE
      COMMON/CARD3/H1,H2,ANGLE,RANGE,BETA,REE,LENN
      INTEGER IPH
      REAL G
      COMMON/CARD3A/IPH,G

!     /CARD4/
!       IV1      LOWEST FREQUENCY OUTPUT [CM-1].
!       IV2      HIGHEST FREQUENCY OUTPUT [CM-1].
!       IDV      PRINTOUT FREQUENCY STEP SIZE [CM-1].
!       IFWHM    TRIANGULAR SLIT FULL-WIDTH-HALF-MAXIMUM [CM-1].
!       IVX      CURRENT COMPUTATION FREQUENCY [CM-1].
!       IVOFF    OFFSET BETWEEN COMPUTATION AND OUTPUT FREQUENCIES,
!                REQUIRED FOR SLIT FUNCTION [CM-1].
!       IWRITE   COMPUTATION FREQUENCY OF NEXT WRITE [CM-1].
!       NSPCDT   NUMBER OF OUTPUT SPECTRAL DATA POINTS.
!       NWGT     NUMBER OF SPECTRAL BINS CONTRIBUTING TO SLIT FUNCTION.
!       WGT      NORMALIZED WEIGHTS USED TO DEFINE THE SLIT FUNCTION.
      INTEGER IV1,IV2,IDV,IFWHM,IVX,IVOFF,IWRITE,NSPCDT,NWGT
      REAL WGT
      COMMON/CARD4/IV1,IV2,IDV,IFWHM,IVX,IVOFF,IWRITE,NSPCDT,           &
     &  NWGT,WGT(NBINS)

!     COMMON/RCNSTN/
!       PI       THE CONSTANT PI
!       DEG      NUMBER OF DEGREES IN ONE RADIAN.
!       BIGNUM   MAXIMUM SINGLE PRECISION NUMBER.
!       BIGEXP   MAXIMUM EXPONENTIAL ARGUMENT WITHOUT OVERFLOW.
!       RRIGHT   SMALLEST SINGLE PRECISION REAL ADDED TO 1 EXCEEDS 1.
      REAL PI,DEG,BIGNUM,BIGEXP,RRIGHT
      COMMON/RCNSTN/PI,DEG,BIGNUM,BIGEXP,RRIGHT

!     COMMON/SCAN/
!       V1       LOWER BOUND ON SPECTRAL RANGE [CHUNIT DEFINES UNIT].
!       V2       UPPER BOUND ON SPECTRAL RANGE [CHUNIT DEFINES UNIT].
!       DV       SPECTRAL STEP SIZE FOR OUTPUT [CHUNIT DEFINES UNIT].
!       FWHM     FULL-WIDTH-AT-HALF-MAXIMUM [CHUNIT DEFINES UNIT].
!       FWHMSQ   TRIANGULAR SLIT NORMALIZATION FACTOR
!                (EQUALS FWHM SQUARED) [CHUNIT DEFINES UNIT].
!       VOUT     CURRENT SPECTRAL OUTPUT [CHUNIT DEFINES UNIT].
      REAL V1,V2,DV,FWHM,FWHMSQ,VOUT
      COMMON/SCAN/V1,V2,DV,FWHM,FWHMSQ,VOUT

!     COMMON/DCNSTN/
!       DRIGHT   SMALLEST DOUBLE PRECISION REAL ADDED TO 1 EXCEEDS 1.
      DOUBLE PRECISION DRIGHT
      COMMON/DCNSTN/DRIGHT

!     /CNTRL/
!       IKMAX    NUMBER OF PATH SEGMENTS ALONG LINE-OF-SIGHT.
!       ML       NUMBER OF ATMOSPHERIC PROFILE LEVELS.
!       MLFLX    NUMBER OF LEVELS FOR WHICH FLUX VALUES ARE WRITTEN.
!       ISSGEO   LINE-OF-SIGHT FLAG (0 = SENSOR PATH, 1 = SOLAR PATHS).
!       IMULT    MULTIPLE SCATTERING FLAG
!                  (0=NONE, 1=AT SENSOR, -1=AT FINAL OR TANGENT POINT).
      INTEGER IKMAX,ML,MLFLX,ISSGEO,IMULT
      COMMON/CNTRL/IKMAX,ML,MLFLX,ISSGEO,IMULT

!     /MODEL/
!       ZM       PROFILE BOUNDARY ALTITUDES [KM].
!       PM       PROFILE BOUNDARY PRESSURES [MBAR].
!       TM       PROFILE BOUNDARY TEMPERATURES [K].
!       RFNDX    PROFILE BOUNDARY REFRACTIVITIES.
!       DENSTY   PROFILE BOUNDARY DENSITIES [UNITS DEPEND ON SPECIES].
!       LRHSET   FLAG, TRUE IF RELATIVE HUMIDITY CANNOT BE SCALED.
      REAL ZM,PM,TM,RFNDX,DENSTY
      LOGICAL LRHSET
      COMMON/MODEL/ZM(LAYDIM),PM(LAYDIM),TM(LAYDIM),                    &
     &  RFNDX(LAYDIM),DENSTY(MEXT,LAYDIM),LRHSET(LAYDIM)
      INCLUDE 'SOLS.h'

!     /USRDTA/
      INTEGER NAERF,NWLF
      REAL WLF,F
      COMMON/USRDTA/NAERF,NWLF,WLF(MWLF),F(MAERF,MANGLS,MWLF)
      REAL HMDLZ
      COMMON/MDLZ/HMDLZ(8)
      INTEGER IHVSA
      REAL ZVSA,RHVSA,AHVSA
      COMMON/ZVSALY/ZVSA(10),RHVSA(10),AHVSA(10),IHVSA(10)
      CHARACTER*20 HHAZE(16),HSEASN(2),HVULCN(8),HMET(2),HMODEL(8)
      CHARACTER*26 HTRRAD(4)
      COMMON/TITL/HHAZE,HSEASN,HVULCN,HMET,HMODEL,HTRRAD
      REAL VSB
      COMMON/VSBD/VSB(10)

!     /PATH/
!       QTHETA  COSINE OF PATH ZENITH AT PATH BOUNDARIES.
!       AHT     ALTITUDES AT PATH BOUNDARIES [KM].
!       IHT     ALTITUDES AT PATH BOUNDARIES [M].
!       TPH     TEMPERATURE AT PATH BOUNDARIES [K].
!       IMAP    MAPPING FROM PATH SEGMENT MIDPOINT TO VERTICAL LAYER.
!       LOWAHT  INDEX OF VERTICAL LAYER BOUNDARY AT OR JUST BELOW AHT.
!       FACAHT  ALTITUDE INTERPOLATION FRACTION FOR AHT.
      INTEGER IHT,IMAP,LOWAHT
      REAL QTHETA,AHT,TPH,FACAHT
      COMMON/PATH/QTHETA(LAYTWO),AHT(LAYTWO),IHT(0:LAYTWO),             &
     &  TPH(LAYTWO),IMAP(LAYTWO),LOWAHT(LAYTWO),FACAHT(LAYTWO)
      REAL GNDALT
      COMMON/GRAUND/GNDALT

!     /SAVEMS/
!       LUSEMS  LOGICAL, TRUE IF MULTIPLE SCATTERING DATA IS REUSED.
!       LSAVMS  LOGICAL, TRUE IF MULTIPLE SCATTERING DATA IS  SAVED.
      LOGICAL LUSEMS,LSAVMS
      COMMON/SAVEMS/LUSEMS,LSAVMS
      REAL CO2RAT
      COMMON/CO2MIX/CO2RAT

!     /USSPC/
      INTEGER NARSPC
      REAL VARSPC
      LOGICAL ARUSSL
      COMMON/USSPC/NARSPC(4),VARSPC(4,NWAVLN),ARUSSL

!     /COMNOV/
!       LNOVAM   LOGICAL FLAG, .TRUE. IF NOVAM AEROSOLS ARE USED.
      LOGICAL LNOVAM
      REAL EXTNOV(MNOV,MXWVLN),ABSNOV(MNOV,MXWVLN),                     &
     &  ASMNOV(MNOV,MXWVLN),WLNOV(MXWVLN)
      INTEGER NNOV,NWLNOV
      COMMON/COMNOV/LNOVAM,EXTNOV,ABSNOV,ASMNOV,WLNOV,NNOV,NWLNOV

!     COMMON /CFLAGS/
!       YFLAG    Y COORDINATE FLAG FOR plot.dat FILE
!                  = "T" FOR TRANSMITTANCE
!                  = "R" FOR RADIANCE (IRRADIANCE FOR IEMSCT=3)
!                  = "N" FOR NO plot.dat OUTPUT
!       XFLAG    X COORDINATE FLAG FOR plot.dat FILE
!                  = "W" FOR FREQUENCY IN WAVENUMBERS (CM-1) AND
!                        RADIANCE IN W SR-1 CM-2 / CM-1
!                  = "M" FOR WAVELENGTH IN MICRONS AND
!                        RADIANCE IN W SR-1 CM-2 / MICRON
!                  = "N" FOR WAVELENGTH IN NANOMETERS AND
!                        RADIANCE IN MICRO-WATTS SR-1 CM-2 / NANOMETER
!       DLIMIT   DELIMITER CHARACTER STRING BETWEEN MODTRAN RUNS
!       FLAGS    SCANNING FUNCTION FLAGS.
      CHARACTER YFLAG*1,XFLAG*1,DLIMIT*8,FLAGS*7
      COMMON/CFLAGS/YFLAG,XFLAG,DLIMIT,FLAGS

!     /DISRT/
!       DIS      LOGICAL FLAG, TRUE FOR DISORT MULTIPLE SCATTERING.
!       DISAZM   LOGICAL FLAG, TRUE FOR DISORT WITH AZIMUTH DEPENDENCE.
!       DISALB   LOGICAL FLAG, TRUE FOR DISORT SPHERICAL ALBEDO OPTION.
!       LDISCL   LOGICAL FLAG, TRUE FOR ISAACS SCALED TO DISORT.
!       NSTR     NUMBER OF DISCRETE ORDINATE STREAMS.
!       NAZ      NUMBER OF DISORT AZIMUTH COMPONENTS.
!       N2GAUS   ORDER OF DOUBLE-GAUSS QUADRATURES.
      LOGICAL DIS,DISAZM,DISALB,LDISCL
      INTEGER NSTR,NAZ,N2GAUS
      COMMON/DISRT/DIS,DISAZM,DISALB,LDISCL,NSTR,NAZ,N2GAUS

!     /JM1/
!       CODE     CODE INPUT FLAG: 'F' OR 'L' FOR LOWTRAN BAND MODEL.
!                                 'T' OR 'M' FOR MODTRAN BAND MODEL.
!                                 'C' OR 'K' FOR CORRELATED-K MODEL.
!       SPEED    COMPUTATIONAL SPEED FLAG USED WITH CK MODEL ['F' OR '2'
!                FOR FAST (12 K'S), 'M' OR '1' FOR MODERATE (17 K'S),
!                AND 'S' OR '0' FOR SLOW (33 K'S); 'S' IS DEFAULT]
!       DISSTR   CHARACTER STRING USED TO READ IN DISORT LOGICALS.
!       SURREF   SURFACE REFLECTANCE CHARACTER STRING.
!                IF FIRST NON-BLANK CHARACTER IS "B",
!                  BI-DIRECTIONAL REFLECTANCE DISTRIBUTION
!                  FUNCTION (BRDF) DATA IS READ IN.
!                IF FIRST NON-BLANK CHARACTER IS "L" OR "-"
!                  SURFACE IS MODELED AS A LAMBERTIAN REFLECTOR AND
!                  SPECTRAL ALBEDO IS READ FROM FILE "DATA/spec_alb.dat"
!                OTHERWISE, THE CHARACTER STRING IS ASSUMED TO CONTAIN
!                  A SPECTRALLY INDEPENDENT VALUE FOR SURFACE ALBEDO.
      CHARACTER*1 CODE,SPEED
      CHARACTER*7 SURREF
      COMMON/JM1/CODE,SPEED,SURREF

!     /JM1A1/
!       DISSTR   CHARACTER STRING USED TO READ IN DISORT LOGICALS.
!       H2OSTR   VERTICAL WATER COLUMN CHARACTER STRING (IF THE
!                FIRST NON-BLANK CHARACTER IS A "G", THE WATER
!                COLUMN IN GM/CM2 FOLLOWS "G"; IF THE FIRST
!                NON-BLANK CHARACTER IS AN "A", THE WATER COLUMN
!                IN ATM-CM AT 273.15K FOLLOWS "A"; OTHERWISE THE
!                STRING CONTAINS A WATER COLUMN SCALING FACTOR).
!       O3STR    VERTICAL OZONE COLUMN CHARACTER STRING (IF THE
!                FIRST NON-BLANK CHARACTER IS A "G", THE OZONE
!                COLUMN IN GM/CM2 FOLLOWS "G"; IF THE FIRST
!                NON-BLANK CHARACTER IS AN "A", THE OZONE COLUMN
!                IN ATM-CM AT 273.15K FOLLOWS "A"; OTHERWISE THE
!                STRING CONTAINS AN OZONE COLUMN SCALING FACTOR).
!       SUNFL2   TOP-OF-ATMOSPHERE SPECTRAL SOLAR IRRADIANCES FILE NAME.
!       BMNAME   NAME OF MOLECULAR BAND MODEL PARAMETERS FILE.
!       FILTNM   NAME OF FILTER RESPONSE FUNCTION FILE.
!       H2OAER   FLAG, TRUE IF DEFAULT AEROSOL PROPERTIES ARE REVISED
!                BASED ON WATER COLUMN SCALING.
!       DATDIR   NAME OF THE MODTRAN DATA DIRECTORY.
      CHARACTER*3 DISSTR
      CHARACTER*10 H2OSTR,O3STR
      CHARACTER*(NAMLEN) SUNFL2,FILTNM,BMNAME
      CHARACTER*1 H2OAER
      CHARACTER*(NAMLEN-12) DATDIR
      COMMON/JM1A1/DISSTR,H2OSTR,O3STR,SUNFL2,                          &
     &  FILTNM,BMNAME,H2OAER,DATDIR

!     /JM1A2/
!       SOLCON   SOLAR CONSTANT (ACTUAL VALUE IF POSITIVE,
!                                SCALE FACTOR IF NEGATIVE).
      LOGICAL LSUN
      INTEGER ISUN
      REAL CO2MX,SOLCON
      COMMON/JM1A2/LSUN,ISUN,CO2MX,SOLCON

!     /JM2/
      CHARACTER APLUS*2,CNOVAM*1,ARUSS*3
      COMMON/JM2/APLUS,CNOVAM,ARUSS

!     /JM2APLUS/
      REAL ZAER11,ZAER12,SCALE1,ZAER21,ZAER22,SCALE2,                   &
     &  ZAER31,ZAER32,SCALE3,ZAER41,ZAER42,SCALE4
      COMMON/JM2APLUS/ZAER11,ZAER12,SCALE1,ZAER21,ZAER22,SCALE2,        &
     &  ZAER31,ZAER32,SCALE3,ZAER41,ZAER42,SCALE4

!     /CARD2B/
      REAL ZCVSA,ZTVSA,ZINVSA
      COMMON/CARD2B/ZCVSA,ZTVSA,ZINVSA

!     /JM3/
!       PHI      ZENITH ANGLE AT TARGET (H2) TO OBSERVER (H1) [DEG].
!                BASED ON WATER COLUMN SCALING.
      REAL PHI,RO,ANGLEM
      INTEGER IDAY,ISOURC
      COMMON/JM3/PHI,RO,ANGLEM,IDAY,ISOURC

!     /JM3A1/
      INTEGER IPARM
      COMMON/JM3A1/IPARM

!     /JM3A2/
      REAL PARM1,PARM2,PARM3,PARM4,TIME,PSIPO
      COMMON/JM3A2/PARM1,PARM2,PARM3,PARM4,TIME,PSIPO

!     /JM5/
!       IRPT     REPEAT INPUT FLAG (0=NONE, 1=ALL, 3=GEOM, 4=SPEC).
!       IFAC     CURRENT COLUMN SCALING FACTOR INDEX.
!       NFACMN   NUMBER OF COLUMN SCALING FACTOR LESS THAN 1.
!       NFACMX   NUMBER OF COLUMN SCALING FACTOR GREATER THAN 1.
!       FACMC    CURRENT COLUMN SCALING FACTOR.
!       SCALMN   MINIMUM COLUMN SCALING FACTOR.
!       SCALMX   MAXIMUM COLUMN SCALING FACTOR.
      INTEGER IRPT,IFAC,NFACMN,NFACMX
      REAL FACMC
      DOUBLE PRECISION SCALMN,SCALMX
      COMMON/JM5/SCALMN,SCALMX,IRPT,IFAC,NFACMN,NFACMX,FACMC

!     /CJM5/
!       AMOD3D   FLAG INDICATING OUTPUT DATABASE FILE TYPE:
      CHARACTER*1 AMOD3D
      COMMON/CJM5/AMOD3D

!     /SUNFLG/,/SUNNAM/
!       LRDSUN   SOLAR DATA FLAG, TRUE IF IRRADIANCES IN COMMON BLOCK
!                /SOLAR1/ HAVE BEEN MODIFIED FROM THE BLOCK DATA.
!       SUNFIL   NAME OF DEFAULT FILE CONTAINING SOLAR IRRADIANCE DATA.
      LOGICAL LRDSUN
      COMMON/SUNFLG/LRDSUN
      CHARACTER*12 SUNFIL
      COMMON/SUNNAM/SUNFIL

!     /M3DNAM/
!       M3DGEN   NAME OF GENERAL INFORMATION FILE FOR MOD3D.
!       M3DCNT   NAME OF CONTINUA DATA FILE FOR MOD3D.
!       M3DDAT   NAME OF MOLECULAR EXTINCTION FILE SORTED BY ATMOSPHERE.
!       M3DMOL   NAME OF MOLECULAR EXTINCTION DATA FILE FOR MOD3D.
      CHARACTER*(NAMLEN) M3DGEN,M3DCNT,M3DDAT,M3DMOL
      COMMON/M3DNAM/M3DGEN,M3DCNT,M3DDAT,M3DMOL
      REAL SN2O,SCFC11,SCFC12
      COMMON/LARRY/SN2O,SCFC11,SCFC12

!     DECLARE BLOCK DATA ROUTINES EXTERNAL:
      SAVE /SUNFLG/,/SUNNAM/,/TITL/,/VSBD/
      EXTERNAL DEVCBD,SUNBD,TITLE

!     FUNCTIONS:
!       LENSTR   RETURNS STRING LENGTH AFTER TRIMMING LEADING BLANKS.
!       RFLECT   DECODES SURREF AND DEFINES SURFACE REFLECTANCE
!                FUNCTION.  RETURNS FALSE IF SURREF CAN NOT BE DECODED.
!       GETVIS   CONVERTS AEROSOL VERTICAL OPTICAL DEPTH TO VISIBILITY.
      CHARACTER*7 UPCASE
      INTEGER LENSTR
      LOGICAL COMPAR,FILTER,RFLECT
      REAL GETVIS

!     LOCAL ARRAYS:
      INTEGER ICH(4)
      REAL QTHETS(LAYTWO)

!     LOCAL VARIABLES:
!       NSPEED   INTEGER CORRESPONDING TO SPEED
!       CKNAME   NAME OF CORRELATED-K DISTRIBUTIONS FILE.
!       SUNFL1   TOP-OF-ATMOSPHERE SPECTRAL SOLAR IRRADIANCES FILE NAME.
!       GROUND   FLAG, .TRUE. IF LINE-OF-SIGHT TERMINATES AT THE GROUND.
!       LMODEL   FLAG, .TRUE. IF MODEL ATMOSPHERE IS USED.
!       LNFILT   LENGTH OF FILTER RESPONSE FUNCTION FILE NAME.
!       H2OCOL   WATER COLUMN [KM GM /M3].
!       O3COL    OZONE COLUMN [KM GM /M3].
!       IRPTSV   ORIGINAL REPEAT RUN (IRPT) INPUT.  IF NEGATIVE,
!                A REPEAT RUN MESSAGE IS OUTPUT TO THE TERMINAL.
!       GETS01   TOP-OF-ATMOSPHERE SOLAR IRRADIANCES TABULATED
!                EACH WAVENUMBER [W CM-2 / CM-1].
!       GETS15   TOP-OF-ATMOSPHERE SOLAR IRRADIANCES TABULATED
!                EACH 15 WAVENUMBERS [W CM-2 / CM-1].
!       LENDAT   LENGTH OF DATDIR STRING.
!       FLRT     ROOT NAME FOR ALL I/O FILES.
!       LNFLRT   LENGTH OF ROOT NAME FOR ALL I/O FILES.
!       APPREF   FLAG, .TRUE. IF APPREF REFLECTANCE IS COMPUTED
!                INSTEAD OF RADIANCE.
      CHARACTER*(NAMLEN) CLRT,PLTOUT,PLTSCN,SPFLUX,DBOUT,SUNFL1,CKNAME
      CHARACTER*(NAMLEN-4) FLRT
      CHARACTER CHRSUN*1,FUNC*11,DODB*7
      LOGICAL APLUSL,GROUND,LOPEN,LXIST7,DEGALL,LMODEL,LSKIP,APPREF
      INTEGER NL,I,J,K,JPRT,KNTRVL,KNTRSV,IK,MDLSAV,ICLDSV,ITYPSV,      &
     &  LENNSV,IPRMSV,IPHSV,IDAYSV,ISRCSV,MM1,MM2,MM3,IHVUL,IHMET,      &
     &  MSOFF,IERROR,IEND1,IEND2,IFUNC,NSPEED,LNFILT,IRPTSV,            &
     &  ISEED,MARIC1,MARK,LENDAT,LNFLRT
      REAL TPTMPS,RAINSV,H1SAV,H2SAV,ANGSAV,RNGSAV,BETASV,              &
     &  PRM1SV,PRM2SV,PRM3SV,PRM4SV,TIMESV,GSV,ANGMSV,ALAM1,ALAM2,      &
     &  BENDNG,BETAH2,H2OCOL,O3COL,FWFUNC,CPROB,GETS01,GETS15
      EXTERNAL GETS01,GETS15

!     NOVAM LOCAL VARIABLES:
      INTEGER NLNOV
      REAL ALTNOV(MLNOV),RHNOV(MLNOV),PNOV(MLNOV),TNOV(MLNOV),          &
     &  DENNOV(MNOV,MLNOV)

!DRF
      REAL TPTEMP_INPUT, CO2MX_INPUT,GNDALT_INPUT
      INTEGER DAY_INPUT
      REAL GMT_INPUT,V1_INPUT,V2_INPUT,DV_INPUT
      REAL LATITUDE_INPUT,LONGITUDE_INPUT
      INTEGER NUM_LEVS
      INTEGER NUM_LRES,NUM_HRES,NUM_AC_WVL
      LOGICAL A_FLAG,LAND_FLAG,C_FLAG,ICE_FLAG
      REAL FULL_ATM(NUM_LEVS,28)
      INTEGER BRDF_LEN
      REAL BRDF_WVL(BRDF_LEN)
      REAL BRDF_PARAM(BRDF_LEN,3)
      LOGICAL BRDF_FLAG
      LOGICAL DRF_FLAG
      INTEGER DUMMY1,DUMMY2,DUMMY3
      LOGICAL DEBUG_FLAG
      REAL M_AEROSOL(NUM_LEVS,4),O_AEROSOL(NUM_AC_WVL,12)
      REAL M_CLOUD_LIQ(NUM_LEVS)
      REAL M_CLOUD_ICE(NUM_LEVS)
      REAL WVL_CLD(24),EXT_LIQ_CLD(24)
      REAL SSA_LIQ_CLD(24),ASYM_LIQ_CLD(24)
      REAL EXT_ICE_CLD(24),SSA_ICE_CLD(24),ASYM_ICE_CLD(24)
      REAL Z_CLD_VAL(NUM_LEVS)

      REAL AC_WAVELEN(NUM_AC_WVL) !WAVELENGTHS FOR AEROSOL/CLOUD OPT. PROPERTIES
      CHARACTER*120 FILE_NAME
      INTEGER IN_LENGTH !LENGTH OF FILE
      REAL WVLNGTH_LRES(NUM_LRES), RADIANCE_LRES(NUM_LRES)
      REAL WV_HRES(NUM_HRES), RADIANCE_HRES(NUM_HRES)
      REAL SOLAR_FLUX(NUM_LRES),DIFFUSE_FLUX(NUM_LRES),SOLAR_ZENITH
      REAL PFS(50,15,4)
      REAL PHASE_WVLS(15),PHASE_ANGLES(50)
!END DRF

!     DATA:
!       MAXDAT   MAXIMUM LAYERS*FREQUENCIES*KNTRVL VALUES ALLOWED
!                FOR STORING MULTIPLE SCATTERING DATA.
!       CKNMSV   OLD CORRELATED-K DISTRIBUTIONS FILE NAME.
!       FRMT     FORMAT STRING.
      INTEGER NSPDSV,IMSMX,MAXDAT
      CHARACTER CKNMSV*(NAMLEN),FRMT*9
      DATA NSPDSV,IMSMX/2*0/,MAXDAT/10000/,CKNMSV/' '/,FRMT/'((A    ))'/

      DRF_FLAG = .TRUE.
      !WRITE(*,*) 'INTO DRIVER '
      
      !WRITE(*,*) 'BRDF_WVL in DRIVER = ',BRDF_PARAM(:,1)
!     DEFINE FILE NAMES AND OPEN FILES:
!DRF
!      CALL FNAMES(CLRT,PLTOUT,PLTSCN,SPFLUX,DBOUT,                      &
!     &  M3DGEN,M3DCNT,M3DDAT,M3DMOL,LNFLRT,FLRT)
      CALL FNAMES(CLRT,PLTOUT,PLTSCN,SPFLUX,DBOUT,                      &
     &  M3DGEN,M3DCNT,M3DDAT,M3DMOL,LNFLRT,FLRT,FILE_NAME,IN_LENGTH)
!DRF
!     DEFINE CONSTANTS
!       BIGNUM  CUTOFF FOR AVOIDING OVERFLOWS
!       BIGEXP  ARGUMENT CUTOFF FOR AVOIDING OVERFLOWS IN EXP FUNCTION
!       NL      NUMBER OF BOUNDARIES IN THE STANDARD MODELS 1 TO 6
      PI=2.*ASIN(1.)
      DEG=180./PI
      BIGNUM=1.0E35
      BIGEXP=LOG(BIGNUM)
      CALL RIGHT(RRIGHT,DRIGHT)
      NL=36

!     KPOINT MAPS BAND MODEL SPECIES TO EXTINCTION SOURCE NUMBER.
      KPOINT( 1)=17
      KPOINT( 2)=36
      KPOINT( 3)=31
      KPOINT( 4)=47
      KPOINT( 5)=44
      KPOINT( 6)=46
      KPOINT( 7)=50
      KPOINT( 8)=54
      KPOINT( 9)=56
      KPOINT(10)=55
      KPOINT(11)=52
      KPOINT(12)=11
      DO I=1,NMOLX
          KPOINT(NMOL+I)=MEXT+I
      ENDDO

!     START CALCULATION:
      IF(LJMASS)OUTPUTCOUNT=0
   10 CONTINUE
      IREG(1)=0
      IREG(2)=0
      IREG(3)=0
      IREG(4)=0
      DO I=1,MAER
          DO J=1,MXWVLN
              EXTC(I,J)=0.
              ABSC(I,J)=0.
              ASYM(I,J)=0.
          ENDDO
      ENDDO
      JPRT=0

!     CARD 1:
      IF(LJMASS)THEN
          CALL INITCARD( 'CARD1' )
          DODB='       '
      ELSE
          WRITE(IPR,'(/(A))')                                           &
     &      ' ****************************************************',    &
     &      ' *                                                  *',    &
     &      ' *  MODTRAN4:   Official Version 3.1   Apr 2003     *',    &
     &      ' *                                                  *',    &
     &      ' *  Developed as a collaborate effort between       *',    &
     &      ' *  SPECTRAL SCIENCES, INC. (www.spectral.com)      *',    &
     &      ' *  and the AIR FORCE RESEARCH LABORATORY [contact  *',    &
     &      ' *  Gail Anderson (Gail.Anderson@hanscom.af.mil)]   *',    &
     &      ' *                                                  *',    &
     &      ' ****************************************************'
          IF (DRF_FLAG) THEN
              CODE = 'M'
              SPEED = 'M'
              BINARY = ' '
              MODEL = 7
              ITYPE = 2
              IEMSCT = 2
              IMULT = 1
              M1 = 0
              M2 = 0
              M3 = 0 
              M4 = 0 
              M5 = 0
              M6 = 0
              MDEF = 2
              IM = 1
              NOPRNT = 1
              !IF(BRDF_FLAG) THEN
                 SURREF = 'BRDF'
              !ELSE
              !   SURREF = 'LAMBER'
              !ENDIF	
              TPTEMP = TPTEMP_INPUT
              DODB = '      '
             ELSE
          READ(IRD,'(2A1,I3,12I5,F8.3,2A7)')                            &
     &      CODE,SPEED,MODEL,ITYPE,IEMSCT,IMULT,                        &
     &      M1,M2,M3,M4,M5,M6,MDEF,IM,NOPRNT,TPTEMP,SURREF,DODB
          ENDIF
      ENDIF
      IF(IEMSCT.EQ.-2 .OR. IEMSCT.EQ.-3)THEN
          IEMSCT=ABS(IEMSCT)
          APPREF=.TRUE.
      ELSE
          APPREF=.FALSE.
      ENDIF
      IF(IMULT.NE.0 .AND.                                               &
     &  (IEMSCT.EQ.0 .OR. IEMSCT.EQ.3 .OR. ITYPE.EQ.1))THEN
          WRITE(IPR,'(/2A)')' WARNING from DRIVER: ',                   &
     &      ' MULTIPLE SCATTERING HAS BEEN TURNED OFF.'
          IMULT=0
      ENDIF
      MODTRN=.TRUE.
      IF(CODE.EQ.'L' .OR. CODE.EQ.'l' .OR.                              &
     &  CODE.EQ.'F' .OR. CODE.EQ.'f')MODTRN=.FALSE.
      IF(LJMASS)THEN
          NOPRNT=1
      ELSE
          IF(NOPRNT.GT.1)THEN
              WRITE(IPR,'(/A)')                                         &
     &          '   Input NOPRNT reduced to 1 (minimum output)'
              NOPRNT=1
          ELSEIF(NOPRNT.LE.-2)THEN
              IF(NOPRNT.LT.-2)THEN
                  WRITE(IPR,'(/A)')                                     &
     &              '   Input NOPRNT increased to -2 (maximum output)'
                  NOPRNT=-2
              ENDIF

!             OPEN COOLING RATE FILE IF MULTIPLE SCATTERING
!             IS ON AND THE FILE IS NOT ALREADY OPEN:
              IF(IMULT.NE.0)THEN
                   INQUIRE(IPLOT,OPENED=LOPEN)
                   IF(.NOT.LOPEN)CALL OPNFL(ICR,CLRT,'UNKNOWN')
!		  LOPEN = .TRUE.
              ENDIF
          ENDIF
          WRITE(IPR,'(/A,2A1,I3,12I5,F8.3,A7)')                         &
     &      ' CARD 1  *****',CODE,SPEED,MODEL,ITYPE,IEMSCT,             &
     &      IMULT,M1,M2,M3,M4,M5,M6,MDEF,IM,NOPRNT,TPTEMP,SURREF
      ENDIF
      
      TPTMPS=TPTEMP
      IRD1=0
      !IRD2=0
      IF(MODEL.GE.1 .AND. MODEL.LE.6)THEN
          LMODEL=.TRUE.
          IF(M1.EQ.0)M1=MODEL
          IF(M2.EQ.0)M2=MODEL
          IF(M3.EQ.0)M3=MODEL
          IF(M4.EQ.0)M4=MODEL
          IF(M5.EQ.0)M5=MODEL
          IF(M6.EQ.0)M6=MODEL
          IF(MDEF.EQ.0)MDEF=1
      ELSE
          LMODEL=.FALSE.
      ENDIF
      NPR=NOPRNT

!     CARD 1A:
      IF(LJMASS)THEN
          CALL INITCARD( 'CARD1A' )
      ELSE
         IF (DRF_FLAG) THEN
            DISSTR = 'TF '
            NSTR = 8
            CHRSUN  = 'f'
            ISUN = 1
            H2OSTR = '        1.0'
            O3STR  = '        1.0' 
            SUNFL2(1:1) = 'f'
            BMNAME(1:1) = 'T'
            FILTNM(1:1) = 'f'
            H2OAER = 'f'
            DATDIR(1:1) = 'f'
            SOLCON = 0.0
            CO2MX = CO2MX_INPUT
         ELSE
          READ(IRD,'(A3,I2,A1,I4,F10.3,2A10,5(1X,A1),F10.3)')           &
     &      DISSTR,NSTR,CHRSUN,ISUN,CO2MX,H2OSTR,O3STR,SUNFL2(1:1),     &
     &      BMNAME(1:1),FILTNM(1:1),H2OAER,DATDIR(1:1),SOLCON
         ENDIF
          LSUN=CHRSUN.EQ.'t' .OR. CHRSUN.EQ.'T'
      ENDIF
      IF(CO2MX.LE.0.)CO2MX=330.
      CO2RAT=CO2MX/330.

!     FOR BACKWARD COMPATIBILITY WITH OLDER MODTRAN INPUT FILES,
!     THE DISORT LOGICALS ARE READ INTO A CHARACTER STRING.
!     DISORT COMPUTATION IS USED TO SCALE ISAACS IF LDSICL = .TRUE.
      IF(IMULT.EQ.0)THEN
          LDISCL=.FALSE.
          DIS=.FALSE.
      ELSE
          LDISCL=DISSTR(1:1).EQ.'S' .OR. DISSTR(1:1).EQ.'s'
          DIS=LDISCL .OR. DISSTR(1:1).EQ.'T' .OR. DISSTR(1:1).EQ.'t'
      ENDIF
      IF(DIS)THEN
          DISAZM=IEMSCT.EQ.2                                            &
     &      .AND. (DISSTR(2:2).EQ.'T' .OR. DISSTR(2:2).EQ.'t')
          DISALB=DISSTR(3:3).EQ.'T' .OR. DISSTR(3:3).EQ.'t'
          NSTR=ABS(NSTR)
          NAZ=NSTR-1
          N2GAUS=NSTR/2
      ELSE
          DISAZM=.FALSE.
          NSTR=1
          NAZ=-1
          N2GAUS=0
      ENDIF
      IF(MODEL.EQ.0)THEN

!         DO NOT SCALE PROFILE FOR CONSTANT PRESSURE PATH:
          LENN=0
          H2OSTR='          '
          O3STR='          '
          H2OAER=' '
      ELSEIF(H2OSTR.EQ.'          ')THEN
          H2OAER=' '
      ELSEIF(H2OAER.EQ.'t')THEN
          H2OAER='T'
      ENDIF
      IF(.NOT.LJMASS)THEN
          WRITE(IPR,'(/A,3L1,I2,L1,I4,F10.5,2A10,5(1X,A1),1X,F10.3)')   &
     &      ' CARD 1A *****',DIS,DISAZM,DISALB,NSTR,LSUN,ISUN,          &
     &      CO2MX,H2OSTR,O3STR,SUNFL2(1:1),BMNAME(1:1),                 &
     &      FILTNM(1:1),H2OAER,DATDIR(1:1),SOLCON

!         DEFINE INPUT FORMAT:
          WRITE(FRMT(4:7),'(I4.4)')NAMLEN

!         CARD 1A1:
          IF(SUNFL2(1:1).EQ.'T' .OR. SUNFL2(1:1).EQ.'t')THEN
              IF(.NOT.DRF_FLAG) READ(IRD,FRMT)SUNFL2
          ELSE
              SUNFL2=' '
          ENDIF

!         CARD 1A2:
          IF(BMNAME(1:1).EQ.'T' .OR. BMNAME(1:1).EQ.'t')THEN
             IF(.NOT.DRF_FLAG) THEN
                READ(IRD,FRMT)BMNAME
             ELSE
                BMNAME = 'DATA/B2001_15.BIN';
             ENDIF
          ELSE
              BMNAME=' '
          ENDIF

!         CARD 1A3:
          IF(FILTNM(1:1).EQ.'T' .OR. FILTNM(1:1).EQ.'t')THEN
             IF (.NOT.DRF_FLAG) READ(IRD,FRMT)FILTNM
          ELSE
              FILTNM=' '
          ENDIF

!         CARD 1A4:
          IF(DATDIR(1:1).EQ.'T' .OR. DATDIR(1:1).EQ.'t')THEN
              WRITE(FRMT(4:7),'(I4.4)')NAMLEN-12
              IF (.NOT.DRF_FLAG) READ(IRD,FRMT)DATDIR
          ELSE
              DATDIR='DATA/'
          ENDIF
      ENDIF
      LNFILT=LENSTR(FILTNM)
      LENDAT=LENSTR(DATDIR)
      CKNAME=' '

!     OPEN MOLECULAR BAND MODEL PARAMETERS FILE AND READ HEADER:
      KNTRVL=1
      IF(MODTRN)THEN

!         OPEN BAND MODEL DATA FILES:
          CALL OPENBM(BMNAME,DATDIR(1:LENDAT),LNFLRT,FLRT)

!         OPEN CORRELATED-K DISTRIBUTIONS FILE.
          IF((IEMSCT.EQ.1 .OR. IEMSCT.EQ.2) .AND. (CODE.EQ.'C' .OR.     &
     &      CODE.EQ.'c' .OR. CODE.EQ.'K' .OR. CODE.EQ.'k'))THEN

!             SET NSPEED
              IF(SPEED.EQ.'M' .OR. SPEED.EQ.'m' .OR. SPEED.EQ.'1')THEN
                  NSPEED=1
              ELSE
                  NSPEED=0
              ENDIF
              IF(LENSTR(CKNAME).EQ.0)THEN

!                 USE DEFAULT FILE NAME.
                  CKNAME=DATDIR(1:LENDAT)//'CORK00.BIN'
                  I=INDEX(CKNAME,'00.BIN')
                  WRITE(CKNAME(I:I+1),'(I2.2)')IBNDWD
              ENDIF
              IF(CKNAME.NE.CKNMSV .OR. NSPEED.NE.NSPDSV)THEN

!                 NEW CORRELATED-K DISTRIBUTIONS FILE.
                  CALL RDCORK(CKNAME,NSPEED,NTLSUB,KNTRVL)
                  CKNMSV=CKNAME
                  NSPDSV=NSPEED
                  KNTRSV=KNTRVL
              ELSE

!                 RESTORE THE OLD "KNTRVL" NUMBER.
                  KNTRVL=KNTRSV
              ENDIF
          ENDIF
      ENDIF

!     SOLAR IRRADIANCE DATA:
      IF(IEMSCT.GE.2)THEN

!         CHECK FOR INPUT OF SOLAR CONSTANT:
          IF(SOLCON.NE.0.)THEN

!             SOLAR CONSTANT FROM THE DATABASES IS BEING SCALED.  THE
!             SOLAR FILE MUST BE READ EVEN IF LSUN IS FALSE IN TAPE5.
!             SET ISUN TO THE DEFAULT VALUE (5 CM-1) IF LSUN IS FALSE.
              IF(.NOT.LSUN)THEN
                  IF(.NOT.MODTRN)THEN
                      ISUN=20
                  ELSEIF(IBNDWD.GT.5)THEN
                      ISUN=IBNDWD
                  ELSE
                      ISUN=5
                  ENDIF
                  LSUN=.TRUE.
              ENDIF
          ENDIF

!         SUN TO BE USED:
          IF(LSUN)THEN

!             DETERMINE THE APPROPRIATE SOLAR FILE AND READ IT:
              IEND2=LENSTR(SUNFL2)
              IF(IEND2.EQ.0)THEN

!                 THE USER HAS CHOSEN THE DEFAULT FILE WHICH IS SUNFL1
!                 DEFAULT FILE IS FLAGGED BY SUNFL2 BEING '1' OR BLANK:
                  SUNFL1=DATDIR(1:LENDAT)//SUNFIL
                  SUNFL2='1'
                  IEND2=1
              ELSEIF(SUNFL2(1:IEND2).EQ.'2')THEN
                  SUNFL1=DATDIR(1:LENDAT)//'chkur.dat'
              ELSEIF(SUNFL2(1:IEND2).EQ.'3')THEN
                  SUNFL1=DATDIR(1:LENDAT)//'cebchkur.dat'
              ELSEIF(SUNFL2(1:IEND2).EQ.'4')THEN
                  SUNFL1=DATDIR(1:LENDAT)//'thkur.dat'
              ELSE
                  SUNFL1=DATDIR(1:LENDAT)//SUNFIL
              ENDIF
              IEND1=LENSTR(SUNFL1)
              CALL RDSUN(ISUN,SUNFL1,SUNFL2,SOLCON)
              IF(ISUN.NE.5 .OR. SUNFL2(1:IEND2).NE.'1'                  &
     &          .OR. SOLCON.NE.0.)LRDSUN=.TRUE.

!             WRITE SOLAR IRRADIANCE FILE NAME:
              IF(.NOT.LJMASS)THEN
                  IF(SUNFL2.EQ.'1' .OR. SUNFL2.EQ.'2' .OR. SUNFL2.EQ.'3'&
     &              .OR. SUNFL2.EQ.'4' .OR. SUNFL2.EQ.'5')THEN
                      WRITE(IPR,'(/A,30X,A)')                           &
     &                  ' SOLAR IRRADIANCE FILE:',SUNFL1(1:IEND1)
                  ELSE
                      WRITE(IPR,'(/A,30X,A)')                           &
     &                  ' SOLAR IRRADIANCE FILE:',SUNFL2(1:IEND2)
                  ENDIF
              ENDIF
          ELSEIF(LRDSUN)THEN

!             SOLAR IRRADIANCE BLOCK DATA WAS OVER-WRITTEN IN PREVIOUS
!             RUN.  THE ORIGINAL IS NOW NEEDED AND MUST BE REGENERATED:
              CALL RDSUN(5,DATDIR(1:LENDAT)//SUNFIL,'1',0.)
              LRDSUN=.FALSE.
          ENDIF
      ENDIF

!     CARD 2 AEROSOL MODEL:
      IF(LJMASS)THEN
          CALL INITCARD( 'CARD2' )
      ELSE
         IF(DRF_FLAG) THEN
               APLUS = ' '
               CNOVAM = ' '
               ISEASN = 0
               IF(A_FLAG)THEN
                  IHAZE = -1
                  ARUSS = 'USS'
                  IRD2 = 2
               ELSE
                  IHAZE = 0
                  ARUSS = ' '
               ENDIF
               IVULCN = 0
               ICSTL = 3
               IF (C_FLAG) THEN
                  ICLD = 1
               ELSE
                  ICLD = 0
               ENDIF
               IVSA = 0
               VIS = 0
               WSS = 0
               WHH = 0
               RAINRT = 0
               GNDALT = GNDALT_INPUT
         ELSE
          READ(IRD,'(A2,I3,A1,I4,A3,I2,3I5,5F10.5)')                    &
     &      APLUS,IHAZE,CNOVAM,ISEASN,ARUSS,                            &
     &      IVULCN,ICSTL,ICLD,IVSA,VIS,WSS,WHH,RAINRT,GNDALT
         ENDIF
         !WRITE(*,*) 'IHAZE = ',IHAZE
          WRITE(IPR,'(/A,A2,I3,A1,I4,A3,I2,3I5,5F10.5)')                &
     &      ' CARD 2  *****',APLUS,IHAZE,CNOVAM,ISEASN,ARUSS,           &
     &      IVULCN,ICSTL,ICLD,IVSA,VIS,WSS,WHH,RAINRT,GNDALT
      ENDIF

!     *****THE NEW AEROSOL IMPROVEMENTS (A+ SCHEME) (BEGIN)*****
!     THE A+ SCHEME GENERALIZES THE MODTRAN CURRENT AEROSOL MODELS.
!     THIS IS INDEPENDENT OF NOVAM RELATED MODIFICATIONS/IMPROVEMENTS.
!     IF IHAZE > 0 (I.E. AEROSOLS ARE INVOKED) AND APLUS='A+',
!     FOUR PAIRS OF ALTITUDE ARE READ IN THE FOLLOWING CARD.
!     SEE THE ROUTINE APRFNU.F.
      ARUSSL=.FALSE.
      APLUSL=.FALSE.

      IF(APLUS.EQ.'A+')THEN
          APLUSL=.TRUE.
          IF(IHAZE.LT.0 .OR. IHAZE.EQ.7 .OR. ICLD.EQ.11)THEN
              WRITE(IPR,'(//2A,/(23X,A))')' WARNING from DRIVER:  ',    &
     &          'Inputs IHAZE<0, IHAZE=7, and ICLD=11 are incompatible',&
     &          'with the "A+" option and "A+" is being turned off.',   &
     &          'An error will occur if tape5 includes CARD 2A+.'
              APLUSL=.FALSE.
          ENDIF
          
!         IF(APLUSL)READ CARD 2A+
          IF(APLUSL)THEN
              IF(LJMASS)THEN
                  CALL INITCARD( 'CARD2APLUS' )
              ELSE
                 IF(.NOT.DRF_FLAG) THEN
                  READ(IRD,'((3(1X,F9.0),20X,3(1X,F9.0)))')             &
     &              ZAER11,ZAER12,SCALE1,ZAER21,ZAER22,SCALE2,          &
     &              ZAER31,ZAER32,SCALE3,ZAER41,ZAER42,SCALE4
                  ENDIF
              ENDIF

!             CHECK FOR TROPOSPHERIC AEROSOL:
              IF(IHAZE.EQ.6)THEN
                  WRITE(IPR,'(/2A,/(15X,A))')' ***  WARNING: ',         &
     &              ' Aerosol regions 1 (nominally, 0-2 km) and',       &
     &              ' 2 (nominally, 2-10 km) are combined when',        &
     &              ' the Tropospheric aerosol model (IHAZE=6)',        &
     &              ' is selected.  From CARD 2A+, the following',      &
     &              ' assignments define the tropospheric region:',     &
     &              '   LOWER BOUNDING ALTITUDE = MIN(ZAER11,ZAER21)',  &
     &              '   UPPER BOUNDING ALTITUDE = MAX(ZAER12,ZAER22)',  &
     &              '   AEROSOL SCALE FACTOR    = MAX(SCALE1,SCALE2)'
                  ZAER11=MIN(ZAER11,ZAER21)
                  ZAER12=MAX(ZAER12,ZAER22)
                  SCALE1=MAX(SCALE1,SCALE2)
                  ZAER21=0.
                  ZAER22=0.
                  SCALE2=1.
              ENDIF
              IF(.NOT.LJMASS)WRITE(IPR,'(A,12(1X,F9.4))')' CARD 2A+ **',&
     &          ZAER11,ZAER12,SCALE1,ZAER21,ZAER22,SCALE2,              &
     &          ZAER31,ZAER32,SCALE3,ZAER41,ZAER42,SCALE4
          ENDIF
      ENDIF

!     ARUSS='USS' MEANS USER-SUPPLED SPECTRAL DATA
!     (THIS IS NOT THE SWITCH FOR PHASE FUNCTIONS)
      IF(ARUSS.EQ.'USS')ARUSSL=.TRUE.

!     *****THE NEW AEROSOL IMPROVEMENTS (A+ SCHEME) (END)*****

!     CNOVAM = "N" TRIGGERS NOVAM
      IF(CNOVAM.EQ.'N' .OR. CNOVAM.EQ.'n')THEN
          LNOVAM=.TRUE.
      ELSE
          LNOVAM=.FALSE.
      ENDIF

!     NOVAM WITH A+ INCOMPATIBILITY CHECK:
      IF(LNOVAM .AND. APLUSL)THEN
          WRITE(IPR,'(/A)')                                             &
     &      ' ERROR:  NOVAM AND A+ OPTIONS ARE NOT COMPATIBLE.'
          IF(LJMASS)CALL WRTBUF(FATAL)
          STOP ' ERROR:  NOVAM AND A+ OPTIONS ARE NOT COMPATIBLE.'
      ENDIF

!     CHECK IF IHAZE OR ICLD NEED TO BE RESET.
!       IF IHAZE < 0, THEN NO AEROSOLS BUT CLOUDS IF 0 < ICLD < 11
!       IF IHAZE = 0 AND CNOVAM .NE. "N", NO AEROSOLS AND NO CLOUDS
!       IF IHAZE > 0, THEN AEROSOLS AND, IF ICLD > 0, CLOUDS
      IF(IHAZE.EQ.0 .AND. ICLD.NE.0)THEN

!         RESET ICLD TO ZERO - NO CLOUDS
          WRITE(IPR,'(/2A,I3,A)')' WARNING:  INPUT ICLD IS BEING',      &
     &      ' RESET FROM',ICLD,' TO 0 SINCE IHAZE EQUALS 0.'
          ICLD=0
      ELSEIF(IHAZE.LT.0)THEN

!         FOR INTERNAL USE, SET IHAZE TO ZERO (CLOUDS WILL BE
!         INCLUDED IF ICLD IS BETWEEN 1 AND 10, INCLUSIVE).
          IHAZE=0
      ENDIF

!     CHECK GROUND ALTITUDE.
      IF(.NOT.LJMASS .AND. GNDALT.NE.0.)                                &
     &  WRITE(IPR,'(/A,F10.5)')'   GNDALT =',GNDALT
      IF(GNDALT.GE.6.)THEN
          WRITE(IPR,'(/2A,F10.5)')' WARNING from DRIVER:  GNDALT',      &
     &      ' (> 6 KM) IS BEING RESET TO 0 KM; GNDALT WAS',GNDALT
          GNDALT=0.
      ENDIF

!     CHECK FOR WINTER:
      IF((MODEL.EQ.3 .OR. MODEL.EQ.5) .AND. ISEASN.EQ.0)ISEASN=2

!     CHECK FOR UNDEFINED VISIBILITY:
      IF(VIS.LT.0.)THEN

!         CONVERT VERTICAL AEROSOL OPTICAL DEPTH (-VIS) TO VISIBILITY:
          VIS=GETVIS(-VIS,GNDALT,ISEASN.NE.2,IVULCN)
      ELSEIF(VIS.LE.0. .AND. IHAZE.GT.0)THEN

!         AEROSOL MODEL DEPENDENT VISIBILITY:
          VIS=VSB(IHAZE)
      ENDIF
      IF(LMODEL)THEN
          ML=NL
          IF(IVSA.EQ.1 .AND. IHAZE.EQ.3)                                &
     &      CALL MARINE(VIS,MODEL,0.,WSS,WHH,ICSTL,EXTC,ABSC,1)
          ICH(1)=IHAZE
          ICH(2)=6
          ICH(3)=9+IVULCN
      ENDIF
      ICH(4)=18
      IF(ICH(1).LE.0)ICH(1)=1
      IF(ICH(3).LE.9)ICH(3)=10
      IF(ICLD.EQ.11)THEN
          ICH(4)=ICH(3)
          ICH(3)=ICH(2)
          ICH(2)=ICLD
      ENDIF

!     NOVAM AEROSOL MODEL:
      IF(LNOVAM)CALL NOVAER(IHAZE,VIS,ALTNOV,RHNOV,PNOV,TNOV,DENNOV)
      IF(.NOT.LJMASS .AND. RAINRT.NE.0.)WRITE(IPR,'(/A,F9.3,A)')        &
     &  '   RAIN MODEL CALLED, RAIN RATE = ',RAINRT,' MM/HR'
      CTHIK=-99.
      CALT=-99.
      CEXT=-99.
      ISEED=-99
      NCRALT=-99
      NCRSPC=-99
      CWAVLN=-99.
      CCOLWD=-99.
      CCOLIP=-99.
      CHUMID=-99.
      ASYMWD=-99.
      ASYMIP=-99.
      IF(ICLD.GE.18)THEN

!         CARD 2A MODEL CIRRUS
          IF(LJMASS)THEN
              CALL INITCARD( 'CARD2A' )
              IF(CTHIK.LT.0.)CTHIK=0.
              IF(CALT.LT.0.)CALT=0.
              IF(CEXT.LT.0.)CEXT=0.
          ELSE
             IF (.NOT.DRF_FLAG) THEN
              READ(IRD,'(3F8.3,I4)')CTHIK,CALT,CEXT,ISEED
             ENDIF
              IF(CTHIK.LT.0.)CTHIK=0.
              IF(CALT.LT.0.)CALT=0.
              IF(CEXT.LT.0.)CEXT=0.
              WRITE(IPR,'(/A,3F8.3,I4)')                                &
     &          ' CARD 2A *****',CTHIK,CALT,CEXT,ISEED
          ENDIF
      ELSEIF(ICLD.GE.1 .AND. ICLD.LE.10)THEN

!         CARD 2A MODEL CLOUDS
          IF(LJMASS)THEN
              CALL INITCARD( 'CARD2A' )
          ELSE
             IF(.NOT.DRF_FLAG)THEN
              READ(IRD,'(3F8.3,2I4,6F8.3)')CTHIK,CALT,CEXT,NCRALT,      &
     &          NCRSPC,CWAVLN,CCOLWD,CCOLIP,CHUMID,ASYMWD,ASYMIP
              ENDIF
              WRITE(IPR,'(/A,3F8.3,2I4,6F8.3)')                         &
     &          ' CARD 2A *****',CTHIK,CALT,CEXT,NCRALT,NCRSPC,         &
     &          CWAVLN,CCOLWD,CCOLIP,CHUMID,ASYMWD,ASYMIP
          ENDIF
      ENDIF

!     CARD 2B VERTICAL STRUCTURE ALGORITHM
      ZCVSA=-99.
      ZTVSA=-99.
      ZINVSA=-99.
      IF(IVSA.EQ.1)THEN
          IF(LJMASS)THEN
              CALL INITCARD( 'CARD2B' )
          ELSE
             IF(.NOT.DRF_FLAG)THEN
              READ(IRD,'(3F10.5)')ZCVSA,ZTVSA,ZINVSA
              ENDIF
              WRITE(IPR,'(/A,3F10.5)')                                  &
     &          ' CARD 2B *****',ZCVSA,ZTVSA,ZINVSA
          ENDIF
          CALL VSA(IHAZE,VIS,ZCVSA,ZTVSA,ZINVSA,ZVSA,RHVSA,AHVSA,IHVSA)
      ENDIF
      MDLSAV=MODEL
      IF(MODEL.EQ.0)MDLSAV=8
      HMODEL(7)=HMODEL(MDLSAV)
      SN2O=1.
      SCFC11=1.
      SCFC12=1.
      IF(IM.EQ.1 .AND. .NOT.LMODEL)THEN

!         CARD 2C:  USER SUPPLIED ATMOSPHERIC PROFILE
          IF(LJMASS)THEN
              CALL INITCARD( 'CARD2C' )
          ELSEIF(MODEL.EQ.8)THEN
             IF (DRF_FLAG) THEN
              ML = NUM_LEVS            
              IRD1 = 1
              !DRF
              IF (A_FLAG.OR.C_FLAG) THEN
                 IRD2 = 2
              ELSE
                 IRD2 = 0
              ENDIF
              !DRF
              HMODEL = '   USERDEFINED'
             ELSE
              READ(IRD,'(3I5,A20,F10.0)')                               &
     &          ML,IRD1,IRD2,HMODEL(7),REE
              ENDIF
              IF(REE.LE.0.)THEN
                  IF(M1.EQ.1)THEN
                      REE=6378.39
                  ELSEIF(M1.EQ.4)THEN
                      REE=6356.91
                  ELSEIF(M1.EQ.5)THEN
                      REE=6356.91
                  ELSE
                      REE=6371.23
                  ENDIF
              ENDIF
              WRITE(IPR,'(/A,3I5,A20,F10.3)')                           &
     &          ' CARD 2C *****',ML,IRD1,IRD2,HMODEL(7),REE
          ELSE
             IF(DRF_FLAG) THEN
                ML = NUM_LEVS            
                IRD1 = 1
                IF(A_FLAG.OR.C_FLAG)THEN
                   IRD2 = 2
                ELSE
                   IRD2 = 0
                ENDIF
                HMODEL = '   USERDEFINED'
             ELSE
              READ(IRD,'(3I5,A20,10X,3F10.0)')                          &
     &          ML,IRD1,IRD2,HMODEL(7),SN2O,SCFC11,SCFC12
             ENDIF
              IF(SN2O.EQ.0.)SN2O=1.
              IF(SCFC11.EQ.0.)SCFC11=1.
              IF(SCFC12.EQ.0.)SCFC12=1.
              WRITE(IPR,'(/A,3I5,A20,3f10.5)')' CARD 2C *****',         &
     &          ML,IRD1,IRD2,HMODEL(7),SN2O,SCFC11,SCFC12
          ENDIF
          IF(APLUSL .AND. (IRD2.EQ.1.OR.IRD2.EQ.2))THEN
              WRITE(IPR,'(2A,/(10X,A))')' WARNING: ',                   &
     &          ' WHEN APLUS ="A+", IRD2 CANNOT BE 1 OR 2 (FOR',        &
     &          ' READING AEROSOL PROFILES WITH MODEL=0/7).',           &
     &          ' *****  APLUS OPTION WILL BE IGNORED  *****'
              APLUSL=.FALSE.
              APLUS='  '
          ENDIF
          IF(IVSA.EQ.1)CALL RDNSM
      ENDIF
      MARIC1=0
      MARK=0
      IF(ICLD.GE.1 .AND. ICLD.LE.10)THEN

!         CLOUD/RAIN MODELS 1-10 ARE NOW SET UP IN ROUTINE CRDRIV, NOT
!         ROUTINE AERNSM; TEMPORARILY SET ICLD AND RAINRT TO ZERO.
          ICLDSV=ICLD
          RAINSV=RAINRT
          ICLD=0
          RAINRT=0.
!DRF          CALL AERNSM(JPRT,GNDALT,MARIC1,MARK,ICH,LMODEL)
          CALL AERNSM(JPRT,GNDALT,MARIC1,MARK,ICH,LMODEL,FULL_ATM,      &
     &                A_FLAG,M_AEROSOL,O_AEROSOL,AC_WAVELEN,            &
     &                NUM_LEVS,NUM_AC_WVL)
!DRF          CALL AERNSM(JPRT,GNDALT,MARIC1,MARK,ICH,LMODEL,FULL_ATM)
          ICLD=ICLDSV
          RAINRT=RAINSV
          CALL CRDRIV(M_CLOUD_LIQ,WVL_CLD,EXT_LIQ_CLD,SSA_LIQ_CLD,      &
     &                ASYM_LIQ_CLD,M_CLOUD_ICE,EXT_ICE_CLD,             &
     &                SSA_ICE_CLD,ASYM_ICE_CLD,NUM_LEVS,Z_CLD_VAL)
      ELSE
!DRF          CALL AERNSM(JPRT,GNDALT,MARIC1,MARK,ICH,LMODEL)
          CALL AERNSM(JPRT,GNDALT,MARIC1,MARK,ICH,LMODEL,FULL_ATM,      &
     &                A_FLAG,M_AEROSOL,O_AEROSOL,AC_WAVELEN,            &
     &                NUM_LEVS,NUM_AC_WVL)
!DRF          CALL AERNSM(JPRT,GNDALT,MARIC1,MARK,ICH,LMODEL,FULL_ATM)
      ENDIF

!     CHECK GROUND ALTITUDE:
      IF(GNDALT.LT.ZM(1))THEN

!         RAISE GROUND ALTITUDE TO THE BOTTOM OF ATMOSPHERE:
          WRITE(IPR,'(2A,F8.4,A,/10X,A,F8.4,A)')' WARNING: ',           &
     &      ' THE INPUT GROUND ALTITUDE (',GNDALT,' KM) IS BEING',      &
     &      ' RAISED TO THE BOTTOM OF THE ATMOSPHERE,',ZM(1),' KM.'
          GNDALT=ZM(1)
      ENDIF

!     IF NOVAM IS CALLED MERGE NOVAM LAYERS WITH OTHER.
      IF(LNOVAM)THEN
          NLNOV=2*(NNOV+1)
          CALL NOVMRG(ALTNOV,RHNOV,PNOV,TNOV,DENNOV,NLNOV)
      ENDIF

!     AERNSM IS USED AS BEFORE BUT NEW A+ SCHEME NEEDS EXTRA
!     HANDLING.  THE NEW SCHEME GOES INTO EFFECT AFTER AERNSM.
      IF (APLUSL) CALL APRFNU(LMODEL,IHAZE,GNDALT,                      &
     &     ZAER11,ZAER12,SCALE1,ZAER21,ZAER22,SCALE2,                   &
     &     ZAER31,ZAER32,SCALE3,ZAER41,ZAER42,SCALE4)
      IF(ICLD.GE.20)THEN

!         SET UP CIRRUS MODEL
          CALL CIRRUS(CTHIK,CALT,ISEED,CPROB,CEXT)
          IF(.NOT.LJMASS)THEN
              WRITE(IPR,'(15X,A)')                                      &
     &          'CIRRUS ATTENUATION INCLUDED (N O A A CIRRUS)'
              IF(ISEED.EQ.0)THEN
                  WRITE(IPR,'((15X,2A,F10.5,A))')' CIRRUS THICKNESS ',  &
     &              'DEFAULTED TO MEAN VALUE OF',CTHIK,'KM','CIRRUS ',  &
     &              'BASE ALTITUDE DEFAULTED TO MEAN VALUE OF',CALT,'KM'
              ELSE
                  IF(CTHIK.NE.0.)THEN
                      WRITE(IPR,'(15X,2A,F10.5,A)')' CIRRUS THICKNESS', &
     &                  ' USER DETERMINED TO BE',CTHIK,'KM'
                  ELSE
                      WRITE(IPR,'(15X,2A,F10.5,A)')'CIRRUS ATTENUATION',&
     &                  ' STATISTICALLY DETERMINED TO BE',CTHIK,'KM'
                  ENDIF
                  IF(CALT.NE.0)THEN
                      WRITE(IPR,'(15X,2A,F10.5,A)')'CIRRUS BASE',       &
     &                  ' ALTITUDE USER DETERMINED TO BE',CALT,'KM'
                  ELSE
                      WRITE(IPR,'(15X,2A,F10.5,A)')'CIRRUS BASE ALTI',  &
     &                  'TUDE STATISTICALLY DETERMINED TO BE',CALT,'KM'
                  ENDIF
              ENDIF
              WRITE(IPR,'(15X,A,F7.1,A)')                               &
     &          'PROBABILITY OF CLOUD OCCURRING IS',CPROB,' PERCENT'
          ENDIF
      ENDIF

!*****CARD 2E:  USER-SUPPLIED AEROSOL EXTINCTION,
!               ABSORPTION, AND ASYMMETRY
      IF(ARUSSL)THEN
!DRF          CALL ARUEXA
         !WRITE(*,*) 'CALL ARUEXA'
!	  NARSPC(1) = 1
          CALL ARUEXA(A_FLAG,M_AEROSOL,O_AEROSOL,AC_WAVELEN,            &
     &                NUM_LEVS,NUM_AC_WVL)
      ELSEIF(IHAZE.EQ.7 .OR. ICLD.EQ.11)THEN
          CALL RDEXA
      ENDIF
   20 CONTINUE
      IPARM =-99
      IPH   =-99
      IDAY  =-99
      ISOURC=-99
      PARM1 =-99.
      PARM2 =-99.
      PARM3 =-99.
      PARM4 =-99.
      TIME  =-99.
      PSIPO =-99.
      ANGLEM=-99.
      G     =-99.

!     CARD 3 GEOMETRY PARAMETERS:
      IF(LJMASS)THEN
          CALL INITCARD( 'CARD3' )
          IF(IEMSCT.GE.3)THEN

!             CARD 3 FOR DIRECTLY TRANSMITTED SOLAR IRRADIANCE:
              ITYPE=3
              RANGE=0.
              BETA=0.
              LENN=0
              PHI=0.
          ENDIF
      ELSEIF(IEMSCT.LT.3)THEN
	IF(DRF_FLAG) THEN
	      H1 = 700
	      H2 = GNDALT_INPUT
	      ANGLE = 179.9
	      RANGE = 0
	      BETA = 0
	      RO = 0
	      LENN = 0
	      PHI = 0
	ELSE
          READ(IRD,'(6F10.5,I5,5X,F10.5)')                              &
     &      H1,H2,ANGLE,RANGE,BETA,RO,LENN,PHI
        ENDIF
          WRITE(IPR,'(/A,6F10.5,I5,5X,F10.5)')                          &
     &      ' CARD 3  *****',H1,H2,ANGLE,RANGE,BETA,RO,LENN,PHI
      ELSE

!         CARD 3 FOR DIRECTLY TRANSMITTED SOLAR IRRADIANCE (IEMSCT=3):
         IF(DRF_FLAG) THEN
	      H1 = 700
	      H2 = GNDALT_INPUT
	      ANGLE = 180
	      RANGE = 0
	      BETA = 0
	      RO = 0
	      ISOURCE = 0
	      ANGLEM = 0
          ELSE
          READ(IRD,'(2(3F10.5,I5,F15.5,I5))')                           &
     &      H1,H2,ANGLE,IDAY,RO,ISOURC,ANGLEM
          ENDIF
          WRITE(IPR,'(/A,2(3F10.5,I5,F15.5,I5))')                       &
     &      ' CARD 3   *****',H1,H2,ANGLE,IDAY,RO,ISOURC,ANGLEM
          ITYPE=3
          RANGE=0.
          BETA=0.
          LENN=0
          PHI=0.
      ENDIF

!     REE IS THE RADIUS OF THE EARTH USED BY MODTRAN
      IF(MODEL.NE.8)THEN
          IF(MODEL.NE.0 .AND. RO.GT.0.)THEN
              REE=RO
          ELSEIF(MODEL.EQ.1)THEN
              REE=6378.39
          ELSEIF(MODEL.EQ.4)THEN
              REE=6356.91
          ELSEIF(MODEL.EQ.5)THEN
              REE=6356.91
          ELSE
              REE=6371.23
          ENDIF
      ENDIF
      IF(.NOT.LJMASS)WRITE(IPR,'(/F12.2,A)')                            &
     &  REE,'  RADIUS OF THE EARTH [KM].'
      LUSEMS=.FALSE.
      LSAVMS=.FALSE.
      IF(IEMSCT.EQ.2)THEN
          IF(LJMASS)THEN
              CALL INITCARD( 'CARD3A1' )
              CALL INITCARD( 'CARD3A2' )
          ELSE

!             CARD 3A1:
              IF(DRF_FLAG) THEN
		  IPARM = 11
                  IF (A_FLAG) THEN
		     IPH = 1
                  ELSE
                     IPH = 2
                  ENDIF
		  IDAY = DAY_INPUT
		  ISOURC = 0
	      ELSE
                 READ(IRD,'(4I5)')IPARM,IPH,IDAY,ISOURC
              ENDIF
              WRITE(IPR,'(/A,4I5)')                                     &
     &          ' CARD 3A1*****',IPARM,IPH,IDAY,ISOURC

!             CARD 3A2:
	      IF(DRF_FLAG) THEN
		  PARM1 = LATITUDE_INPUT
		  WRITE(*,*) 'LONGITUDE= ',LONGITUDE_INPUT
		  PARM2 = 0.0 !DRF LONGITUDE_INPUT
		  WRITE(*,*) 'LATITUDE = ',PARM1
		  WRITE(*,*) 'LONGITUDE= ',PARM2
		  PARM3 = 0.
		  PARM4 = 0.
		  TIME = GMT_INPUT
		  PSIPO = 45.
		  ANGLEM = 0.
		  G = 0.
	       ELSE
              READ(IRD,'(8F10.5)')                                      &
     &          PARM1,PARM2,PARM3,PARM4,TIME,PSIPO,ANGLEM,G
              ENDIF
              WRITE(IPR,'(/A,8F10.5)')' CARD 3A2*****',                 &
     &          PARM1,PARM2,PARM3,PARM4,TIME,PSIPO,ANGLEM,G
          ENDIF
          IF(IMULT.NE.0 .AND. .NOT.DIS)THEN

!             ISAACS TWO-STREAM WITH SOLAR/LUNAR WILL BE USED.
              INQUIRE(ISCRCH,OPENED=LOPEN)
              IF(.NOT.LOPEN)THEN

!                 FIRST ISAACS SOLAR CALCULATION
                  OPEN(ISCRCH,STATUS='SCRATCH',FORM='UNFORMATTED')
              ELSE

!                 COMPARE SOLAR PARAMETERS; LUSEMS IS .T. IF THEY MATCH.
                  IF(IRPT.EQ.3)LUSEMS=COMPAR(IPARM,IPH,IDAY,            &
     &              ISOURC,PARM1,PARM2,PARM3,PARM4,TIME,G,              &
     &              ANGLEM,IPRMSV,IPHSV,IDAYSV,ISRCSV,PRM1SV,           &
     &              PRM2SV,PRM3SV,PRM4SV,TIMESV,GSV,ANGMSV)
                  REWIND(ISCRCH)
              ENDIF

!             SAVE SOLAR PARAMETERS FOR COMPARING LATER.
              CALL SVSOLA(IPARM,IPH,IDAY,ISOURC,PARM1,PARM2,PARM3,      &
     &          PARM4,TIME,G,ANGLEM,IPRMSV,IPHSV,IDAYSV,ISRCSV,         &
     &          PRM1SV,PRM2SV,PRM3SV,PRM4SV,TIMESV,GSV,ANGMSV)
              LSAVMS=.TRUE.
          ENDIF
          IF(IPH.EQ.0)THEN
              IF(G.GT..9999)THEN
                  G=.9999
              ELSEIF(G.LT.-.9999)THEN
                  G=-.9999
              ENDIF
          ELSEIF(IPH.EQ.1)THEN

!             USER-DEFINED PHASE FUNCTIONS MUST BE
!             SPECIFIED FOR ALL 4 (=NAERF) AEROSOLS:
              NAERF=4
              IF(LJMASS)THEN
                  CALL INITCARD( 'CARD3B1' )
                  IF(NWLF.LE.0)THEN
                      CALL INITCARD( 'CARD3B2' )
                      NWLF=1
                  ELSE

!                     "CARD3C" INCLUDES ALL THE CARD3CN DATA:
                      CALL INITCARD( 'CARD3C' )
                  ENDIF
              ELSE
                 
!                 CARD 3B1 USER DEFINED PHASE FUNCTION:
                 IF (.NOT.DRF_FLAG) THEN
                    READ(IRD,'(3(I5))')NANGLS,NWLF
                 ELSE
                    NANGLS = 50 !DRF
                    NWLF = 15   !DRF
                 ENDIF
                 WRITE(IPR,'(A,3(1X,I4))')' CARD 3B1*****',NANGLS,NWLF
                 IF(NWLF.LE.0)THEN
                    !PHASE FUNCTION HAS NO WAVELENGTH DEPENDENCE
!                     CARD 3B2:
                     IF(.NOT.DRF_FLAG) THEN
                      READ(IRD,'((5E10.3))')(ANGF(I),                   &
     &                  F(1,I,1),F(2,I,1),F(3,I,1),F(4,I,1),I=1,NANGLS)
                      ENDIF
                      WRITE(IPR,'(/A,5E10.3,/(15X,5E10.3))')            &
     &                  ' CARD 3B2***** ',(ANGF(I),                     &
     &                  F(1,I,1),F(2,I,1),F(3,I,1),F(4,I,1),I=1,NANGLS)
                      NWLF=1
                  ELSE

!                     CARD 3C1 (READ ANGLES IN DEGREES)
!                     CARD 3C2 (READ WAVELENGTHS IN MICRONS)
!                     CARD 3C3 (1ST AEROSOL)
!                     CARD 3C3 (READ FOR 1ST ANGLE AND ALL WAVELENGTHS)
!                     CARD 3C3 (READ FOR 2ND ANGLE AND ALL WAVELENGTHS)
!                     ...
!                     CARDS 3C4-3C6 (REPEAT FOR 2ND, 3RD & 4TH AEROSOLS)
!                     ...
                     IF (.NOT.DRF_FLAG) THEN
                        READ(IRD,'(8(1X,F9.0))')(ANGF(I),I=1,NANGLS)
                     ELSE
                        DO I=1,NANGLS
                           ANGF(I) = PHASE_ANGLES(I)*180.0/3.1415926536
                        ENDDO
                     ENDIF
                     WRITE(IPR,'(/A,/(8(1X,F9.4)))')                    &
     &                    ' CARD 3C1***** ',(ANGF(I),I=1,NANGLS)

                     IF (.NOT.DRF_FLAG) THEN
                        READ(IRD,'(8(1X,F9.0))')(WLF(I),I=1,NWLF)
                     ELSE
                        DO I=1,NWLF
                           WLF(I) = PHASE_WVLS(I)
                        ENDDO
                     ENDIF
                     WRITE(IPR,'(/A,/(8(1X,F9.4)))')                    &
     &                    ' CARD 3C2***** ',(WLF(I),I=1,NWLF)

                     DO K=1,NAERF
                        WRITE(IPR,'(/A,I1,A)')' CARDS 3C',K+2,'**** '
                        DO I=1,NANGLS
                           IF (.NOT.DRF_FLAG) THEN
                              READ(IRD,'(8(1X,E9.3))')                  &
     &                             (F(K,I,J),J=1,NWLF)
                           ELSE
                              !WRITE(*,*) 'MAX = ',MAERF,MANGLS,MWLF
                              DO J=1,NWLF
                                 !WRITE(*,*) 'I,J,K = ',I,J,K
                                 !WRITE(*,*) 'PFS = ',PFS(I,J,K)
                                 F(K,I,J) = PFS(I,J,K)
                              ENDDO
                           ENDIF
                           WRITE(IPR,'(8(1X,E9.3))')                    &
     &                          (F(K,I,J),J=1,NWLF)
                        ENDDO
                      ENDDO
                  ENDIF
              ENDIF
          ENDIF
      ENDIF
   30 CONTINUE
      IF(IRPT.EQ.3)THEN
          IF(IPARM.EQ.1 .OR. IPARM.EQ.11)                               &
     &      CALL SUBSOL(PARM3,PARM4,TIME,IDAY)
      ELSE

!         CARD 4 WAVENUMBER
          IF(LJMASS)THEN

!             AUXILIARY OUTPUT FILES ARE NOT GENERATED FOR JMASS:
              CALL INITCARD( 'CARD4' )
              YFLAG=' '
              XFLAG=' '
              DLIMIT='        '
              FLAGS='       '
              MLFLX=ML
          ELSE
             IF(DRF_FLAG) THEN
                  V1 = V1_INPUT
                  V2 = V2_INPUT
                  DV = DV_INPUT
                  FWHM = DV_INPUT*2.
                  YFLAG = 'R'
                  XFLAG = 'N'
                  DLIMIT = 'OUTPUT'
                  FLAGS = 'N6AA RT'
                  MLFLX = NUM_LEVS
             ELSE
              READ(IRD,'(4F10.0,2A1,A8,A7,I3)')                         &
     &          V1,V2,DV,FWHM,YFLAG,XFLAG,DLIMIT,FLAGS,MLFLX
              ENDIF
              FLAGS=UPCASE(FLAGS)
              IF(MLFLX.LE.0 .OR. MLFLX.GT.ML)MLFLX=ML
          ENDIF

!         TEST THE VALIDITY OF SPECTRAL INPUTS, DETERMINE THE PADDING
!         NECESSARY FOR V1 AND V2, AND SET IV1, IV2, IDV AND IFWHM.
          CALL CHKRES(FUNC,FWFUNC,IFUNC,DEGALL)

!         CHECK PLOT.DAT FILE FLAGS
          IF(YFLAG.EQ.'R' .OR. YFLAG.EQ.'r')THEN

!             WRITE SPECTRAL RADIANCES (TRANSMITTANCES IF IEMSCT=0
!             OR TRANSMITTED SOLAR IRRADIANCES IF IEMSCT=3)
              YFLAG='R'
              IF(IEMSCT.EQ.0)YFLAG='T'
          ELSEIF(YFLAG.EQ.'T' .OR. YFLAG.EQ.'t')THEN

!             WRITE TRANSMITTANCES
              YFLAG='T'
          ELSE

!             DO NOT WRITE TO THE PLOT.DAT FILE.
              YFLAG='N'
          ENDIF
          IF(YFLAG.NE.'N')THEN
              IF(XFLAG.EQ.'N' .OR. XFLAG.EQ.'n')THEN
                  XFLAG='N'
              ELSEIF(XFLAG.EQ.'M' .OR. XFLAG.EQ.'m')THEN
                  XFLAG='M'
              ELSE
                  XFLAG='W'
              ENDIF
               INQUIRE(IPLOT,OPENED=LOPEN)
               IF(.NOT.LOPEN)CALL OPNFL(IPLOT,PLTOUT,'UNKNOWN')
!	      LOPEN = .TRUE.
              IF(FLAGS(1:4).NE.'    ')THEN
                  INQUIRE(IPTSCN,OPENED=LOPEN)
                  IF(.NOT.LOPEN) CALL OPNFL(IPTSCN,PLTSCN,'UNKNOWN')
!		   LOPEN = .TRUE.
              ENDIF
          ENDIF
          IF(FLAGS(7:7).EQ.'T' .OR. FLAGS(7:7).EQ.'F')THEN
              INQUIRE(IFLUX,OPENED=LOPEN)
              IF(.NOT.LOPEN)CALL OPNFL(IFLUX,SPFLUX,'UNKNOWN')
          ENDIF
          IF(DIS .AND. IV2.LE.20)DIS=.FALSE.
          IF(DIS .AND. IV1.LE.10)IV1=10
          IF(.NOT.LJMASS)WRITE(IPR,'(/A,4I10)')                         &
     &      ' CARD 4  *****',IV1,IV2,IDV,IFWHM
          IF(IDV.LE.0)THEN
              WRITE(IPR,'(/2A,I10,A)')' WARNING:  IDV IS BEING',        &
     &          ' RESET FROM',IDV,' CM-1 TO 1 CM-1.'
              IDV=1
          ENDIF
          IF(IFWHM.LE.0)THEN
              WRITE(IPR,'(/2A,2(I10,A))')' WARNING:  IFWHM IS ',        &
     &          ' BEING RESET FROM',IFWHM,' CM-1 TO',2*IDV,' CM-1.'
              IFWHM=2*IDV
          ENDIF
          IF(IHAZE.EQ.3 .AND. IV1.LT.250)THEN
              IHAZE=4
              WRITE(IPR,'(//2A,/12X,2A)')' **WARNING** NAVY HAZE MODEL',&
     &          ' CAN NOT BE USED BELOW 250 CM-1.',' PROGRAM WILL',     &
     &          ' SWITCH TO LOWTRAN 5 MARITIME HAZE MODEL (IHAZE=4).'
          ENDIF
          IF(IRPT.LE.1)THEN

!             SCALE OZONE AND/OR WATER PROFILE:
              IF(H2OSTR.NE.'          ' .OR. O3STR.NE.'          ')     &
     &          CALL SCLCOL(H2OSTR,O3STR,H2OCOL,O3COL)
              IF(LJMASS)THEN
                  IF(IHAZE.GT.0 .AND. JPRT.NE.0)THEN
                      IF(ISEASN.EQ.0)ISEASN=1
                      IF(IVULCN.LE.0)IVULCN=1
                  ENDIF
              ELSE
                  WRITE(IPR,'(/2A)')                                    &
     &              ' PROGRAM WILL COMPUTE',HTRRAD(IEMSCT+1)
                  IF(ISOURC.EQ.1)WRITE(IPR,'(A)')'   LUNAR SOURCE ONLY'
                  IF(IMULT.NE.0)WRITE(IPR,'(/2A)')' CALCULATIONS',      &
     &              ' WILL BE DONE USING MULTIPLE SCATTERING'
                  IF(MODEL.GT.0)THEN
                      MM1=M1
                      IF(MM1.EQ.0)MM1=MODEL
                      MM2=M2
                      IF(MM2.EQ.0)MM2=MODEL
                      MM3=M3
                      IF(MM3.EQ.0)MM3=MODEL
                      WRITE(IPR,'(/A,/(10X,A,I5,5X,A))')                &
     &                  ' ATMOSPHERIC MODEL',                           &
     &                  'TEMPERATURE =',MM1,HMODEL(MM1),                &
     &                  'WATER VAPOR =',MM2,HMODEL(MM2),                &
     &                  'OZONE       =',MM3,HMODEL(MM3)
                      WRITE(IPR,'(22X,4(A,I6))')                        &
     &                  'M4 =',M4,' M5 =',M5,' M6 =',M6,' MDEF =' ,MDEF
                  ENDIF
                  IF(IHAZE.GT.0 .AND. JPRT.NE.0)THEN
                      IF(ISEASN.EQ.0)ISEASN=1
                      IF(IVULCN.LE.0)IVULCN=1
                      IHVUL=IVULCN+10
                      IF(IVULCN.EQ.6)IHVUL=11
                      IF(IVULCN.EQ.7)IHVUL=11
                      IF(IVULCN.EQ.8)IHVUL=13
                      IHMET=1
                      IF(IVULCN.GT.1)IHMET=2
                      WRITE(IPR,'(/A,/10X,A,T35,A,T60,A,T85,A,          &
     &                  //10X,A,T35,A,T60,F5.1,A,                       &
     &                  /(10X,A,T35,A,T60,A,T85,A))')' AEROSOL MODEL',  &
     &                  'REGIME','AEROSOL TYPE','PROFILE','SEASON',     &
     &                  'BOUNDARY LAYER (0-2 KM)',HHAZE(IHAZE),VIS,     &
     &                  ' KM METEOROLOGICAL RANGE AT SEA LEVEL',        &
     &                  'TROPOSPHERE  (2-10KM)',HHAZE(6),HHAZE(6),      &
     &                  HSEASN(ISEASN),'STRATOSPHERE (10-30KM)',        &
     &                  HHAZE(IHVUL),HVULCN(IVULCN),HSEASN(ISEASN),     &
     &                  'UPPER ATMOS (30-100KM)',HHAZE(16),HMET(IHMET)
                  ENDIF
                  IF(ITYPE.EQ.1)THEN
                      WRITE(IPR,'(/A,/(10X,A,F11.5,A))')                &
     &                  ' HORIZONTAL PATH',                             &
     &                  'ALTITUDE =',H1,' KM','RANGE    =',RANGE,' KM'
                  ELSEIF(ITYPE.EQ.2)THEN
                      WRITE(IPR,'(/A,6(/10X,A,F11.5,A),/10X,A,I7)')     &
     &                  ' SLANT PATH, H1 TO H2','H1    =',H1   ,' KM',  &
     &                  'H2    =',H2   ,' KM'   ,'ANGLE =',ANGLE,' DEG',&
     &                  'RANGE =',RANGE,' KM'   ,'BETA  =',BETA ,' DEG',&
     &                  'PHI   =',PHI  ,' DEG'  ,'LENN  =',LENN
                  ELSEIF(PHI.LE.0.)THEN
                      WRITE(IPR,'(/A,/(10X,A,F11.5,A))')                &
     &                  ' SLANT PATH TO SPACE','H1    =',H1,' KM',      &
     &                  'HMIN  =',H2,' KM','ANGLE =',ANGLE,' DEG'
                  ELSE
                      WRITE(IPR,'(/A,/(10X,A,F11.5,A))')                &
     &                  ' SLANT PATH TO SPACE',                         &
     &                  'H2    =',H2,' KM','PHI   =',PHI,' DEG'
                  ENDIF
              ENDIF
              IF(IEMSCT.EQ.2)THEN

!                 INTREPRET SOLAR SCATTERING PARAMETERS
                  IF(LJMASS)THEN
                      IF(IPARM.EQ.1 .OR. IPARM.EQ.11)                   &
     &                  CALL SUBSOL(PARM3,PARM4,TIME,IDAY)
                  ELSE
                      WRITE(IPR,'(/A)')                                 &
     &                  ' SINGLE SCATTERING CONTROL PARAMETERS SUMMARY'
                      IF(IPARM.EQ.2)THEN
                          WRITE(IPR,'(/(10X,A,T42,F10.4,A))')           &
     &                      'RELATIVE AZIMUTH AT H1 =',PARM1,           &
     &                      ' DEG EAST OF NORTH',                       &
     &                      'SOLAR ZENITH AT H1 =',PARM2,' DEG'
                      ELSEIF(IPARM.EQ.12)THEN
                          WRITE(IPR,'(/(10X,A,T42,F10.4,A))')           &
     &                      'RELATIVE AZIMUTH AT H2 =',PARM1,           &
     &                      ' DEG EAST OF NORTH',                       &
     &                      'SOLAR ZENITH AT H2 =',PARM2,' DEG'
                      ELSE
                          IF(IPARM.LT.2)THEN
                              WRITE(IPR,'(/(10X,A,T42,F10.4,A))')       &
     &                          'LATITUDE AT H1 =',PARM1,               &
     &                          ' DEG NORTH OF EQUATOR',                &
     &                          'LONGITUDE AT H1 =',PARM2,              &
     &                          ' DEG WEST OF GREENWICH'
                          ELSE
                              WRITE(IPR,'(/(10X,A,T42,F10.4,A))')       &
     &                          'LATITUDE AT H2 =',PARM1,               &
     &                          ' DEG NORTH OF EQUATOR',                &
     &                          'LONGITUDE AT H2 =',PARM2,              &
     &                          ' DEG WEST OF GREENWICH'
                          ENDIF
                          IF(IPARM.EQ.1 .OR. IPARM.EQ.11)               &
     &                      CALL SUBSOL(PARM3,PARM4,TIME,IDAY)
                          WRITE(IPR,'(/(10X,A,T42,F10.4,A))')           &
     &                      'SUBSOLAR LATITUDE =',PARM3,                &
     &                      ' DEG NORTH OF EQUATOR',                    &
     &                      'SUBSOLAR LONGITUDE =',PARM4,               &
     &                      ' DEG WEST OF GREENWICH'
                      ENDIF
                      IF(IPARM.LE.2)THEN
                          WRITE(IPR,'((10X,A,T42,F10.4,A))')            &
     &                      'TIME (<0 UNDEF) =',TIME,' GREENWICH TIME', &
     &                      'PATH AZIMUTH (FROM H1 TO H2) =',PSIPO,     &
     &                      ' DEG EAST OF NORTH'
                      ELSE
                          WRITE(IPR,'((10X,A,T42,F10.4,A))')            &
     &                      'TIME (<0 UNDEF) =',TIME,' GREENWICH TIME', &
     &                      'PATH AZIMUTH (FROM H2 TO H1) =',PSIPO,     &
     &                      ' DEG EAST OF NORTH'
                      ENDIF
                      WRITE(IPR,'(10X,A,T42,I10)')                      &
     &                  'DAY OF THE YEAR =',IDAY
                      IF(ISOURC.EQ.0)WRITE(IPR,'(/A)')                  &
     &                  ' EXTRATERRESTIAL SOURCE IS THE SUN'
                      IF(ISOURC.EQ.1)WRITE(IPR,'(/2A,F10.3,A)')         &
     &                  ' EXTRATERRESTIAL SOURCE IS THE MOON,',         &
     &                  ' MOON PHASE ANGLE =',ANGLEM,' DEG'
                      IF(IPH.EQ.0)WRITE(IPR,'(/A,F10.5)')               &
     &                  ' H-G PHASE FUNCTION ,G=',G
                      IF(IPH.EQ.1)WRITE(IPR,'(/A)')                     &
     &                  ' USER SUPPLIED PHASE FUNCTION'
                      IF(IPH.EQ.2)WRITE(IPR,'(/A)')                     &
     &                  ' PHASE FUNCTION FROM MIE DATA BASE'
                  ENDIF
              ENDIF
          ENDIF
          IF(MODTRN)THEN
              IV1=IBNDWD*((IV1+IBNDWD/2)/IBNDWD)
              IV2=IBNDWD*((IV2+IBNDWD/2)/IBNDWD)
              IDV=IBNDWD+IBNDWD*((IDV-IBNDWD)/IBNDWD)
              IF(IFWHM.LT.IBNDWD)IFWHM=IBNDWD
              IF(IFWHM.GT.50*IBNDWD)IFWHM=50*IBNDWD
          ELSE
              IV1=5*((IV1+2)/5)
              IV2=5*((IV2+2)/5)
              IDV=5+5*((IDV-5)/5)
              IBNDWD=IDV
              IFWHM=IBNDWD
          ENDIF
          IF(IV2.LT.IV1+IDV)THEN
              WRITE(IPR,'(/A)')                                         &
     &          ' IV2 WAS LESS THAN IV1 + IDV AND HAS BEEN RESET.'
              IV2=IV1+IDV
          ENDIF
          ALAM1= 99999.98
          IF(IV1.NE.0)ALAM1=10000./IV1
          ALAM2=10000./IV2
          IF(.NOT.LJMASS)WRITE(IPR,'(A,2(/13X,A,I10,A,F10.2,A),         &
     &      /(11X,A,I10,A))')' FREQUENCY RANGE','IV1 =',IV1,' CM-1  (', &
     &      ALAM1,' MICRONS)','IV2 =',IV2,' CM-1  (',ALAM2,' MICRONS)', &
     &      '  IDV =',IDV,' CM-1','IFWHM =',IFWHM,' CM-1'

!         LOAD ATMOSPHERIC PROFILE INTO /MODEL/
          CALL STDMDL(ICH(1),MARIC1,MARK,H2OAER,LNOVAM)

!         FILTER RESPONSE FUNCTION:
          IF(.NOT.LJMASS .AND. LNFILT.GT.0)THEN
              IF(FILTER(FILTNM,LNFILT))WRITE(IPR,'(/(A))')              &
     &          ' THE FILTER RESPONSE FUNCTION FILE ',                  &
     &          FILTNM(1:LNFILT),' WAS SUCCESSFULLY PROCESSED.'
          ENDIF
      ENDIF

!     DO NOT CREATE A MULTIPLE SCATTERING SCRATCH
!     FILE IF IT WILL BE EXCESSIVELY LARGE.
      IF(LSAVMS)THEN
          IF(ML*KNTRVL*((IV2-IV1)/IDV).GT.MAXDAT)THEN
              LSAVMS=.FALSE.
              LUSEMS=.FALSE.
              CLOSE(ISCRCH)
          ELSEIF(LUSEMS)THEN
              IF(.NOT.LJMASS)WRITE(IPR,'(/(2A))')                       &
     &          ' ***  ASYMMETRY FACTORS, OPTICAL DEPTHS AND VERTICAL', &
     &          ' FLUXES FROM   ***',' *** THE PREVIOUS MULTIPLE',      &
     &          ' SCATTERING CALCULATION WILL BE RE-USED. ***'
          ELSEIF(.NOT.LJMASS)THEN
              WRITE(IPR,'(/(2A))')' *** ASYMMETRY FACTORS, OPTICAL',    &
     &          ' DEPTHS AND VERTICAL FLUXES ***',' *** ARE BEING',     &
     &          ' SAVED IN A SCRATCH FILE FOR SUBSEQUENT USE. ***'
          ENDIF
      ENDIF

!     INITIALIZE COOLING RATE FITTING COEFFICIENTS
      IF(IMULT.NE.0)CALL COOL0(IRPT)
      TPTEMP=TPTMPS
      DO I=1,LAYTHR
          DO J=1,MEXT
              WPATH(I,J)=0.
              WPATHS(I,J)=0.
          ENDDO
      ENDDO

!     IF TARGET-BASED (H2) ZENITH ANGLE (PHI) HAS BEEN INPUT,
!     CONVERT TO OBSERVER-BASED (H1) LINE-OF-SIGHT PARAMETERS.
      ISSGEO=0
      IF(ITYPE.GT.1 .AND. PHI.GT.0.)THEN
          IF(H2.LT.GNDALT)THEN
              WRITE(IPR,'(2(A,F10.5,A),/4X,A)')                         &
     &          '  FINAL ALTITUDE (H2 =',H2,' KM) BELOW GROUND',        &
     &          ' (GNDALT =',GNDALT,' KM).','H2 WAS RESET TO GNDALT.'
              H2=GNDALT
          ENDIF
          CALL CNVPHI(IERROR,ITYPE,H1,H2,ANGLE,RANGE,BETA,LENN,PHI)
          IF(IERROR.NE.0)THEN
              IF(LJMASS)THEN
                  CALL WRTBUF(FATAL)
                  RETURN
              ENDIF
              GOTO 50
          ENDIF
      ELSEIF(H1.LT.GNDALT)THEN
          WRITE(IPR,'(2(A,F10.5,A),/4X,A)')                             &
     &      '  OBSERVER ALTITUDE (H1 =',H1,' KM) BELOW GROUND',         &
     &      ' (GNDALT =',GNDALT,' KM).','H1 WAS RESET TO GNDALT.'
          H1=GNDALT
      ENDIF

!     SAVE LINE-OF-SIGHT PARAMETERS SO /CARD3/ CAN BE USED
!     DURING MULTIPLE SCATTERING PATH CALCULATIONS.
      H1SAV=H1
      H2SAV=H2
      ANGSAV=ANGLE
      RNGSAV=RANGE
      BETASV=BETA
      ITYPSV=ITYPE
      LENNSV=LENN

!     ADJUST GEOMETRY INPUTS FOR SOLAR/LUNAR CALCULATIONS.
      IF(IEMSCT.EQ.2)THEN
          CALL NEWSRC(H1SAV,H2SAV,ANGSAV,RNGSAV,BETASV,LENNSV,          &
     &      IPARM,PARM1,PARM2,PARM3,PARM4,PSIPO,BETAH2,IERROR)
          IF(IERROR.NE.0)THEN
              IF(LJMASS)THEN
                  CALL WRTBUF(FATAL)
                  RETURN
              ENDIF
              GOTO 50
          ENDIF
      ENDIF
      IF(IMULT.NE.0)THEN
          H1=GNDALT
          H2=ZM(ML)
          ITYPE=2
          ANGLE=0.
          BETA=0.
          RANGE=0.
          MSOFF=LAYTWO
          CALL GEO(IERROR,BENDNG,MSOFF,ICH(1))

!         LOAD AEROSOL EXTINCTION, ABSORPTION, & ASYMMETRY COEFFICIENTS:
          CALL EXABIN(ICH)
          IMSMX=IKMAX
          IF(IEMSCT.EQ.2)THEN
              IF(IMULT.EQ.1 .OR. BETAH2.LE.0.)THEN

!                 SOLAR CONTRIBUTIONS TO MULTIPLE SCATTERING AT H1
                  CALL SSGEO(IERROR,IPH,PARM1,PARM2,PARM3,              &
     &              PARM4,PSIPO,G,MSOFF,ICH(1),KNTRVL,SOLAR_ZENITH)
              ELSE

!                 SOLAR CONTRIBUTIONS TO MULTIPLE SCATTERING AT H2
                  CALL H2SRC(BETAH2,IPH,PARM1,PARM2,PARM3,              &
     &              PARM4,PSIPO,G,MSOFF,ICH(1),KNTRVL,SOLAR_ZENITH)
              ENDIF
          ENDIF
      ENDIF
      H1=H1SAV
      H2=H2SAV
      ANGLE=ANGSAV
      RANGE=RNGSAV
      BETA=BETASV
      ITYPE=ITYPSV
      LENN=LENNSV

!     TRACE PATH THROUGH THE ATMOSPHERE AND CALCULATE ABSORBER AMOUNTS
      ISSGEO=0
      MSOFF=0
      CALL GEO(IERROR,BENDNG,MSOFF,ICH(1))
      CALL AERTMP

!     SAVE ZENITH ANGLE DATA.
      IF(IMULT.NE.0)THEN
          DO IK=1,IKMAX
              QTHETS(IK)=QTHETA(IK)
          ENDDO
      ENDIF
      IF(IERROR.GT.0)THEN
          IF(LJMASS)THEN
              CALL WRTBUF(FATAL)
              RETURN
          ENDIF
          GOTO 50
      ENDIF
      IF(IEMSCT.EQ.3 .AND. IERROR.EQ. -5)THEN
          WRITE(IPR,'(/2A)')' DIRECT PATH TO SUN INTERSECTS',           &
     &      ' THE EARTH: SKIP TO NEXT CASE'
          IF(LJMASS)THEN
              CALL WRTBUF(FATAL)
              RETURN
          ENDIF
          GOTO 50
      ENDIF

!     THE SECOND CALL TO SSGEO IS TO GET THE CORRECT ANGLES
!     FOR PHASE FUNCTIONS AND TO SAVE SOLAR PATH INFORMATION.
      IF(IEMSCT.EQ.2)CALL SSGEO(IERROR,IPH,PARM1,                       &
     &  PARM2,PARM3,PARM4,PSIPO,G,MSOFF,ICH(1),KNTRVL,SOLAR_ZENITH)
      IF(IERROR.GT.0)THEN
          IF(LJMASS)THEN
              CALL WRTBUF(FATAL)
              RETURN
          ENDIF
          GOTO 50
      ENDIF
      IF(IMULT.NE.0)THEN
          DO IK=1,IKMAX
              QTHETA(IK)=QTHETS(IK)
          ENDDO
      ENDIF

!     LOAD AEROSOL EXTINCTION, ABSORPTION, AND ASYMMETRY COEFFICIENTS:
      CALL EXABIN(ICH)

!     SURFACE REFLECTANCE MODEL:
      AATEMP=0.
!DRF      IF(.NOT.RFLECT(SURREF,DATDIR,LENDAT))THEN
      WRITE(*,*) 'ICE_FLAG in driver = ',ICE_FLAG
         IF(.NOT.RFLECT(SURREF,DATDIR,LENDAT,LAND_FLAG,ICE_FLAG,        &
     &                  BRDF_LEN,BRDF_WVL,BRDF_PARAM))THEN
          WRITE(IPR,'(/2A,/18X,3A)')' Error in DRIVER: ',               &
     &      ' Surface reflectance specification based on',              &
     &      ' input SURREF = "',SURREF,'" was not successful.'
          IF(LJMASS)THEN
              CALL WRTBUF(FATAL)
              RETURN
          ELSE
              STOP 'Error in DRIVER:  Surface not defined; check tape6.'
          ENDIF
      ENDIF

!     LOGICAL GROUND IS TRUE IF LINE-OF-SIGHT TERMINATES AT THE GROUND:
      GROUND=.FALSE.
      IF(H2.LE.GNDALT)GROUND=.TRUE.

!     AREA-AVERAGED SURFACE TEMPERATURE (IF NOT YET DEFINED):
      IF(AATEMP.LE.0.)THEN
          IF(GROUND .AND. TPTEMP.GT.0.)THEN

!             USED TARGET-PIXEL VALUE SINCE IT IS ON THE GROUND:
              AATEMP=TPTEMP
          ELSE

!             SET TO BOTTOM TEMPERATURE PROFILE VALUE:
              AATEMP=TM(1)
          ENDIF
      ENDIF
   40 CONTINUE
      IF(LJMASS)THEN

!         CARD 5
          CALL INITCARD( 'CARD5' )
      ELSE

!         WRITE HEADER DATA:
          WRITE(IPU,'(2A1,I3,12I5,F8.3,A7)')CODE,SPEED,MODEL,ITYPE,     &
     &      IEMSCT,IMULT,M1,M2,M3,M4,M5,M6,MDEF,IM,NOPRNT,TPTEMP,SURREF
          WRITE(IPUSCR,'(2A1,I3,12I5,F8.3,A7)')CODE,SPEED,MODEL,ITYPE,  &
     &      IEMSCT,IMULT,M1,M2,M3,M4,M5,M6,MDEF,IM,NOPRNT,TPTEMP,SURREF
          WRITE(IPR1,'(2A1,I3,12I5,F8.3,A7)')CODE,SPEED,MODEL,ITYPE,    &
     &      IEMSCT,IMULT,M1,M2,M3,M4,M5,M6,MDEF,IM,NOPRNT,TPTEMP,SURREF
          WRITE(IPU,'(6I5,5F10.5)')IHAZE,ISEASN,IVULCN,                 &
     &      ICSTL,ICLD,IVSA,VIS,WSS,WHH,RAINRT,GNDALT
          WRITE(IPUSCR,'(6I5,5F10.5)')IHAZE,ISEASN,IVULCN,              &
     &      ICSTL,ICLD,IVSA,VIS,WSS,WHH,RAINRT,GNDALT
          WRITE(IPR1,'(6I5,5F10.5)')IHAZE,ISEASN,IVULCN,                &
     &      ICSTL,ICLD,IVSA,VIS,WSS,WHH,RAINRT,GNDALT
          IF(ICLD.LT.1 .OR. ICLD.GT.10)THEN
              WRITE(IPU,'(3F8.3,I4)')CTHIK,CALT,CEXT,ISEED
              WRITE(IPUSCR,'(3F8.3,I4)')CTHIK,CALT,CEXT,ISEED
              WRITE(IPR1,'(3F8.3,I4)')CTHIK,CALT,CEXT,ISEED
          ELSE
              WRITE(IPU,'(3F8.3,2I4,6F8.3)')CTHIK,CALT,CEXT,            &
     &          NCRALT,NCRSPC,CWAVLN,CCOLWD,CCOLIP,CHUMID,ASYMWD,ASYMIP
              WRITE(IPUSCR,'(3F8.3,2I4,6F8.3)')CTHIK,CALT,CEXT,         &
     &          NCRALT,NCRSPC,CWAVLN,CCOLWD,CCOLIP,CHUMID,ASYMWD,ASYMIP
              WRITE(IPR1,'(3F8.3,2I4,6F8.3)')CTHIK,CALT,CEXT,           &
     &          NCRALT,NCRSPC,CWAVLN,CCOLWD,CCOLIP,CHUMID,ASYMWD,ASYMIP
          ENDIF
          IF(H2OSTR.EQ.'          ' .AND. O3STR.EQ.'          ')THEN
              WRITE(IPU,'(3F10.5)')ZCVSA,ZTVSA,ZINVSA
              WRITE(IPUSCR,'(3F10.5)')ZCVSA,ZTVSA,ZINVSA
              WRITE(IPR1,'(3F10.5)')ZCVSA,ZTVSA,ZINVSA
          ELSE
              WRITE(IPU,'(3F10.5,2F10.6,A)')ZCVSA,ZTVSA,ZINVSA,         &
     &          .1*H2OCOL,.1*O3COL,' ! H2O & O3 COLUMNS [GM/CM2]'
              WRITE(IPUSCR,'(3F10.5,2F10.6,A)')ZCVSA,ZTVSA,ZINVSA,      &
     &          .1*H2OCOL,.1*O3COL,' ! H2O & O3 COLUMNS [GM/CM2]'
              WRITE(IPR1,'(3F10.5,2F10.6,A)')ZCVSA,ZTVSA,ZINVSA,        &
     &          .1*H2OCOL,.1*O3COL,' ! H2O & O3 COLUMNS [GM/CM2]'
          ENDIF
          WRITE(IPU,'(I5,A)')ML,HMODEL(7)
          WRITE(IPUSCR,'(I5,A)')ML,HMODEL(7)
          WRITE(IPR1,'(I5,A)')ML,HMODEL(7)
          IF(MODEL.EQ.0)THEN
              HMDLZ(8)=RANGE
              WRITE(IPU,'(3F10.5,1P,5E10.3)')(HMDLZ(I),I=1,8)
              WRITE(IPUSCR,'(3F10.5,1P,5E10.3)')(HMDLZ(I),I=1,8)
              WRITE(IPR1,'(3F10.5,1P,5E10.3)')(HMDLZ(I),I=1,8)
          ELSE
              WRITE(IPU,'(6F10.5,I5)')H1,H2,ANGLE,RANGE,BETA,RO,LENN
              WRITE(IPUSCR,'(6F10.5,I5)')H1,H2,ANGLE,RANGE,BETA,RO,LENN
              WRITE(IPR1,'(6F10.5,I5)')H1,H2,ANGLE,RANGE,BETA,RO,LENN
          ENDIF
          WRITE(IPU,'(4I5)')IPARM,IPH,IDAY,ISOURC
          WRITE(IPUSCR,'(4I5)')IPARM,IPH,IDAY,ISOURC
          WRITE(IPR1,'(4I5)')IPARM,IPH,IDAY,ISOURC
          WRITE(IPU,'(8F10.5)')                                         &
     &      PARM1,PARM2,PARM3,PARM4,TIME,PSIPO,ANGLEM,G
          WRITE(IPUSCR,'(8F10.5)')                                      &
     &      PARM1,PARM2,PARM3,PARM4,TIME,PSIPO,ANGLEM,G
          WRITE(IPR1,'(8F10.5)')                                        &
     &      PARM1,PARM2,PARM3,PARM4,TIME,PSIPO,ANGLEM,G
          WRITE(IPU,'(4I10)')IV1,IV2,IDV,IFWHM
          WRITE(IPUSCR,'(4I10,2A1,A8,A6)')                              &
     &      IV1,IV2,IDV,IFWHM,YFLAG,XFLAG,DLIMIT,FLAGS
          WRITE(IPR1,'(4I10)')IV1,IV2,IDV,IFWHM

!         CARD 5
          CALL CARD5(LNFLRT,FLRT)
          WRITE(IPU,'(I5,A1,3(I3,F9.3))')ABS(IRPT),                     &
     &      AMOD3D,NFACMN,SCALMN,NFACMX,SCALMX,IFAC,FACMC
          WRITE(IPUSCR,'(I5,A1,3(I3,F9.3))')ABS(IRPT),                  &
     &      AMOD3D,NFACMN,SCALMN,NFACMX,SCALMX,IFAC,FACMC
          WRITE(IPR1,'(I5,A1,3(I3,F9.3))')ABS(IRPT),                    &
     &      AMOD3D,NFACMN,SCALMN,NFACMX,SCALMX,IFAC,FACMC
      ENDIF
      IRPTSV=IRPT
      IRPT=ABS(IRPT)
      
!     CHECK TO SEE IF TAPE7.SCR EXISTS AND IS TO BE REUSED.
      LSKIP=.FALSE.
      IF(FLAGS(6:6).EQ.'R' .AND. LXIST7)                                &
     &  CALL REUSE(IV1,IV2,IDV,LSKIP,IEMSCT,IPUSCR)
      IF(LSKIP)THEN
          WRITE(IPR,'(/2A)')' *****  CALL TO TRANS IS SKIPPED ',        &
     &      '- PREVIOUS RESULTS ARE CONVOLVED  *****'
          INQUIRE(IPLOT,OPENED=LOPEN)
!	      LOPEN = .TRUE.
          IF(LOPEN)WRITE(IPR,'(A)')DLIMIT
      ELSEIF(MODTRN .AND. IBNDWD.EQ.15 .AND. .NOT.LSUN)THEN
          CALL TRANS(IPH,ISOURC,IDAY,ANGLEM,                            &
     &      GROUND,IMSMX,KNTRVL,LNFILT,GETS15,APPREF,WV_HRES,           &
     &      RADIANCE_HRES,NUM_HRES,SOLAR_FLUX,NUM_LRES,DIFFUSE_FLUX,    &
     &      LNFLRT,FLRT)
      ELSE
          CALL TRANS(IPH,ISOURC,IDAY,ANGLEM,                            &
     &      GROUND,IMSMX,KNTRVL,LNFILT,GETS01,APPREF,WV_HRES,           &
     &      RADIANCE_HRES,NUM_HRES,SOLAR_FLUX,NUM_LRES,DIFFUSE_FLUX,    &
     &      LNFLRT,FLRT)
      ENDIF
      IF(AMOD3D.EQ.'C' .AND. IRPT.NE.0)THEN

!         SAVE .mc FILE AND OPEN .mch FILE.
          CLOSE(IDBOUT,STATUS='KEEP')
          IF(LNFLRT.LE.0)THEN
              OPEN(IDBOUT,FILE='mch.dat',STATUS='UNKNOWN')
              CLOSE(IDBOUT,STATUS='DELETE')
              OPEN(IDBOUT,FILE='mch.dat',STATUS='NEW')
          ELSE
              OPEN(IDBOUT,FILE=FLRT(1:LNFLRT)//'.mch',STATUS='UNKNOWN')
              CLOSE(IDBOUT,STATUS='DELETE')
              OPEN(IDBOUT,FILE=FLRT(1:LNFLRT)//'.mch',STATUS='NEW')
          ENDIF
      ENDIF
   50 CONTINUE

!     WRITE END OF FILE LABEL FOR TAPE7 AND TAPE8
      IF(.NOT.LJMASS)THEN
          WRITE(IPU ,'(A)')' -9999.'
          WRITE(IPR1,'(A)')' -9999.'
      ENDIF
      IF(IERROR.GT.0)THEN
          IF(LJMASS)THEN
              CALL INITCARD( 'CARD5' )
          ELSE
              CALL CARD5(LNFLRT,FLRT)
              WRITE(IPU,'(I5,A1,3(I3,F9.3))')ABS(IRPT),                 &
     &          AMOD3D,NFACMN,SCALMN,NFACMX,SCALMX,IFAC,FACMC
              WRITE(IPUSCR,'(I5,A1,3(I3,F9.3))')ABS(IRPT),              &
     &          AMOD3D,NFACMN,SCALMN,NFACMX,SCALMX,IFAC,FACMC
              WRITE(IPR1,'(I5,A1,3(I3,F9.3))')ABS(IRPT),                &
     &          AMOD3D,NFACMN,SCALMN,NFACMX,SCALMX,IFAC,FACMC
          ENDIF
          IRPTSV=IRPT
          IRPT=ABS(IRPT)
      ENDIF

!     DEALLOCATE CLOUD SPECTRAL DATA ARRAYS:
      IF(NCRSPC.EQ.1 .AND. IRPT.NE.3 .AND. IRPT.NE.4)CALL CRDEAL

!     DEGRADE USING INFORMATION IN THE SCRATCH FILE TAPE7.SCR
      IF(FLAGS(1:4).EQ.'    ')THEN
          FLAGS(5:6)='  '
      ELSEIF(IERROR.EQ.0)THEN
         CALL DGRD(DEGALL,IFUNC,FWFUNC,LSKIP,WVLNGTH_LRES,RADIANCE_LRES,&
     &             NUM_LRES)
      ENDIF
      IF(.NOT.LJMASS)WRITE(IPUSCN,'(A)')' -9999.'
      IF(IRPT.EQ.0)THEN
          IF(.NOT.LJMASS)THEN
              IF(IFAC.LT.NFACMX)THEN

!                 REWIND IPUSCR TO AVOID SAVING TOO MUCH DATA:
                  REWIND(IPUSCR)
              ELSEIF(FLAGS(5:5).NE.'S')THEN
                  CLOSE(IPUSCR,STATUS='DELETE')
              ELSE
                  CLOSE(IPUSCR,STATUS='KEEP')
              ENDIF
          ENDIF
      ELSE
          IF(.NOT.LJMASS)REWIND(IPUSCR)
          IF(FLAGS(5:5).NE.'S')THEN
              LXIST7=.FALSE.
          ELSE
              LXIST7=.TRUE.
          ENDIF
      ENDIF
      IF(.NOT.LJMASS)WRITE(IPR,'(/A,I5,A1,3(I3,F9.0))')' CARD 5 *****', &
     &  IRPT,AMOD3D,NFACMN,SCALMN,NFACMX,SCALMX,IFAC,FACMC
      IF(IRPT.EQ.5 .OR. IFAC.LT.NFACMX)THEN
          IF(.NOT.LJMASS .AND. IRPTSV.EQ.-5)WRITE(*,'(/A)')             &
     &      ' Beginning MODTRAN repeat run with scaled amounts.'
          GOTO 40
      ELSEIF(IRPT.EQ.4)THEN

!         ENTER NEW SPECTRAL INPUTS:
!           LINE-OF-SIGHT CALCULATIONS ARE REPEATED BECAUSE INDEX
!           OF REFRACTION CHANGES.  USE SAVED GEOMETRY INPUTS.
          H1=H1SAV
          H2=H2SAV
          ANGLE=ANGSAV
          RANGE=RNGSAV
          BETA=BETASV
          ITYPE=ITYPSV
          LENN=LENNSV
          IF(.NOT.LJMASS .AND. IRPTSV.EQ.-4)WRITE(*,'(/A)')             &
     &      ' Beginning MODTRAN repeat run with new spectral inputs.'
          GOTO 30
      ELSEIF(IRPT.EQ.3)THEN

!         ENTER NEW GEOMETRY INPUTS:
          IF(.NOT.LJMASS .AND. IRPTSV.EQ.-3)WRITE(*,'(/A)')             &
     &      ' Beginning MODTRAN repeat run with new geometry inputs.'
          GOTO 20
      ELSEIF(IRPT.EQ.1 .OR. IRPT.EQ.0)THEN

         DODB=UPCASE(DODB)
         IF(DODB.EQ.'ADBONLY') THEN
!SSI        CALL WRTDB(DBOUT)
!           CREATE ADB BUT REWIND TAPE6, TAPE7, TAPE8.
            REWIND(IPR)
            REWIND(IPU)
            REWIND(IPR1)
!DRF            REWIND(IPLOT,ERR=60)
   60       CONTINUE
         ELSEIF(INDEX(DODB,'ADB').NE.0) THEN
!SSI        CALL WRTDB(DBOUT)
!           CREATE ADB BUT REWIND ONLY TAPE7.
            REWIND(IPU)
         ELSE
!SSI        CLOSE(IDBIN,STATUS='DELETE',ERR=70)
            INQUIRE(IDBOUT,OPENED=LOPEN)
            IF(LOPEN)CLOSE(IDBOUT,STATUS='DELETE',ERR=70)
   70       CONTINUE
         ENDIF

!         ENTER ALL NEW INPUTS:
          IF(.NOT.LJMASS .AND. IRPTSV.EQ.-1)WRITE(*,'(/A)')             &
     &      ' Beginning MODTRAN repeat run with all new inputs.'
          IF(IRPT.EQ.1)GOTO 10
          IF(KNTRVL.GT.1 .AND. AMOD3D.EQ.'T')CALL M3DDB(KNTRVL,IKMAX,   &
     &                                                   LNFLRT,FLRT)
      ENDIF

!DRF  WRITE OUT IPLOT
      !WRITE(*,*) 'RADIANCE_HRES = ',RADIANCE_HRES
      !WRITE(*,*) 'WV_HRES = ',WV_HRES
!DRF
!     RETURN TO MAIN
      IF(LJMASS)CALL WRTBUF(SUCCESS)

      RETURN
      END
