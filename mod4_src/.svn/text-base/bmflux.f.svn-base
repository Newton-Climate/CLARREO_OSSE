      SUBROUTINE BMFLUX(V,ML,KNTRVL,IEMSCT,SALB,AADREF,S0,NUM_LRES,     &
     &                  SOLAR_FLUX,NUM_LEVS,FLX_UPDIFFUSE,FLX_DNDIFFUSE,&
     &                  FLX_DNDIRECT)

!     FLUX ADDING MULTIPLE SCATTERING ROUTINE.

!     INPUTS:
!       V        SPECTRAL FREQUENCY [CM-1].
!       ML       NUMBER OF ATMOSPHERIC LAYER BOUNDARIES.
!       KNTRVL   NUMBER OF INTERVALS IN CORRELATED-K APPROACH.
!       IEMSCT   FLAG = 1 FOR THERMAL SCATTER ONLY.
!                     = 2 FOR THERMAL AND SOLAR SCATTER.
!       SALB     SURFACE SCATTERING ALBEDO.
!       AADREF   DIRECTIONAL REFLECTIVITY AT SOLAR ZENITH ANGLE.
!       S0       SOURCE IRRADIANCE [W CM-2 / CM-1].
      INTEGER ML,KNTRVL,IEMSCT
      REAL V,SALB,AADREF,S0

!     PARAMETERS:
!       MDISCL   MAXIMUM NUMBER OF DISORT SCALING FREQUENCIES.
      INTEGER MDISCL
      PARAMETER(MDISCL=12)
      INCLUDE 'PARAMS.h'
      INCLUDE 'ERROR.h'

      !DRF
      INTEGER NUM_LRES
      REAL SOLAR_FLUX(NUM_LRES)
      INTEGER NUM_LEVS
      REAL FLX_UPDIFFUSE(NUM_LEVS,NUM_LRES)
      REAL FLX_DNDIFFUSE(NUM_LEVS,NUM_LRES) 
      REAL FLX_DNDIRECT(NUM_LEVS,NUM_LRES)
      !DRF

!     COMMONS:

!     /MSRD/
!       CSSCAT   COSINE OF THE SCATTERING ANGLE.
!                (AT H1 IF IMULT=1; AT OR "NEAR" H2 IF IMULT=-1)
!       SLEGEN   Nth LEGENDRE POLYNOMIAL EVALUATED AT THE COSINE OF THE
!                SCATTERING ANGLE TIMES (2N+1)/4pi (N=0 TO NSTR-1).
!       CSZEN0   LAYER BOUNDARY COSINE OF SOLAR/LUNAR ZENITH.
!       CSZEN    LAYER AVERAGE COSINE OF SOLAR/LUNAR ZENITH.
!       CSZENX   AVERAGE SOLAR/LUNAR COSINE ZENITH EXITING
!                (AWAY FROM EARTH) THE CURRENT LAYER.
!       BBGRND   THERMAL EMISSION (FLUX) AT THE GROUND [W CM-2 / CM-1].
!       BBNDRY   LAYER BOUNDARY THERMAL EMISSION (FLUX) [W CM-2 / CM-1].
!       TCONT    LAYER CONTINUUM OPTICAL DEPTH.
!       TAUT     LAYER TOTAL OPTICAL DEPTH.
!       GTSCAT   SUM OVER SCATTERING SOURCES OF SCATTERING OPTICAL DEPTH
!                AND PHASE FUNCTION LEGENDRE COEFFICIENT PRODUCTS.
!       COSBAR   LAYER EFFECTIVE SCATTERING ASYMMETRY FACTOR.
!       DEPRAT   FRACTIONAL DECREASE IN WEAK-LINE OPTICAL DEPTH TO SUN.
!       S0DEP    OPTICAL DEPTH FROM LAYER BOUNDARY TO SUN.
!       S0TRN    TRANSMITTED SOLAR IRRADIANCES [W CM-2 / CM-1]
!       UPF      LAYER BOUNDARY UPWARD THERMAL FLUX [W CM-2 / CM-1].
!       DNF      LAYER BOUNDARY DOWNWARD THERMAL FLUX [W CM-2 / CM-1].
!       UPFS     LAYER BOUNDARY UPWARD SOLAR FLUX [W CM-2 / CM-1].
!       DNFS     LAYER BOUNDARY DOWNWARD SOLAR FLUX [W CM-2 / CM-1].
      REAL CSSCAT,SLEGEN,CSZEN0,CSZEN,CSZENX,TCONT,TAUT,GTSCAT,COSBAR,  &
     &  BBGRND,BBNDRY,S0DEP,S0TRN,DEPRAT,UPF,DNF,UPFS,DNFS
      COMMON/MSRD/CSSCAT,SLEGEN(0:MAZ),                                 &
     &  CSZEN0(LAYDIM),CSZEN(LAYDIM),CSZENX(LAYDIM),TCONT(LAYDIM),      &
     &  TAUT(MXKSUB,LAYDIM),GTSCAT(0:MXCMU,1:LAYDIM),COSBAR(LAYDIM),    &
     &  BBGRND,BBNDRY(LAYDIM),S0DEP(MXKSUB,LAYTWO),S0TRN(MXKSUB,LAYTWO),&
     &  DEPRAT(MXKSUB,LAYDIM),UPF(MXKSUB,LAYDIM),DNF(MXKSUB,LAYDIM),    &
     &  UPFS(MXKSUB,LAYDIM),DNFS(MXKSUB,LAYDIM)
      REAL EDN,EUP,EUPC,TDF,RUPC,REF,EDNS,EUPS,EUPCS,TDFS,RUPCS,REFS
      COMMON/FLUX/EDN(LAYDIM),EUP(LAYDIM),EUPC(LAYDIM),TDF(LAYDIM),     &
     &  RUPC(LAYDIM),REF(LAYDIM),EDNS(LAYDIM),EUPS(LAYDIM),             &
     &  EUPCS(LAYDIM),TDFS(LAYDIM),RUPCS(LAYDIM),REFS(LAYDIM)
      INCLUDE 'IFIL.h'

!     /NETFLX/
!       SUBINT   SPECTRAL BIN "K" SUB-INTERVAL FRACTIONAL WIDTHS.
!       UPFLX    LAYER BOUNDARY UPWARD THERMAL SPECTRAL
!                FLUX (INCLUDES SCATTERED SOLAR IF DISORT
!                & NO AZIMUTH DEPENDENCE) [W CM-2 / CM-1].
!       DNFLX    LAYER BOUNDARY DOWNWARD THERMAL SPECTRAL
!                FLUX (INCLUDES SCATTERED SOLAR IF DISORT
!                & NO AZIMUTH DEPENDENCE) [W CM-2 / CM-1].
!       UPFLXS   LAYER BOUNDARY UPWARD SCATTERED SOLAR
!                SPECTRAL FLUX (USED WITH DISORT ONLY
!                IF AZIMUTH DEPENDENT) [W CM-2 / CM-1].
!       DNFLXS   LAYER BOUNDARY DOWNWARD SCATTERED SOLAR
!                SPECTRAL FLUX (USED WITH DISORT ONLY
!                IF AZIMUTH DEPENDENT) [W CM-2 / CM-1].
!       NTFLX    LAYER BOUNDARY NET (THERMAL PLUS SCATTERED SOLAR PLUS
!                DIRECT SOLAR) UPWARD SPECTRAL FLUX [W CM-2 / CM-1].
      REAL SUBINT,UPFLX,DNFLX,UPFLXS,DNFLXS,NTFLX
      COMMON/NETFLX/SUBINT(MXKSUB),UPFLX(LAYDIM),DNFLX(LAYDIM),         &
     &  UPFLXS(LAYDIM),DNFLXS(LAYDIM),NTFLX(LAYDIM)

!     /SAVEMS/
!       LUSEMS  LOGICAL, TRUE IF MULTIPLE SCATTERING DATA IS REUSED.
!       LSAVMS  LOGICAL, TRUE IF MULTIPLE SCATTERING DATA IS  SAVED.
      LOGICAL LUSEMS,LSAVMS
      COMMON/SAVEMS/LUSEMS,LSAVMS

!     /WTFLX/
!       NFLUX   SPECTRAL BIN COUNTER FOR FLUX TABLE.
!       UPDIFF  BOUNDARY UPWARD DIFFUSE SPECTRAL FLUX [W CM-2 / CM-1].
!       DNDIFF  BOUNDARY DOWNWARD DIFFUSE SPECTRAL FLUX [W CM-2 / CM-1].
!       DNDRCT  BOUNDARY DIRECT SOLAR SPECTRAL FLUX [W CM-2 / CM-1].
!       NTERMS  NUMBER OF TERMS IN FLUX SPECTRAL SUM.
!       SMUPDF  LAYER BOUNDARY UPWARD DIFFUSE IN-BAND FLUX [W CM-2].
!       SMDNDF  LAYER BOUNDARY DOWNWARD DIFFUSE IN-BAND FLUX [W CM-2].
!       SMDNDR  LAYER BOUNDARY DIRECT SOLAR IN-BAND FLUX [W CM-2].
      INTEGER NFLUX,NTERMS
      REAL UPDIFF,DNDIFF,DNDRCT,SMUPDF,SMDNDF,SMDNDR
      COMMON/WTFLX/NFLUX,UPDIFF(0:NBINS,1:LAYDIM),                      &
     &  DNDIFF(0:NBINS,1:LAYDIM),DNDRCT(0:NBINS,1:LAYDIM),              &
     &  NTERMS,SMUPDF(LAYDIM),SMDNDF(LAYDIM),SMDNDR(LAYDIM)

!     /CARD4/
!       IV1      LOWEST FREQUENCY OUTPUT [CM-1].
!       IV2      HIGHEST FREQUENCY OUTPUT [CM-1].
!       IDV      PRINTOUT FREQUENCY STEP SIZE [CM-1].
!       IFWHM    TRIANGULAR SLIT FULL-WIDTH-HALF-MAXIMUM [CM-1].
!       IVX      CURRENT COMPUTATION FREQUENCY [CM-1].
!       IVOFF    OFFSET BETWEEN COMPUTATION AND OUTPUT FREQUENCIES,
!                REQUIRED FOR SLIT FUNCTION [CM-1].
!       IWRITE   COMPUTATION FREQUENCY OF NEXT WRITE [CM-1].
!       NSPCDT   NUMBER OF OUTPUT SPECTRAL DATA POINTS.
!       NWGT     NUMBER OF SPECTRAL BINS CONTRIBUTING TO SLIT FUNCTION.
!       WGT      NORMALIZED WEIGHTS USED TO DEFINE THE SLIT FUNCTION.
      INTEGER IV1,IV2,IDV,IFWHM,IVX,IVOFF,IWRITE,NSPCDT,NWGT
      REAL WGT
      COMMON/CARD4/IV1,IV2,IDV,IFWHM,IVX,IVOFF,IWRITE,NSPCDT,           &
     &  NWGT,WGT(NBINS)

!     COMMON/CFLAGS/
!       YFLAG    Y COORDINATE FLAG FOR plot.dat FILE
!                  = "T" FOR TRANSMITTANCE
!                  = "R" FOR RADIANCE (IRRADIANCE FOR IEMSCT=3)
!                  = "N" FOR NO plot.dat OUTPUT
!       XFLAG    X COORDINATE FLAG FOR plot.dat FILE
!                  = "W" FOR FREQUENCY IN WAVENUMBERS (CM-1) AND
!                        RADIANCE IN W SR-1 CM-2 / CM-1
!                  = "M" FOR WAVELENGTH IN MICRONS AND
!                        RADIANCE IN W SR-1 CM-2 / MICRON
!                  = "N" FOR WAVELENGTH IN NANOMETERS AND
!                        RADIANCE IN MICRO-WATTS SR-1 CM-2 / NANOMETER
!       DLIMIT   DELIMITER CHARACTER STRING BETWEEN MODTRAN RUNS
!       FLAGS    SCANNING FUNCTION FLAGS.
      CHARACTER YFLAG*1,XFLAG*1,DLIMIT*8,FLAGS*7
      COMMON/CFLAGS/YFLAG,XFLAG,DLIMIT,FLAGS

!     /DISRT/
!       DIS      LOGICAL FLAG, TRUE FOR DISORT MULTIPLE SCATTERING.
!       DISAZM   LOGICAL FLAG, TRUE FOR DISORT WITH AZIMUTH DEPENDENCE.
!       DISALB   LOGICAL FLAG, TRUE FOR DISORT SPHERICAL ALBEDO OPTION.
!       LDISCL   LOGICAL FLAG, TRUE FOR ISAACS SCALED TO DISORT.
!       NSTR     NUMBER OF DISCRETE ORDINATE STREAMS.
!       NAZ      NUMBER OF DISORT AZIMUTH COMPONENTS.
!       N2GAUS   ORDER OF DOUBLE-GAUSS QUADRATURES.
      LOGICAL DIS,DISAZM,DISALB,LDISCL
      INTEGER NSTR,NAZ,N2GAUS
      COMMON/DISRT/DIS,DISAZM,DISALB,LDISCL,NSTR,NAZ,N2GAUS

!     /DISCAL/
      INTEGER NDISCL
      REAL VDISCL,RDISCL
      COMMON/DISCAL/NDISCL,VDISCL(MDISCL),RDISCL(2,MDISCL)

      REAL SCALE
      INTEGER JLO

!     DECLARE BLOCK DATA ROUTINES EXTERNAL:
      EXTERNAL DEVCBD

!     INTERNAL VARIABLES:
!       EUP(N)    INTRINSIC UPWARD THERMAL FLUX OF LAYER N
!       EDN(N)    INTRINSIC DOWNWARD THERMAL FLUX OF LAYER N
!       TDF(N)    INTRINSIC THERMAL TRANSMISSION OF LAYER N
!       REF(N)    INTRINSIC THERMAL REFLECTANCE OF LAYER N
!       EUPS(N)   INTRINSIC UPWARD SOLAR FLUX OF LAYER N
!       EDNS(N)   INTRINSIC DOWNWARD SOLAR FLUX OF LAYER N
!       TDFS(N)   INTRINSIC SOLAR TRANSMISSION OF LAYER N
!       REFS(N)   INTRINSIC SOLAR REFLECTANCE OF LAYER N

!     LOCAL VARIABLES:
      INTEGER NLAYRS,IKP1,N,NM1,IK,INTRVL
      REAL RDNCN,RUPCN,EUPCN,RDNCNS,RUPCNS,EUPCNS,TAU,A1ME0,A2C,        &
     &  EDNCN,EDNCNS,AC,DENOM,RT3,COEF,A2C2,C,HALFE1,E0,EXPAN,          &
     &  ONEME0,E1,COEF1,COEF2,ACM1,ONEPE0,ONEME1,E2,EX,SOURC,CZTS0

!     DATA:
      DATA RT3/1.7320508/

!     NUMBER OF LAYERS:
      NLAYRS=ML-1
      WRITE(*,*) 'into bmflux'
!     LOOP OVER K BINS:
      DO INTRVL=1,KNTRVL

!         SURFACE DIFFUSE REFLECTANCE (ALBEDO) AND THERMAL EMISSION:
          RUPCN=SALB
          EUPCN=(1.-RUPCN)*BBGRND
          EUPC(ML)=EUPCN
          IF(IEMSCT.EQ.2)THEN

!             SURFACE DIFFUSE REFLECTANCE AND REFLECTED DIRECT SOLAR:
              RUPCNS=SALB
              EUPCNS=AADREF*CSZEN0(1)*S0TRN(INTRVL,1)
              EUPCS(ML)=EUPCNS
          ENDIF

!         UPWARD ADDING LOOP STARTS FROM BOTTOM OF ATMOSPHERE:
          IKP1=1
          DO N=NLAYRS,1,-1

!             LAYER INDICES IN OPPOSITE DIRECTION IN ROUTINE LOOP:
              IK=IKP1
              IKP1=IKP1+1
              TAU=TAUT(INTRVL,IK)

!             USE TWO STREAM APPROXIMATION FOR THERMAL:
              C=RT3*(TAU-GTSCAT(0,IK)*COSBAR(IK))
              A2C=RT3*(TAU-GTSCAT(0,IK))
              A2C2=A2C*C
              AC=SQRT(A2C2)
              IF(AC.GT.20.)THEN
                  DENOM=C+AC
                  REF(N)=(C-AC)/DENOM
                  DENOM=.5*DENOM
                  TDF(N)=0.
                  IF(AC.LT.35.)TDF(N)=C*AC*EXP(-AC)/DENOM**2
                  ACM1=AC-1.
                  EDN(N)=(BBNDRY(IKP1)+ACM1*BBNDRY(IK))/DENOM
                  EUP(N)=(BBNDRY(IK)+ACM1*BBNDRY(IKP1))/DENOM
              ELSE
                  IF(AC.LT..08)THEN
                      EXPAN=1.-AC*(3.-AC)/6.
                      ONEME0=AC*EXPAN
                      A1ME0=A2C*EXPAN
                      E0=1.-ONEME0
                      ONEPE0=2.-ONEME0
                      ONEME1=AC*(.5-AC*(4.-AC)/24.)
                      E1=1.-ONEME1
                      E2=A2C2*(1.-AC+.55*A2C2)/3.
                  ELSE
                      E0=EXP(-AC)
                      ONEME0=1.-E0
                      ONEPE0=1.+E0
                      E1=ONEME0/AC
                      A1ME0=A2C*E1
                      ONEME1=1.-E1
                      E2=ONEME0-ONEPE0*ONEME1
                  ENDIF
                  HALFE1=.5*E1
                  DENOM=(1.+(C-AC)*HALFE1)*(ONEPE0+A1ME0)
                  TDF(N)=2*E0/DENOM
                  REF(N)=(C-A2C)*HALFE1*ONEPE0/DENOM
                  COEF1=A1ME0*E1+E2
                  COEF2=A1ME0*(ONEME1+E0)+ONEME0**2-E2
                  EDN(N)=(COEF1*BBNDRY(IKP1)+COEF2*BBNDRY(IK))/DENOM
                  EUP(N)=(COEF1*BBNDRY(IK)+COEF2*BBNDRY(IKP1))/DENOM
              ENDIF

!             CALCULATE COMPOSITE FLUXES AND REFLECTANCES:
              COEF=TDF(N)/(1.-RUPCN*REF(N))
              EUPCN=EUP(N)+COEF*(EUPCN+EDN(N)*RUPCN)
              RUPCN=REF(N)+COEF*TDF(N)*RUPCN
              EUPC(N)=EUPCN
              RUPC(N)=RUPCN
              IF(IEMSCT.EQ.2)THEN

!                 CALCULATE VARIABLES FOR SOLAR HYBRID MODIFIED
!                 DELTA EDDINGTON 2-STREAM APPROXIMATION:
                  CALL TRLAY(TAU,GTSCAT(0,IK),COSBAR(IK),CSZEN(IK),     &
     &              S0DEP(INTRVL,IK),DEPRAT(INTRVL,IK),                 &
     &              EX,TDFS(N),REFS(N))
                  IF(EX.GT.1.E-6)THEN
                      SOURC=S0TRN(INTRVL,IK)/EX
                  ELSE
                      SOURC=S0                                          &
     &                  *EXP((DEPRAT(INTRVL,IK)-1.)*S0DEP(INTRVL,IK))
                  ENDIF
                  SOURC=CSZENX(IK)*SOURC
                  EDNS(N)=SOURC*TDFS(N)
                  EUPS(N)=SOURC*REFS(N)
                  TDFS(N)=EX+TDFS(N)
                  COEF=TDFS(N)/(1.-RUPCNS*REFS(N))
                  EUPCNS=EUPS(N)+COEF*(EUPCNS+EDNS(N)*RUPCNS)
                  RUPCNS=REFS(N)+COEF*TDFS(N)*RUPCNS
                  EUPCS(N)=EUPCNS
                  RUPCS(N)=RUPCNS
              ENDIF

!             END UPWARD LAYER LOOP:
          ENDDO

!         NOW ADD DOWNWARD FROM TOP LAYER (N=1):
          EDNCN=0.
          IK=ML
          DNF(INTRVL,IK)=0.
          UPF(INTRVL,IK)=EUPC(1)
          UPFLX(IK)=UPFLX(IK)+SUBINT(INTRVL)*EUPC(1)
          RDNCN=0.
          IF(IEMSCT.EQ.2)THEN
              EDNCNS=0.
              DNFS(INTRVL,IK)=0.
              UPFS(INTRVL,IK)=EUPCS(1)
              UPFLXS(IK)=UPFLXS(IK)+SUBINT(INTRVL)*EUPCS(1)
              NTFLX(IK)=NTFLX(IK)+                                      &
     &          SUBINT(INTRVL)*(EUPCS(1)-CSZEN0(IK)*S0TRN(INTRVL,IK))
              RDNCNS=0.
          ENDIF
          NM1=1
          DO N=2,NLAYRS
              IK=IK-1
              DENOM=1.-RDNCN*REF(NM1)
              COEF=TDF(NM1)/DENOM
              EDNCN=EDN(NM1)+COEF*(EDNCN+EUP(NM1)*RDNCN)
              RDNCN=REF(NM1)+COEF*TDF(NM1)*RDNCN
              DNF(INTRVL,IK)=(EDNCN+EUPC(N)*RDNCN)/DENOM
              UPF(INTRVL,IK)=(EUPC(N)+EDNCN*RUPC(N))/DENOM
              DNFLX(IK)=DNFLX(IK)+SUBINT(INTRVL)*DNF(INTRVL,IK)
              UPFLX(IK)=UPFLX(IK)+SUBINT(INTRVL)*UPF(INTRVL,IK)
              NTFLX(IK)=NTFLX(IK)+SUBINT(INTRVL)*                       &
     &          (EUPC(N)*(1.-RDNCN)-EDNCN*(1.-RUPC(N)))/DENOM
              IF(IEMSCT.EQ.2)THEN
                  DENOM=1.-RDNCNS*REFS(NM1)
                  COEF=TDFS(NM1)/DENOM
                  EDNCNS=EDNS(NM1)+COEF*(EDNCNS+EUPS(NM1)*RDNCNS)
                  RDNCNS=REFS(NM1)+COEF*TDFS(NM1)*RDNCNS
                  DNFS(INTRVL,IK)=(EDNCNS+EUPCS(N)*RDNCNS)/DENOM
                  UPFS(INTRVL,IK)=(EUPCS(N)+EDNCNS*RUPCS(N))/DENOM
                  CZTS0=CSZEN0(IK)*S0TRN(INTRVL,IK)
                  DNDRCT(NFLUX,IK)=DNDRCT(NFLUX,IK)+SUBINT(INTRVL)*CZTS0
                  DNFLXS(IK)=DNFLXS(IK)+SUBINT(INTRVL)*DNFS(INTRVL,IK)
                  UPFLXS(IK)=UPFLXS(IK)+SUBINT(INTRVL)*UPFS(INTRVL,IK)
                  NTFLX(IK)=NTFLX(IK)-SUBINT(INTRVL)*(CZTS0             &
     &              +(EDNCNS*(1.-RUPCS(N))-EUPCS(N)*(1.-RDNCNS))/DENOM)
              ENDIF
              NM1=N

!             END DOWNWARD LAYER LOOP:
          ENDDO

!         SURFACE (IK=1, N=ML, NM1=NLAYRS):
          DENOM=1.-RDNCN*REF(NLAYRS)
          COEF=TDF(NLAYRS)/DENOM
          EDNCN=EDN(NLAYRS)+COEF*(EDNCN+EUP(NLAYRS)*RDNCN)
          RDNCN=REF(NLAYRS)+COEF*TDF(NLAYRS)*RDNCN
          DNF(INTRVL,1)=(EDNCN+EUPC(ML)*RDNCN)/DENOM
          UPF(INTRVL,1)=EUPC(ML)+SALB*DNF(INTRVL,1)
          DNFLX(1)=DNFLX(1)+SUBINT(INTRVL)*DNF(INTRVL,1)
          IF(IEMSCT.EQ.2)THEN
              DENOM=1.-RDNCNS*REFS(NLAYRS)
              COEF=TDFS(NLAYRS)/DENOM
              EDNCNS=EDNS(NLAYRS)+COEF*(EDNCNS+EUPS(NLAYRS)*RDNCNS)
              RDNCNS=REFS(NLAYRS)+COEF*TDFS(NLAYRS)*RDNCNS
              DNFS(INTRVL,1)=(EDNCNS+EUPCS(ML)*RDNCNS)/DENOM
              UPFS(INTRVL,1)=SALB*DNFS(INTRVL,1)+EUPCS(ML)
              DNDRCT(NFLUX,1)=DNDRCT(NFLUX,1)                           &
     &          +SUBINT(INTRVL)*(CSZEN0(1)*S0TRN(INTRVL,1))
              DNFLXS(1)=DNFLXS(1)+SUBINT(INTRVL)*DNFS(INTRVL,1)
          ENDIF

!         END K-DISTRIBUTION LOOP
      ENDDO

!     USE DISORT TO SCALE SURFACE FLUXES:
      IF(LDISCL)THEN
         IF(V.GT.VDISCL(1) .AND. V.LT.VDISCL(NDISCL))THEN
            CALL HUNT(VDISCL,NDISCL,V,JLO)
            SCALE=RDISCL(2,JLO)
            SCALE=SCALE+(RDISCL(2,JLO+1)-SCALE)*(V-VDISCL(JLO))         &
     &                             /(VDISCL(JLO+1)-VDISCL(JLO))
            DNFLX(1)=SCALE*DNFLX(1)
            DNFLXS(1)=SCALE*DNFLXS(1)
         ENDIF
      ENDIF

!     FINALIZE SURFACE AND TOP-OF-ATMOSPHERE VALUES:
      UPFLX(1)=EUPC(ML)+SALB*DNFLX(1)
      NTFLX(1)=UPFLX(1)-DNFLX(1)
      IF(IEMSCT.EQ.2)THEN
          UPFLXS(1)=AADREF*DNDRCT(NFLUX,1)+SALB*DNFLXS(1)
          NTFLX(1)=NTFLX(1)+UPFLXS(1)-DNFLXS(1)-DNDRCT(NFLUX,1)
          DNDRCT(NFLUX,ML)=CSZEN0(ML)*S0
      ENDIF
      NTFLX(ML)=NTFLX(ML)+UPFLX(ML)
      DO IK=1,ML
          UPDIFF(NFLUX,IK)=UPFLX(IK)+UPFLXS(IK)
          DNDIFF(NFLUX,IK)=DNFLX(IK)+DNFLXS(IK)
      ENDDO
      WRITE(*,*) 'NFLUX2 = ',NFLUX

!     SAVE MS DATA FOR REPEAT USE:
      IF(.NOT.LJMASS .AND. LSAVMS)WRITE(ISCRCH)(COSBAR(IK),             &
     &  GTSCAT(0,IK),(TAUT(INTRVL,IK),INTRVL=1,KNTRVL),IK=1,NLAYRS),    &
     &  ((UPF(INTRVL,IK),DNF(INTRVL,IK),                                &
     &  UPFS(INTRVL,IK),DNFS(INTRVL,IK),INTRVL=1,KNTRVL),IK=1,ML)

!     WRITE OUT SPECTRAL FLUXES:
      IF(FLAGS(1:4).NE.'    ')THEN
          CALL SCNFLX(NUM_LRES,SOLAR_FLUX,DIFFUSE_FLUX,                 &
     &                NUM_LEVS,FLX_UPDIFFUSE,FLX_DNDIFFUSE,FLX_DNDIRECT)
      ELSEIF(NFLUX.LT.NWGT)THEN
          NFLUX=NFLUX+1
      ELSE
          CALL SPCFLX
      ENDIF
      DNDRCT(NFLUX,1)=0.

!     RETURN TO ROUTINE LOOP:
      RETURN
      END
