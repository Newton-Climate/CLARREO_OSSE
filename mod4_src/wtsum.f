      SUBROUTINE WTSUM(JFLUX,JOFF,CONFLX,WT,LAST,NUM_LRES,SOLAR_FLUX,   &
     &                 DIFFUSE_FLUX,NUM_LEVS,FLX_UPDIFFUSE,             &
     &                 FLX_DNDIFFUSE,FLX_DNDIRECT)

!     WTSUM WRITES OUT SPECTRAL FLUX, DEGRADED WITH
!     A TRIANGULAR SLIT FUNCTION, TO UNIT IFLUX.

!     ARGUMENTS:
!       JFLUX    SPECTRAL INDEX FOR OUTPUT FLUX VALUES.
!       JOFF     SPECTRAL INDEX OFFSET (EQUALS NUMBER OF SLIT
!                FUNCTIONS TERMINATING IN CURRENT SPECTRAL BIN).
!       CONFLX   FLUX SPECTRAL CONVERSION FACTOR [CM-1 / SPECTRAL UNIT].
!       WT       WEIGHT OF SPECTRAL BIN IN EVALUATING SLIT FUNCTION.
!       LAST     LOGICAL FLAG, TRUE IF CURRENT SLIT FUNCTION
!                TERMINATES IN CURRENT SPECTRAL BIN.
      INTEGER JFLUX,JOFF
      LOGICAL LAST
      REAL CONFLX,WT

!     LIST PARAMETERS:
      INCLUDE 'PARAMS.h'
      INCLUDE 'ERROR.h'

!     COMMONS:
      INCLUDE 'IFIL.h'

!     /WTFLX/
!       NFLUX   SPECTRAL BIN COUNTER FOR FLUX TABLE.
!       UPDIFF  BOUNDARY UPWARD DIFFUSE SPECTRAL FLUX [W CM-2 / CM-1].
!       DNDIFF  BOUNDARY DOWNWARD DIFFUSE SPECTRAL FLUX [W CM-2 / CM-1].
!       DNDRCT  BOUNDARY DIRECT SOLAR SPECTRAL FLUX [W CM-2 / CM-1].
!       NTERMS  NUMBER OF TERMS IN FLUX SPECTRAL SUM.
!       SMUPDF  LAYER BOUNDARY UPWARD DIFFUSE IN-BAND FLUX [W CM-2].
!       SMDNDF  LAYER BOUNDARY DOWNWARD DIFFUSE IN-BAND FLUX [W CM-2].
!       SMDNDR  LAYER BOUNDARY DIRECT SOLAR IN-BAND FLUX [W CM-2].
      INTEGER NFLUX,NTERMS
      REAL UPDIFF,DNDIFF,DNDRCT,SMUPDF,SMDNDF,SMDNDR
      COMMON/WTFLX/NFLUX,UPDIFF(0:NBINS,1:LAYDIM),                      &
     &  DNDIFF(0:NBINS,1:LAYDIM),DNDRCT(0:NBINS,1:LAYDIM),              &
     &  NTERMS,SMUPDF(LAYDIM),SMDNDF(LAYDIM),SMDNDR(LAYDIM)

!     /WTFLXC/
!        FRMT    FORMAT USED IN FLUX TABLE.
      CHARACTER*50 FRMT
      COMMON/WTFLXC/FRMT

!     /CARD4/
!       IV1      LOWEST FREQUENCY OUTPUT [CM-1].
!       IV2      HIGHEST FREQUENCY OUTPUT [CM-1].
!       IDV      PRINTOUT FREQUENCY STEP SIZE [CM-1].
!       IFWHM    TRIANGULAR SLIT FULL-WIDTH-HALF-MAXIMUM [CM-1].
!       IVX      CURRENT COMPUTATION FREQUENCY [CM-1].
!       IVOFF    OFFSET BETWEEN COMPUTATION AND OUTPUT FREQUENCIES,
!                REQUIRED FOR SLIT FUNCTION [CM-1].
!       IWRITE   COMPUTATION FREQUENCY OF NEXT WRITE [CM-1].
!       NSPCDT   NUMBER OF OUTPUT SPECTRAL DATA POINTS.
!       NWGT     NUMBER OF SPECTRAL BINS CONTRIBUTING TO SLIT FUNCTION.
!       WGT      NORMALIZED WEIGHTS USED TO DEFINE THE SLIT FUNCTION.
      INTEGER IV1,IV2,IDV,IFWHM,IVX,IVOFF,IWRITE,NSPCDT,NWGT
      REAL WGT
      COMMON/CARD4/IV1,IV2,IDV,IFWHM,IVX,IVOFF,IWRITE,NSPCDT,           &
     &  NWGT,WGT(NBINS)

!     /CNTRL/
!       IKMAX    NUMBER OF PATH SEGMENTS ALONG LINE-OF-SIGHT.
!       ML       NUMBER OF ATMOSPHERIC PROFILE LEVELS.
!       MLFLX    NUMBER OF LEVELS FOR WHICH FLUX VALUES ARE WRITTEN.
!       ISSGEO   LINE-OF-SIGHT FLAG (0 = SENSOR PATH, 1 = SOLAR PATHS).
!       IMULT    MULTIPLE SCATTERING FLAG
!                  (0=NONE, 1=AT SENSOR, -1=AT FINAL OR TANGENT POINT).
      INTEGER IKMAX,ML,MLFLX,ISSGEO,IMULT
      COMMON/CNTRL/IKMAX,ML,MLFLX,ISSGEO,IMULT

!     COMMON/SCAN/
!       V1       LOWER BOUND ON SPECTRAL RANGE [CHUNIT DEFINES UNIT].
!       V2       UPPER BOUND ON SPECTRAL RANGE [CHUNIT DEFINES UNIT].
!       DV       SPECTRAL STEP SIZE FOR OUTPUT [CHUNIT DEFINES UNIT].
!       FWHM     FULL-WIDTH-AT-HALF-MAXIMUM [CHUNIT DEFINES UNIT].
!       FWHMSQ   TRIANGULAR SLIT NORMALIZATION FACTOR
!                (EQUALS FWHM SQUARED) [CHUNIT DEFINES UNIT].
!       VOUT     CURRENT SPECTRAL OUTPUT [CHUNIT DEFINES UNIT].
      REAL V1,V2,DV,FWHM,FWHMSQ,VOUT
      COMMON/SCAN/V1,V2,DV,FWHM,FWHMSQ,VOUT

      !DRF
      INTEGER NUM_LRES
      REAL SOLAR_FLUX(NUM_LRES),DIFFUSE_FLUX(NUM_LRES)
      INTEGER NUM_LEVS
      REAL FLX_UPDIFFUSE(NUM_LEVS,NUM_LRES)
      REAL FLX_DNDIFFUSE(NUM_LEVS,NUM_LRES) 
      REAL FLX_DNDIRECT(NUM_LEVS,NUM_LRES)
      !DRF

!     DECLARE BLOCK DATA ROUTINES EXTERNAL:
      EXTERNAL DEVCBD

!     LOCAL VARIABLES:
!       IK       LAYER INDEX.
!       KFLUX    SPECTRAL SLIT INDEX.
!       CONWT    PRODUCT OF FLUX SPECTRAL CONVERSION AND SLIT
!                FUNCTION WEIGHTING FACTORS [CM-1 / SPECTRAL UNIT].
      INTEGER IK,KFLUX
      REAL CONWT
      !WRITE(*,*) 'into wtsum'
!     COMBINE FLUX SPECTRAL CONVERSION AND WEIGHTING FACTOR.
      CONWT=CONFLX*WT
      IF(LAST)THEN

!         WRITE OUT FLUXES:
          IF(JFLUX.GE.NBINS)THEN
              WRITE(IPR,'(/2A,I6,A,/17X,A,I3,A,/17X,2A)')               &
     &          ' Error in WTSUM:  The spectral bin at',IVX,            &
     &          ' CM-1 contributes to',' more than NBINS (=',NBINS,     &
     &          ') spectral slit functions.',' Increase parameter',     &
     &          ' NBINS or modify CARD4 spectral inputs.'
              IF(LJMASS)CALL WRTBUF(FATAL)
              STOP 'Error in WTSUM:  See tape6 (or .tp6) for details.'
          ENDIF
          JFLUX=JFLUX+1
          IF(.NOT.LJMASS) WRITE(IFLUX,FMT=FRMT)VOUT,                    &
     &      (UPDIFF(JFLUX,IK)+CONWT*UPDIFF(0,IK),                       &
     &       DNDIFF(JFLUX,IK)+CONWT*DNDIFF(0,IK),                       &
     &       DNDRCT(JFLUX,IK)+CONWT*DNDRCT(0,IK),IK=1,MLFLX)
          NTERMS=NTERMS+1
          SOLAR_FLUX(FLOOR(1+(VOUT-V1)/DV)) =                           &
     &               DNDRCT(JFLUX,MLFLX)+CONWT*DNDRCT(0,MLFLX)
          DIFFUSE_FLUX(FLOOR(1+(VOUT-V1)/DV)) =                         &
     &               UPDIFF(JFLUX,MLFLX)+CONWT*UPDIFF(0,MLFLX)        
          DO 5 IK=1,MLFlX
            FLX_UPDIFFUSE(IK,FLOOR(1+(VOUT-V1)/DV)) =                   &
     &         UPDIFF(JFLUX,IK)+CONWT*UPDIFF(0,IK)
            FLX_DNDIFFUSE(IK,FLOOR(1+(VOUT-V1)/DV)) =                   &
     &         DNDIFF(JFLUX,IK)+CONWT*DNDIFF(0,IK)
            FLX_DNDIRECT(IK,FLOOR(1+(VOUT-V1)/DV)) =                    &
     &         DNDRCT(JFLUX,IK)+CONWT*DNDRCT(0,IK)
   5      CONTINUE
          !WRITE(*,*) 'NUM = ',VOUT
          !WRITE(*,*) 'JFLUX = ',FLOOR(1+(VOUT-V1)/DV)
          !WRITE(*,*) 'IV1 = ',V1
          !WRITE(*,*) 'IV2 = ',V2
          !WRITE(*,*) 'IDV = ',DV
          DO 10 IK=1,ML
              SMUPDF(IK)=SMUPDF(IK)+UPDIFF(JFLUX,IK)+CONWT*UPDIFF(0,IK)
              SMDNDF(IK)=SMDNDF(IK)+DNDIFF(JFLUX,IK)+CONWT*DNDIFF(0,IK)
              SMDNDR(IK)=SMDNDR(IK)+DNDRCT(JFLUX,IK)+CONWT*DNDRCT(0,IK)
              UPDIFF(JFLUX,IK)=0.
              DNDIFF(JFLUX,IK)=0.
              DNDRCT(JFLUX,IK)=0.
   10     CONTINUE
      ELSEIF(JOFF.EQ.0)THEN

           !WRITE(*,*) 'into wtsum, joff eq 0'
!         INCREMENT WEIGHTED SUMS:
          IF(JFLUX.GE.NBINS)THEN
              WRITE(IPR,'(/2A,I6,A,/17X,A,I3,A,/17X,2A)')               &
     &          ' Error in WTSUM:  The spectral bin at',IVX,            &
     &          ' CM-1 contributes to',' more than NBINS (=',NBINS,     &
     &          ') spectral slit functions.',' Increase parameter',     &
     &          ' NBINS or modify CARD4 spectral inputs.'
              IF(LJMASS)CALL WRTBUF(FATAL)
              STOP 'Error in WTSUM:  See tape6 (or .tp6) for details.'
          ENDIF
          JFLUX=JFLUX+1
          DO 20 IK=1,ML
              UPDIFF(JFLUX,IK)=UPDIFF(JFLUX,IK)+CONWT*UPDIFF(0,IK)
              DNDIFF(JFLUX,IK)=DNDIFF(JFLUX,IK)+CONWT*DNDIFF(0,IK)
              DNDRCT(JFLUX,IK)=DNDRCT(JFLUX,IK)+CONWT*DNDRCT(0,IK)
   20     CONTINUE
          !WRITE(*,*) 'UPDIFF = ',UPDIFF(JFLUX,ML)
      ELSEIF(JFLUX.GE.NBINS)THEN
           !WRITE(*,*) 'into wtsum, jflux ge nbins'

!         TRANSLATE AND INITIALIZE WEIGHTED SUMS:
          JFLUX=JFLUX+1-JOFF
          JOFF=0
          DO 40 IK=1,ML
              UPDIFF(JFLUX,IK)=CONWT*UPDIFF(0,IK)
              DNDIFF(JFLUX,IK)=CONWT*DNDIFF(0,IK)
              DNDRCT(JFLUX,IK)=CONWT*DNDRCT(0,IK)
              DO 30 KFLUX=JFLUX+1,NBINS
                  UPDIFF(KFLUX,IK)=0.
                  DNDIFF(KFLUX,IK)=0.
                  DNDRCT(KFLUX,IK)=0.
   30         CONTINUE
   40     CONTINUE
      ELSE
           !WRITE(*,*) 'into wtsum, else'

!         TRANSLATE, INCREMENT, AND REINITIALIZE "JFLUX" WEIGHTED SUMS:
          JFLUX=JFLUX+1
          DO 50 IK=1,ML
              UPDIFF(JFLUX-JOFF,IK)=UPDIFF(JFLUX,IK)+CONWT*UPDIFF(0,IK)
              DNDIFF(JFLUX-JOFF,IK)=DNDIFF(JFLUX,IK)+CONWT*DNDIFF(0,IK)
              DNDRCT(JFLUX-JOFF,IK)=DNDRCT(JFLUX,IK)+CONWT*DNDRCT(0,IK)
              UPDIFF(JFLUX,IK)=0.
              DNDIFF(JFLUX,IK)=0.
              DNDRCT(JFLUX,IK)=0.
   50     CONTINUE
      ENDIF
      RETURN
      END
