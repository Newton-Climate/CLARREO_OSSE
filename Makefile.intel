# Make macros for CAM.
#Note: netcdf/4.0 was built with openmpi/1.2.8-intel 
ROOTDIR      := ./
EXENAME      := radiation
MODEL_EXEDIR := ./
INC_NETCDF   := /nasa/netcdf/3.6.0/intel/include
LIB_NETCDF   := /nasa/netcdf/3.6.0/intel/lib
INC_MPI      := 
LIB_MPI      := 
DEBUG        := TRUE
SMP          := FALSE
SPMD         := FALSE
MODTRAN_SPMD := FALSE
USER_FC      := mpif90
USER_CC      := mpicc
FC           := $(USER_FC)
CC           := $(USER_CC)
MKL_PATH     := /nasa/intel/Compiler/11.1/072/mkl/lib/em64t
MODPCRTM      := ./modpcrtm_lib 

#-----------------------------------------------------------------------
# Makefile for building CAM on various platforms.
#
# This makefile assumes the existence the file:
#
# Filepath      The directories, listed one per line, that contain the source
#               code required to build CAM.  This list is used the set the
#               VPATH variable which is used by GNU make to search for
#               dependencies (after it looks in the directory from which
#               it was invoked).  This list of directories, prepended with ./,
#               is also used to construct the list of search directories 
#               used by the preprocessor (as specified by -I command-line options).
#
# The following macros may be set in the user's environment:
#

# ROOTDIR       Root directory for the CAM source distribution.  If ROOTDIR is not
#               set the makefile searches for it in a file called "Rootdir".
# EXENAME       Name to call the executable.  Default: atm
# MODEL_EXEDIR  Directory to build the executable in.  Default: ./
# INC_NETCDF    Directory location of the NetCDF include files.  Default: /usr/local/include
# LIB_NETCDF    Directory location of the NetCDF library.  Default: /usr/local/lib
# INC_MPI       Directory location of the MPI include files.  Default: /usr/local/include
# LIB_MPI       Directory location of the MPI library.  Default: /usr/local/lib
# DEBUG         Set to TRUE to turn on compiler debugging options.  Default: FALSE 
# SPMD          Whether to build in SPMD mode or not. 	[values TRUE FALSE]/nasa/intel/Compiler/11.0/083/mkl/lib/em64t
#               Default: read from ./misc.h
#               N.B. To ensure consistency between the Makefile and misc.h the SPMD
#                    macro should not be set.  This forces it to be read from misc.h.
# SMP           Set to TRUE to enable building in SMP mode (uses OpenMP).  
#               Currently implemented for IBM, SGI, linux-pgf90. (default is TRUE on IBM and 
#               linux-pgf90, and depends on SPMD setting on SGI).
# USER_FC       Allow user to override the default Fortran compiler specified in Makefile.
# USER_CC       Allow user to override the default C compiler specified in Makefile (linux only).
# USER_FFLAGS   Additional compiler flags that the user wishes to set../netcdf_externals.f90
# NO_SWITCH     On Compaq if the hardware switch is not available
#               set this env variable to "TRUE".
#clarreo
#------------------------------------------------------------------------

# Set up special characters
null  :=
space := $(null) $(null)
comma := $(null),$(null)


# Check if SPMD is defined in "misc.h"
# Ensure that it is defined and not just "undef SPMD" set in file
# if we pick up (#define SPMD) then we set SPMD to true
ifeq ($(SPMD),$(null))
	SPMDSET := $(shell /bin/grep SPMD misc.h)
	ifneq (,$(findstring define,$(SPMDSET)))
		SPMD := TRUE
	else
		SPMD := FALSE
	endif
endif

#Load dependency search path.
#(In particular here, we have ./ ./mod4_src in Filepath)
#(Why do we need ./mod4_src?)
#removed ./mod4_src from Filepath 4/28/09 CAA 
dirs := . $(shell cat Filepath)

# Set cpp search path
#(careful with openmp)
#(for all the include files) 
cpp_dirs := $(dirs) $(INC_NETCDF) $(INC_MPI)
cpp_path := $(foreach dir,$(cpp_dirs),-I$(dir)) # format for command line

# Expand any tildes in directory names. Change spaces to colons.
VPATH    := $(foreach dir,$(cpp_dirs),$(wildcard $(dir))) 
VPATH    := $(subst $(space),:,$(VPATH)) 

#------------------------------------------------------------------------
# Primary target: build the model
#------------------------------------------------------------------------
all: $(MODEL_EXEDIR)/$(EXENAME)

# Get list of files and build dependency file for all .o files
#   using perl scripts mkSrcfiles and mkDepends

SOURCES   := $(shell cat Srcfiles)

Depends: Srcfiles Filepath
	$(ROOTDIR)/mkDepends Filepath Srcfiles > $@

Srcfiles: Filepath
	$(ROOTDIR)/mkSrcfiles > $@

OBJS      := $(addsuffix .o, $(basename $(SOURCES)))

#(Are any of these actually used in the source code
#(since I cannot find them?)
CPPDEF    := -DCAM -DNO_SHR_VMATH -DHIDE_SHR_MSG

$(MODEL_EXEDIR)/$(EXENAME): $(OBJS)
	$(FC) -o $@ $(OBJS) -L$(LIB_NETCDF) -L$(MODPCRTM) -lnetcdf -lmodpcrtm \
          -Wl,--start-group $(MKL_PATH)/libmkl_lapack95_lp64.a $(MKL_PATH)/libmkl_intel_lp64.a  $(MKL_PATH)/libmkl_intel_thread.a $(MKL_PATH)/libmkl_core.a -Wl,--end-group -lpthread \
        $(LDFLAGS)


          #-Wl,--start-group $(MKL_PATH)/libmkl_lapack.a $(MKL_PATH)/libmkl_intel_lp64.a  $(MKL_PATH)/libmkl_intel_thread.a $(MKL_PATH)/libmkl_core.a -Wl,--end-group -lguide -lpthread \

# Architecture-specific flags and rules
#
# Determine platform 
UNAMES := $(shell uname -s)


#------------------------------------------------------------------------
# Linux
#------------------------------------------------------------------------

ifeq ($(UNAMES),Linux)


# if not using pgcc, define USE_GCC to disable threading in the timing library
#appropriate for icc?
CFLAGS = $(cpp_path) -DLINUX -DOFFLINE $(CPPDEF) 
ifeq ($(CC),pgcc)
  CFLAGS += -fast
else
  CFLAGS += -DUSE_GCC
endif


ifeq ($(FC),mpif90)

  #Note: flag -132 is necessary for the code to compile
  #-CB      runtime checks for out-of-bounds array subscript/substring refs
  #-[no-]ftz             enable/disable flush denormal results to zero
  #-132           specify 132 column lines for fixed form sources
  #-g         produce symbolic debug information in object file (implies -O0 when
    #         another optimization option is not explicitly set)
  #-O0        used here with -g just to be sure

  FFLAGS      := $(cpp_path) -132 -ftz -g -CB -O0 -i4 -mcmodel=medium -shared-intel -DMODTRAN_SPMD -DLINUX -DOFFLINE $(CPPDEF)
  FREEFLAGS   := -FR
  FIXEDFLAGS  :=
  LDFLAGS     := -mcmodel=medium -shared-intel


  ifeq ($(SMP),TRUE)
    FFLAGS    += -openmp
    CFLAGS    += -openmp
    LDFLAGS   += -openmp
  endif

endif  #mpif90 (intel compiler)


# Flags common to all compilers, for MPI
ifeq ($(SPMD),TRUE)
  FFLAGS  += -I$(INC_MPI)
  LDFLAGS += -L$(LIB_MPI)
else
  FFLAGS  += -DHIDE_MPI
endif


# Rules
.SUFFIXES:
.SUFFIXES: .F .F90 .c .o

.F90.o:
	$(FC) -c $(FREEFLAGS) $(FFLAGS) $<
.F.o:
	$(FC) -c $(FFLAGS) $<
.c.o:
	$(CC) -c $(CFLAGS) $<

endif #Linux OS

#------------------------------------------------------------------------
# Targets/rules that depend on architecture specific variables.
#------------------------------------------------------------------------


RM := rm

clean:
	$(RM) -f Depends Srcfiles *.o *.mod *.stb $(MODEL_EXEDIR)/$(EXENAME)
	$(RM) -f *.o *.mod *.stb $(MODEL_EXEDIR)/$(EXENAME)

debug: 
	echo "FFLAGS: $(FFLAGS)"
	echo "LDFLAGS: $(LDFLAGS)"
	echo "OBJS: $(OBJS)"
	echo "PROCESSOR PATH: $(cpp_path)"  

include Depends


#END ----------------------------------------------------------------------------------------



#-M[no]recursive     Generate code to allow recursive subprograms
#-M[no]dalign        Align doubles on double alignment boundaries
#-Mextend            Allow source lines up to 132 characters
# Flags used for the portland compiler
#  FFLAGS    := $(cpp_path) -r8 -i4 $(CPPDEF) -Mrecursive -Mdalign -Mextend -DLINUX \
#	       -DPGF90
#  FFLAGS    := $(cpp_path) $(CPPDEF) -Mrecursive -Mdalign -Mextend -DLINUX \
#	       -DPGF90
#  FREEFLAGS := -Mfree
#
#  ifeq ($(DEBUG),TRUE)
#    FFLAGS      += -g -Ktrap=fp -Mbounds
#    SPEC_FFLAGS := $(FFLAGS) 
#  else
#    SPEC_FFLAGS := $(FFLAGS) 
#    FFLAGS += -fast
#  endif
